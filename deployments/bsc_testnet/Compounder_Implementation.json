{
  "address": "0x3878aD436b3998b60686d2B23C431B6CdA42eEb8",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AddressZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ArrayLengthMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientStakeAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidCompoundFee",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSlippage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotBountyManager",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEligible",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "SwapFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        }
      ],
      "name": "BountyManagerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_compoundFee",
          "type": "uint256"
        }
      ],
      "name": "CompoundFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_routes",
          "type": "address[]"
        }
      ],
      "name": "RoutesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_slippageLimit",
          "type": "uint256"
        }
      ],
      "name": "SlippageLimitUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_COMPOUND_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_SLIPPAGE_LIMIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_DELAY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENT_DIVISOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "addressProvider",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "autocompoundThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "minStakeAmtEth",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bountyManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_execute",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_slippage",
          "type": "uint256"
        }
      ],
      "name": "claimCompound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "compoundFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_uniRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mfd",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_baseToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_addressProvider",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lockZap",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_compoundFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_slippageLimit",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pending",
          "type": "uint256"
        }
      ],
      "name": "isEligibleForAutoCompound",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pending",
          "type": "uint256"
        }
      ],
      "name": "isEligibleForCompound",
      "outputs": [
        {
          "internalType": "bool",
          "name": "eligible",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastAutocompound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockZap",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "multiFeeDistribution",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceProvider",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "prntToken",
      "outputs": [
        {
          "internalType": "contract IMintableToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardToBaseRoute",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_slippage",
          "type": "uint256"
        }
      ],
      "name": "selfCompound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "selfEligibleCompound",
      "outputs": [
        {
          "internalType": "bool",
          "name": "eligible",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        }
      ],
      "name": "setBountyManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_compoundFee",
          "type": "uint256"
        }
      ],
      "name": "setCompoundFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_routes",
          "type": "address[]"
        }
      ],
      "name": "setRoutes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_slippageLimit",
          "type": "uint256"
        }
      ],
      "name": "setSlippageLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slippageLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "userEligibleForCompound",
      "outputs": [
        {
          "internalType": "bool",
          "name": "eligible",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "viewPendingRewards",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "wethToPrime",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7d72c5235a172ec523992ba098a895868b2089ab4fa64a6a4e8d56edda0289b2",
  "receipt": {
    "to": null,
    "from": "0xdE8023f05d831Fb7381486D041237ddEB06c1BA2",
    "contractAddress": "0x3878aD436b3998b60686d2B23C431B6CdA42eEb8",
    "transactionIndex": 0,
    "gasUsed": "2709587",
    "logsBloom": "0x
    "blockHash": "0xb7fc0c41620f05a341b40e0e4402f73fdcea86139962d838b86544648ee0c1e9",
    "transactionHash": "0x7d72c5235a172ec523992ba098a895868b2089ab4fa64a6a4e8d56edda0289b2",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 43440193,
        "transactionHash": "0x7d72c5235a172ec523992ba098a895868b2089ab4fa64a6a4e8d56edda0289b2",
        "address": "0x3878aD436b3998b60686d2B23C431B6CdA42eEb8",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 0,
        "blockHash": "0xb7fc0c41620f05a341b40e0e4402f73fdcea86139962d838b86544648ee0c1e9"
      }
    ],
    "blockNumber": 43440193,
    "cumulativeGasUsed": "2709587",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "dcefabf19271a6489c66282870162b11",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ArrayLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientStakeAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCompoundFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSlippage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotBountyManager\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEligible\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SwapFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"BountyManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_compoundFee\",\"type\":\"uint256\"}],\"name\":\"CompoundFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_routes\",\"type\":\"address[]\"}],\"name\":\"RoutesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_slippageLimit\",\"type\":\"uint256\"}],\"name\":\"SlippageLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_COMPOUND_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SLIPPAGE_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autocompoundThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minStakeAmtEth\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bountyManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_execute\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"}],\"name\":\"claimCompound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compoundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mfd\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_addressProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lockZap\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_compoundFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slippageLimit\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pending\",\"type\":\"uint256\"}],\"name\":\"isEligibleForAutoCompound\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pending\",\"type\":\"uint256\"}],\"name\":\"isEligibleForCompound\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"eligible\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastAutocompound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockZap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiFeeDistribution\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prntToken\",\"outputs\":[{\"internalType\":\"contract IMintableToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardToBaseRoute\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"}],\"name\":\"selfCompound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"selfEligibleCompound\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"eligible\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setBountyManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_compoundFee\",\"type\":\"uint256\"}],\"name\":\"setCompoundFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_routes\",\"type\":\"address[]\"}],\"name\":\"setRoutes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_slippageLimit\",\"type\":\"uint256\"}],\"name\":\"setSlippageLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippageLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"userEligibleForCompound\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"eligible\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"viewPendingRewards\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"wethToPrime\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Prime\",\"kind\":\"dev\",\"methods\":{\"autocompoundThreshold()\":{\"returns\":{\"minStakeAmtEth\":\"Minimum stake amount in ETH\"}},\"claimCompound(address,bool,uint256)\":{\"details\":\"Can be auto compound or manual compound\",\"params\":{\"_execute\":\"whether to execute txn, or just quote (expected amount out for bounty executor)\",\"_slippage\":\"that shouldn't be exceeded when performing swaps\",\"_user\":\"user address\"},\"returns\":{\"fee\":\"amount\"}},\"initialize(address,address,address,address,address,uint256,uint256)\":{\"params\":{\"_addressProvider\":\"Address of LendingPoolAddressesProvider\",\"_baseToken\":\"Address of pair asset of PRNT LP\",\"_compoundFee\":\"Compounding fee\",\"_lockZap\":\"Address of LockZap contract\",\"_mfd\":\"Address of MFD\",\"_slippageLimit\":\"Slippage limit\",\"_uniRouter\":\"Address of swap router\"}},\"isEligibleForAutoCompound(address,uint256)\":{\"params\":{\"_pending\":\"amount\",\"_user\":\"address\"},\"returns\":{\"_0\":\"True or False\"}},\"isEligibleForCompound(uint256)\":{\"params\":{\"_pending\":\"amount\"},\"returns\":{\"eligible\":\"True or False\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"selfCompound(uint256)\":{\"params\":{\"_slippage\":\"that shouldn't be exceeded when performing swaps\"}},\"selfEligibleCompound()\":{\"returns\":{\"eligible\":\"`true` or `false`\"}},\"setBountyManager(address)\":{\"params\":{\"_manager\":\"Bounty manager address\"}},\"setCompoundFee(uint256)\":{\"params\":{\"_compoundFee\":\"fee ratio for compounding\"}},\"setRoutes(address,address[])\":{\"params\":{\"_routes\":\"Swap route for token\",\"_token\":\"Token for swap\"}},\"setSlippageLimit(uint256)\":{\"params\":{\"_slippageLimit\":\"new slippage limit\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"userEligibleForCompound(address)\":{\"params\":{\"_user\":\"address\"},\"returns\":{\"eligible\":\"`true` or `false`\"}},\"viewPendingRewards(address)\":{\"params\":{\"_user\":\"owner of rewards\"},\"returns\":{\"amts\":\"array of reward amounts\",\"tokens\":\"array of reward token addresses\"}}},\"stateVariables\":{\"MAX_SLIPPAGE_LIMIT\":{\"details\":\"The max slippage should be equal to the max slippage of the LockZap contract, otherwise transactions could revert\"}},\"title\":\"Compounder Contract\",\"version\":1},\"userdoc\":{\"events\":{\"BountyManagerUpdated(address)\":{\"notice\":\"Emitted when bounty manager is updated\"},\"CompoundFeeUpdated(uint256)\":{\"notice\":\"Emitted when compounding fee is updated\"},\"RoutesUpdated(address,address[])\":{\"notice\":\"Emitted when routes are updated\"},\"SlippageLimitUpdated(uint256)\":{\"notice\":\"Emitted when slippage limit is updated\"}},\"kind\":\"user\",\"methods\":{\"MAX_SLIPPAGE_LIMIT()\":{\"notice\":\"The maximum slippage limit that can be set by admins\"},\"PERCENT_DIVISOR()\":{\"notice\":\"Percent divisor which is equal to 100%\"},\"addressProvider()\":{\"notice\":\"Lending Pool Addresses Provider contract address\"},\"autocompoundThreshold()\":{\"notice\":\"Returns minimum stake amount in ETH\"},\"baseToken()\":{\"notice\":\"Token that PRNT is paired with in LP\"},\"bountyManager()\":{\"notice\":\"BountyManager address\"},\"claimCompound(address,bool,uint256)\":{\"notice\":\"Compound user's rewards\"},\"compoundFee()\":{\"notice\":\"Fee of compounding\"},\"initialize(address,address,address,address,address,uint256,uint256)\":{\"notice\":\"Initializer\"},\"isEligibleForAutoCompound(address,uint256)\":{\"notice\":\"Returns if user is eligbile for auto compounding\"},\"isEligibleForCompound(uint256)\":{\"notice\":\"Returns if pending amount is elgible for auto compounding\"},\"lastAutocompound(address)\":{\"notice\":\"Timestamp of last auto compounding\"},\"lockZap()\":{\"notice\":\"Lockzap address\"},\"multiFeeDistribution()\":{\"notice\":\"MFD address\"},\"pause()\":{\"notice\":\"Pause contract\"},\"priceProvider()\":{\"notice\":\"Price provider contract address\"},\"prntToken()\":{\"notice\":\"PRNT token address\"},\"rewardToBaseRoute(address,uint256)\":{\"notice\":\"Swap route from rewardToken to baseToken\"},\"selfCompound(uint256)\":{\"notice\":\"Compound `msg.sender`'s rewards.\"},\"selfEligibleCompound()\":{\"notice\":\"Returns if the `msg.sender` is eligible for self compound\"},\"setBountyManager(address)\":{\"notice\":\"Set bounty manager\"},\"setCompoundFee(uint256)\":{\"notice\":\"Sets the fee for compounding.\"},\"setRoutes(address,address[])\":{\"notice\":\"Set swap routes\"},\"setSlippageLimit(uint256)\":{\"notice\":\"Sets slippage limit.\"},\"slippageLimit()\":{\"notice\":\"Slippage limit for swap\"},\"uniRouter()\":{\"notice\":\"Swap router\"},\"unpause()\":{\"notice\":\"Unpause contract\"},\"userEligibleForCompound(address)\":{\"notice\":\"Returns if the user is eligible for auto compound\"},\"viewPendingRewards(address)\":{\"notice\":\"Returns the pending rewards of the `_user`\"},\"wethToPrime(uint256)\":{\"notice\":\"Swap route WETH -> PRNT\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/prime/accessories/Compounder.sol\":\"Compounder\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x359a1ab89b46b9aba7bcad3fb651924baf4893d15153049b9976b0fc9be1358e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xad32f6821f860555f9530902a65b54203a4f5db2117f4384ae47a124958078db\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"contracts/interfaces/IAToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IScaledBalanceToken} from \\\"./IScaledBalanceToken.sol\\\";\\nimport {IInitializableAToken} from \\\"./IInitializableAToken.sol\\\";\\nimport {IAaveIncentivesController} from \\\"./IAaveIncentivesController.sol\\\";\\n\\ninterface IAToken is IERC20, IScaledBalanceToken, IInitializableAToken {\\n\\t/**\\n\\t * @dev Emitted after the mint action\\n\\t * @param from The address performing the mint\\n\\t * @param value The amount being\\n\\t * @param index The new liquidity index of the reserve\\n\\t **/\\n\\tevent Mint(address indexed from, uint256 value, uint256 index);\\n\\n\\t/**\\n\\t * @dev Mints `amount` aTokens to `user`\\n\\t * @param user The address receiving the minted tokens\\n\\t * @param amount The amount of tokens getting minted\\n\\t * @param index The new liquidity index of the reserve\\n\\t * @return `true` if the the previous balance of the user was 0\\n\\t */\\n\\tfunction mint(address user, uint256 amount, uint256 index) external returns (bool);\\n\\n\\t/**\\n\\t * @dev Emitted after aTokens are burned\\n\\t * @param from The owner of the aTokens, getting them burned\\n\\t * @param target The address that will receive the underlying\\n\\t * @param value The amount being burned\\n\\t * @param index The new liquidity index of the reserve\\n\\t **/\\n\\tevent Burn(address indexed from, address indexed target, uint256 value, uint256 index);\\n\\n\\t/**\\n\\t * @dev Emitted during the transfer action\\n\\t * @param from The user whose tokens are being transferred\\n\\t * @param to The recipient\\n\\t * @param value The amount being transferred\\n\\t * @param index The new liquidity index of the reserve\\n\\t **/\\n\\tevent BalanceTransfer(address indexed from, address indexed to, uint256 value, uint256 index);\\n\\n\\t/**\\n\\t * @dev Burns aTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\\n\\t * @param user The owner of the aTokens, getting them burned\\n\\t * @param receiverOfUnderlying The address that will receive the underlying\\n\\t * @param amount The amount being burned\\n\\t * @param index The new liquidity index of the reserve\\n\\t **/\\n\\tfunction burn(address user, address receiverOfUnderlying, uint256 amount, uint256 index) external;\\n\\n\\t/**\\n\\t * @dev Mints aTokens to the reserve treasury\\n\\t * @param amount The amount of tokens getting minted\\n\\t * @param index The new liquidity index of the reserve\\n\\t */\\n\\tfunction mintToTreasury(uint256 amount, uint256 index) external;\\n\\n\\t/**\\n\\t * @dev Transfers aTokens in the event of a borrow being liquidated, in case the liquidators reclaims the aToken\\n\\t * @param from The address getting liquidated, current owner of the aTokens\\n\\t * @param to The recipient\\n\\t * @param value The amount of tokens getting transferred\\n\\t **/\\n\\tfunction transferOnLiquidation(address from, address to, uint256 value) external;\\n\\n\\t/**\\n\\t * @dev Transfers the underlying asset to `target`. Used by the LendingPool to transfer\\n\\t * assets in borrow(), withdraw() and flashLoan()\\n\\t * @param user The recipient of the underlying\\n\\t * @param amount The amount getting transferred\\n\\t * @return The amount transferred\\n\\t **/\\n\\tfunction transferUnderlyingTo(address user, uint256 amount) external returns (uint256);\\n\\n\\t/**\\n\\t * @dev Invoked to execute actions on the aToken side after a repayment.\\n\\t * @param user The user executing the repayment\\n\\t * @param amount The amount getting repaid\\n\\t **/\\n\\tfunction handleRepayment(address user, uint256 amount) external;\\n\\n\\t/**\\n\\t * @dev Returns the address of the incentives controller contract\\n\\t **/\\n\\tfunction getIncentivesController() external view returns (IAaveIncentivesController);\\n\\n\\t/**\\n\\t * @dev Returns the address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n\\t **/\\n\\tfunction UNDERLYING_ASSET_ADDRESS() external view returns (address);\\n}\\n\",\"keccak256\":\"0x0d1f63164155227cf652eb565cda7320d95c1a1b17ee91d1ca4ee7cc8e389538\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IAaveIncentivesController.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface IAaveIncentivesController {\\n\\tevent RewardsAccrued(address indexed user, uint256 amount);\\n\\n\\tevent RewardsClaimed(address indexed user, address indexed to, uint256 amount);\\n\\n\\tevent RewardsClaimed(address indexed user, address indexed to, address indexed claimer, uint256 amount);\\n\\n\\tevent ClaimerSet(address indexed user, address indexed claimer);\\n\\n\\t/*\\n\\t * @dev Returns the configuration of the distribution for a certain asset\\n\\t * @param asset The address of the reference asset of the distribution\\n\\t * @return The asset index, the emission per second and the last updated timestamp\\n\\t **/\\n\\tfunction getAssetData(address asset) external view returns (uint256, uint256, uint256);\\n\\n\\t/**\\n\\t * @dev Whitelists an address to claim the rewards on behalf of another address\\n\\t * @param user The address of the user\\n\\t * @param claimer The address of the claimer\\n\\t */\\n\\tfunction setClaimer(address user, address claimer) external;\\n\\n\\t/**\\n\\t * @dev Returns the whitelisted claimer for a certain address (0x0 if not set)\\n\\t * @param user The address of the user\\n\\t * @return The claimer address\\n\\t */\\n\\tfunction getClaimer(address user) external view returns (address);\\n\\n\\t/**\\n\\t * @dev Configure assets for a certain rewards emission\\n\\t * @param assets The assets to incentivize\\n\\t * @param emissionsPerSecond The emission for each asset\\n\\t */\\n\\tfunction configureAssets(address[] calldata assets, uint256[] calldata emissionsPerSecond) external;\\n\\n\\t/**\\n\\t * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n\\t * @param user The address of the user\\n\\t **/\\n\\tfunction handleActionBefore(address user) external;\\n\\n\\t/**\\n\\t * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n\\t * @param user The address of the user\\n\\t * @param userBalance The balance of the user of the asset in the lending pool\\n\\t * @param totalSupply The total supply of the asset in the lending pool\\n\\t **/\\n\\tfunction handleActionAfter(address user, uint256 userBalance, uint256 totalSupply) external;\\n\\n\\t/**\\n\\t * @dev Returns the total of rewards of an user, already accrued + not yet accrued\\n\\t * @param user The address of the user\\n\\t * @return The rewards\\n\\t **/\\n\\tfunction getRewardsBalance(address[] calldata assets, address user) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Claims reward for an user, on all the assets of the lending pool, accumulating the pending rewards\\n\\t * @param amount Amount of rewards to claim\\n\\t * @param to Address that will be receiving the rewards\\n\\t * @return Rewards claimed\\n\\t **/\\n\\tfunction claimRewards(address[] calldata assets, uint256 amount, address to) external returns (uint256);\\n\\n\\t/**\\n\\t * @dev Claims reward for an user on behalf, on all the assets of the lending pool, accumulating the pending rewards. The caller must\\n\\t * be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\n\\t * @param amount Amount of rewards to claim\\n\\t * @param user Address to check and claim rewards\\n\\t * @param to Address that will be receiving the rewards\\n\\t * @return Rewards claimed\\n\\t **/\\n\\tfunction claimRewardsOnBehalf(\\n\\t\\taddress[] calldata assets,\\n\\t\\tuint256 amount,\\n\\t\\taddress user,\\n\\t\\taddress to\\n\\t) external returns (uint256);\\n\\n\\t/**\\n\\t * @dev returns the unclaimed rewards of the user\\n\\t * @param user the address of the user\\n\\t * @return the unclaimed user rewards\\n\\t */\\n\\tfunction getUserUnclaimedRewards(address user) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev returns the unclaimed rewards of the user\\n\\t * @param user the address of the user\\n\\t * @param asset The asset to incentivize\\n\\t * @return the user index for the asset\\n\\t */\\n\\tfunction getUserAssetData(address user, address asset) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev for backward compatibility with previous implementation of the Incentives controller\\n\\t */\\n\\tfunction REWARD_TOKEN() external view returns (address);\\n\\n\\t/**\\n\\t * @dev for backward compatibility with previous implementation of the Incentives controller\\n\\t */\\n\\tfunction PRECISION() external view returns (uint8);\\n\\n\\t/**\\n\\t * @dev Gets the distribution end timestamp of the emissions\\n\\t */\\n\\tfunction DISTRIBUTION_END() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x18649f6671a8ce274716b0c212186cae5f9c85e33872aa6a63b287154b982f2a\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IAaveOracle.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\n/**\\n * @title IAaveOracle interface\\n * @notice Interface for the Aave oracle.\\n **/\\n\\ninterface IAaveOracle {\\n\\tfunction BASE_CURRENCY() external view returns (address); // if usd returns 0x0, if eth returns weth address\\n\\n\\tfunction BASE_CURRENCY_UNIT() external view returns (uint256);\\n\\n\\t/***********\\n    @dev returns the asset price in ETH\\n     */\\n\\tfunction getAssetPrice(address asset) external view returns (uint256);\\n\\n\\tfunction getSourceOfAsset(address asset) external view returns (address);\\n}\\n\",\"keccak256\":\"0x829468b50cba8db2f65ec609801fec1847b87ba65f8a6feaa8d71e97acd065c3\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IBountyManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\ninterface IBountyManager {\\n\\tfunction quote(address _param) external returns (uint256 bounty);\\n\\n\\tfunction claim(address _param) external returns (uint256 bounty);\\n\\n\\tfunction minDLPBalance() external view returns (uint256 amt);\\n\\n\\tfunction executeBounty(\\n\\t\\taddress _user,\\n\\t\\tbool _execute,\\n\\t\\tuint256 _actionType\\n\\t) external returns (uint256 bounty, uint256 actionType);\\n}\\n\",\"keccak256\":\"0x374f668f3eb846150cbf079517c0acd8a13d5a8e937f6719b7d745a0788a49fa\",\"license\":\"MIT\"},\"contracts/interfaces/IFeeDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"./LockedBalance.sol\\\";\\n\\ninterface IFeeDistribution {\\n\\tstruct RewardData {\\n\\t\\taddress token;\\n\\t\\tuint256 amount;\\n\\t}\\n\\n\\tfunction addReward(address rewardsToken) external;\\n\\n\\tfunction removeReward(address _rewardToken) external;\\n}\\n\",\"keccak256\":\"0x421b5d02ce20947dda76d10f1398c5c075cae789bd453b61935d9b2609c5ac48\",\"license\":\"MIT\"},\"contracts/interfaces/IInitializableAToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport {ILendingPool} from \\\"./ILendingPool.sol\\\";\\nimport {IAaveIncentivesController} from \\\"./IAaveIncentivesController.sol\\\";\\n\\n/**\\n * @title IInitializableAToken\\n * @notice Interface for the initialize function on AToken\\n * @author Aave\\n **/\\ninterface IInitializableAToken {\\n\\t/**\\n\\t * @dev Emitted when an aToken is initialized\\n\\t * @param underlyingAsset The address of the underlying asset\\n\\t * @param pool The address of the associated lending pool\\n\\t * @param treasury The address of the treasury\\n\\t * @param incentivesController The address of the incentives controller for this aToken\\n\\t * @param aTokenDecimals the decimals of the underlying\\n\\t * @param aTokenName the name of the aToken\\n\\t * @param aTokenSymbol the symbol of the aToken\\n\\t * @param params A set of encoded parameters for additional initialization\\n\\t **/\\n\\tevent Initialized(\\n\\t\\taddress indexed underlyingAsset,\\n\\t\\taddress indexed pool,\\n\\t\\taddress treasury,\\n\\t\\taddress incentivesController,\\n\\t\\tuint8 aTokenDecimals,\\n\\t\\tstring aTokenName,\\n\\t\\tstring aTokenSymbol,\\n\\t\\tbytes params\\n\\t);\\n\\n\\t/**\\n\\t * @dev Initializes the aToken\\n\\t * @param pool The address of the lending pool where this aToken will be used\\n\\t * @param treasury The address of the Aave treasury, receiving the fees on this aToken\\n\\t * @param underlyingAsset The address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n\\t * @param incentivesController The smart contract managing potential incentives distribution\\n\\t * @param aTokenDecimals The decimals of the aToken, same as the underlying asset's\\n\\t * @param aTokenName The name of the aToken\\n\\t * @param aTokenSymbol The symbol of the aToken\\n\\t */\\n\\tfunction initialize(\\n\\t\\tILendingPool pool,\\n\\t\\taddress treasury,\\n\\t\\taddress underlyingAsset,\\n\\t\\tIAaveIncentivesController incentivesController,\\n\\t\\tuint8 aTokenDecimals,\\n\\t\\tstring calldata aTokenName,\\n\\t\\tstring calldata aTokenSymbol,\\n\\t\\tbytes calldata params\\n\\t) external;\\n}\\n\",\"keccak256\":\"0xd73daf8d329d2120da2c50492148c0500e34ede39e9fb0b1cca977b4168541da\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/ILendingPool.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {ILendingPoolAddressesProvider} from \\\"./ILendingPoolAddressesProvider.sol\\\";\\nimport {DataTypes} from \\\"../lending/libraries/types/DataTypes.sol\\\";\\n\\ninterface ILendingPool {\\n\\t/**\\n\\t * @dev Emitted on deposit()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address initiating the deposit\\n\\t * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\\n\\t * @param amount The amount deposited\\n\\t * @param referral The referral code used\\n\\t **/\\n\\tevent Deposit(\\n\\t\\taddress indexed reserve,\\n\\t\\taddress user,\\n\\t\\taddress indexed onBehalfOf,\\n\\t\\tuint256 amount,\\n\\t\\tuint16 indexed referral\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted on withdraw()\\n\\t * @param reserve The address of the underlyng asset being withdrawn\\n\\t * @param user The address initiating the withdrawal, owner of aTokens\\n\\t * @param to Address that will receive the underlying\\n\\t * @param amount The amount to be withdrawn\\n\\t **/\\n\\tevent Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n\\t/**\\n\\t * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n\\t * @param reserve The address of the underlying asset being borrowed\\n\\t * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n\\t * initiator of the transaction on flashLoan()\\n\\t * @param onBehalfOf The address that will be getting the debt\\n\\t * @param amount The amount borrowed out\\n\\t * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\\n\\t * @param borrowRate The numeric rate at which the user has borrowed\\n\\t * @param referral The referral code used\\n\\t **/\\n\\tevent Borrow(\\n\\t\\taddress indexed reserve,\\n\\t\\taddress user,\\n\\t\\taddress indexed onBehalfOf,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 borrowRateMode,\\n\\t\\tuint256 borrowRate,\\n\\t\\tuint16 indexed referral\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted on repay()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The beneficiary of the repayment, getting his debt reduced\\n\\t * @param repayer The address of the user initiating the repay(), providing the funds\\n\\t * @param amount The amount repaid\\n\\t **/\\n\\tevent Repay(address indexed reserve, address indexed user, address indexed repayer, uint256 amount);\\n\\n\\t/**\\n\\t * @dev Emitted on swapBorrowRateMode()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address of the user swapping his rate mode\\n\\t * @param rateMode The rate mode that the user wants to swap to\\n\\t **/\\n\\tevent Swap(address indexed reserve, address indexed user, uint256 rateMode);\\n\\n\\t/**\\n\\t * @dev Emitted on setUserUseReserveAsCollateral()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address of the user enabling the usage as collateral\\n\\t **/\\n\\tevent ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n\\t/**\\n\\t * @dev Emitted on setUserUseReserveAsCollateral()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address of the user enabling the usage as collateral\\n\\t **/\\n\\tevent ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n\\t/**\\n\\t * @dev Emitted on rebalanceStableBorrowRate()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address of the user for which the rebalance has been executed\\n\\t **/\\n\\tevent RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n\\t/**\\n\\t * @dev Emitted on flashLoan()\\n\\t * @param target The address of the flash loan receiver contract\\n\\t * @param initiator The address initiating the flash loan\\n\\t * @param asset The address of the asset being flash borrowed\\n\\t * @param amount The amount flash borrowed\\n\\t * @param premium The fee flash borrowed\\n\\t * @param referralCode The referral code used\\n\\t **/\\n\\tevent FlashLoan(\\n\\t\\taddress indexed target,\\n\\t\\taddress indexed initiator,\\n\\t\\taddress indexed asset,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 premium,\\n\\t\\tuint16 referralCode\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted when the pause is triggered.\\n\\t */\\n\\tevent Paused();\\n\\n\\t/**\\n\\t * @dev Emitted when the pause is lifted.\\n\\t */\\n\\tevent Unpaused();\\n\\n\\t/**\\n\\t * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\\n\\t * LendingPoolCollateral manager using a DELEGATECALL\\n\\t * This allows to have the events in the generated ABI for LendingPool.\\n\\t * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n\\t * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n\\t * @param user The address of the borrower getting liquidated\\n\\t * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n\\t * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\\n\\t * @param liquidator The address of the liquidator\\n\\t * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n\\t * to receive the underlying collateral asset directly\\n\\t **/\\n\\tevent LiquidationCall(\\n\\t\\taddress indexed collateralAsset,\\n\\t\\taddress indexed debtAsset,\\n\\t\\taddress indexed user,\\n\\t\\tuint256 debtToCover,\\n\\t\\tuint256 liquidatedCollateralAmount,\\n\\t\\taddress liquidator,\\n\\t\\tbool receiveAToken\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\\n\\t * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\\n\\t * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\\n\\t * gets added to the LendingPool ABI\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param liquidityRate The new liquidity rate\\n\\t * @param stableBorrowRate The new stable borrow rate\\n\\t * @param variableBorrowRate The new variable borrow rate\\n\\t * @param liquidityIndex The new liquidity index\\n\\t * @param variableBorrowIndex The new variable borrow index\\n\\t **/\\n\\tevent ReserveDataUpdated(\\n\\t\\taddress indexed reserve,\\n\\t\\tuint256 liquidityRate,\\n\\t\\tuint256 stableBorrowRate,\\n\\t\\tuint256 variableBorrowRate,\\n\\t\\tuint256 liquidityIndex,\\n\\t\\tuint256 variableBorrowIndex\\n\\t);\\n\\n\\tfunction initialize(ILendingPoolAddressesProvider provider) external;\\n\\n\\t/**\\n\\t * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n\\t * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\n\\t * @param asset The address of the underlying asset to deposit\\n\\t * @param amount The amount to be deposited\\n\\t * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n\\t *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n\\t *   is a different wallet\\n\\t * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n\\t *   0 if the action is executed directly by the user, without any middle-man\\n\\t **/\\n\\tfunction deposit(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\\n\\n\\tfunction depositWithAutoDLP(\\n\\t\\taddress asset,\\n\\t\\tuint256 amount,\\n\\t\\taddress onBehalfOf,\\n\\t\\tuint16 referralCode\\n\\t) external;\\n\\n\\t/**\\n\\t * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n\\t * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n\\t * @param asset The address of the underlying asset to withdraw\\n\\t * @param amount The underlying amount to be withdrawn\\n\\t *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n\\t * @param to Address that will receive the underlying, same as msg.sender if the user\\n\\t *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n\\t *   different wallet\\n\\t * @return The final amount withdrawn\\n\\t **/\\n\\tfunction withdraw(address asset, uint256 amount, address to) external returns (uint256);\\n\\n\\t/**\\n\\t * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n\\t * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\\n\\t * corresponding debt token (StableDebtToken or VariableDebtToken)\\n\\t * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n\\t *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n\\t * @param asset The address of the underlying asset to borrow\\n\\t * @param amount The amount to be borrowed\\n\\t * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n\\t * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n\\t *   0 if the action is executed directly by the user, without any middle-man\\n\\t * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\\n\\t * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n\\t * if he has been given credit delegation allowance\\n\\t **/\\n\\tfunction borrow(\\n\\t\\taddress asset,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 interestRateMode,\\n\\t\\tuint16 referralCode,\\n\\t\\taddress onBehalfOf\\n\\t) external;\\n\\n\\t/**\\n\\t * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n\\t * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n\\t * @param asset The address of the borrowed underlying asset previously borrowed\\n\\t * @param amount The amount to repay\\n\\t * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n\\t * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n\\t * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n\\t * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n\\t * other borrower whose debt should be removed\\n\\t * @return The final amount repaid\\n\\t **/\\n\\tfunction repay(address asset, uint256 amount, uint256 rateMode, address onBehalfOf) external returns (uint256);\\n\\n\\t/**\\n\\t * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\\n\\t * @param asset The address of the underlying asset borrowed\\n\\t * @param rateMode The rate mode that the user wants to swap to\\n\\t **/\\n\\tfunction swapBorrowRateMode(address asset, uint256 rateMode) external;\\n\\n\\t/**\\n\\t * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n\\t * - Users can be rebalanced if the following conditions are satisfied:\\n\\t *     1. Usage ratio is above 95%\\n\\t *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\\n\\t *        borrowed at a stable rate and depositors are not earning enough\\n\\t * @param asset The address of the underlying asset borrowed\\n\\t * @param user The address of the user to be rebalanced\\n\\t **/\\n\\tfunction rebalanceStableBorrowRate(address asset, address user) external;\\n\\n\\t/**\\n\\t * @dev Allows depositors to enable/disable a specific deposited asset as collateral\\n\\t * @param asset The address of the underlying asset deposited\\n\\t * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\\n\\t **/\\n\\tfunction setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n\\t/**\\n\\t * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n\\t * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n\\t *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n\\t * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n\\t * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n\\t * @param user The address of the borrower getting liquidated\\n\\t * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n\\t * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n\\t * to receive the underlying collateral asset directly\\n\\t **/\\n\\tfunction liquidationCall(\\n\\t\\taddress collateralAsset,\\n\\t\\taddress debtAsset,\\n\\t\\taddress user,\\n\\t\\tuint256 debtToCover,\\n\\t\\tbool receiveAToken\\n\\t) external;\\n\\n\\t/**\\n\\t * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\\n\\t * as long as the amount taken plus a fee is returned.\\n\\t * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\\n\\t * For further details please visit https://developers.aave.com\\n\\t * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\\n\\t * @param assets The addresses of the assets being flash-borrowed\\n\\t * @param amounts The amounts amounts being flash-borrowed\\n\\t * @param modes Types of the debt to open if the flash loan is not returned:\\n\\t *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n\\t *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n\\t *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n\\t * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n\\t * @param params Variadic packed params to pass to the receiver as extra information\\n\\t * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n\\t *   0 if the action is executed directly by the user, without any middle-man\\n\\t **/\\n\\tfunction flashLoan(\\n\\t\\taddress receiverAddress,\\n\\t\\taddress[] calldata assets,\\n\\t\\tuint256[] calldata amounts,\\n\\t\\tuint256[] calldata modes,\\n\\t\\taddress onBehalfOf,\\n\\t\\tbytes calldata params,\\n\\t\\tuint16 referralCode\\n\\t) external;\\n\\n\\t/**\\n\\t * @dev Returns the user account data across all the reserves\\n\\t * @param user The address of the user\\n\\t * @return totalCollateralETH the total collateral in ETH of the user\\n\\t * @return totalDebtETH the total debt in ETH of the user\\n\\t * @return availableBorrowsETH the borrowing power left of the user\\n\\t * @return currentLiquidationThreshold the liquidation threshold of the user\\n\\t * @return ltv the loan to value of the user\\n\\t * @return healthFactor the current health factor of the user\\n\\t **/\\n\\tfunction getUserAccountData(\\n\\t\\taddress user\\n\\t)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256 totalCollateralETH,\\n\\t\\t\\tuint256 totalDebtETH,\\n\\t\\t\\tuint256 availableBorrowsETH,\\n\\t\\t\\tuint256 currentLiquidationThreshold,\\n\\t\\t\\tuint256 ltv,\\n\\t\\t\\tuint256 healthFactor\\n\\t\\t);\\n\\n\\tfunction initReserve(\\n\\t\\taddress reserve,\\n\\t\\taddress aTokenAddress,\\n\\t\\taddress stableDebtAddress,\\n\\t\\taddress variableDebtAddress,\\n\\t\\taddress interestRateStrategyAddress\\n\\t) external;\\n\\n\\tfunction setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress) external;\\n\\n\\tfunction setConfiguration(address reserve, uint256 configuration) external;\\n\\n\\t/**\\n\\t * @dev Returns the configuration of the reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The configuration of the reserve\\n\\t **/\\n\\tfunction getConfiguration(address asset) external view returns (DataTypes.ReserveConfigurationMap memory);\\n\\n\\t/**\\n\\t * @dev Returns the configuration of the user across all the reserves\\n\\t * @param user The user address\\n\\t * @return The configuration of the user\\n\\t **/\\n\\tfunction getUserConfiguration(address user) external view returns (DataTypes.UserConfigurationMap memory);\\n\\n\\t/**\\n\\t * @dev Returns the normalized income normalized income of the reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The reserve's normalized income\\n\\t */\\n\\tfunction getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns the normalized variable debt per unit of asset\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The reserve normalized variable debt\\n\\t */\\n\\tfunction getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns the state and configuration of the reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The state of the reserve\\n\\t **/\\n\\tfunction getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n\\tfunction finalizeTransfer(\\n\\t\\taddress asset,\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 balanceFromAfter,\\n\\t\\tuint256 balanceToBefore\\n\\t) external;\\n\\n\\tfunction getReservesList() external view returns (address[] memory);\\n\\n\\tfunction getAddressesProvider() external view returns (ILendingPoolAddressesProvider);\\n\\n\\tfunction setPause(bool val) external;\\n\\n\\tfunction paused() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd7d7999d232a7a01206cfce2bb140ecb46778decac322d9b12a72976b5b34d5c\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/ILendingPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\n/**\\n * @title LendingPoolAddressesProvider contract\\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\\n * - Owned by the Aave Governance\\n * @author Aave\\n **/\\ninterface ILendingPoolAddressesProvider {\\n\\tevent MarketIdSet(string newMarketId);\\n\\tevent LendingPoolUpdated(address indexed newAddress);\\n\\tevent ConfigurationAdminUpdated(address indexed newAddress);\\n\\tevent EmergencyAdminUpdated(address indexed newAddress);\\n\\tevent LendingPoolConfiguratorUpdated(address indexed newAddress);\\n\\tevent LendingPoolCollateralManagerUpdated(address indexed newAddress);\\n\\tevent PriceOracleUpdated(address indexed newAddress);\\n\\tevent LendingRateOracleUpdated(address indexed newAddress);\\n\\tevent ProxyCreated(bytes32 id, address indexed newAddress);\\n\\tevent AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\\n\\n\\tfunction getMarketId() external view returns (string memory);\\n\\n\\tfunction setMarketId(string calldata marketId) external;\\n\\n\\tfunction setAddress(bytes32 id, address newAddress) external;\\n\\n\\tfunction setAddressAsProxy(bytes32 id, address impl) external;\\n\\n\\tfunction getAddress(bytes32 id) external view returns (address);\\n\\n\\tfunction getLendingPool() external view returns (address);\\n\\n\\tfunction setLendingPoolImpl(address pool) external;\\n\\n\\tfunction getLendingPoolConfigurator() external view returns (address);\\n\\n\\tfunction setLendingPoolConfiguratorImpl(address configurator) external;\\n\\n\\tfunction getLendingPoolCollateralManager() external view returns (address);\\n\\n\\tfunction setLendingPoolCollateralManager(address manager) external;\\n\\n\\tfunction getPoolAdmin() external view returns (address);\\n\\n\\tfunction setPoolAdmin(address admin) external;\\n\\n\\tfunction getEmergencyAdmin() external view returns (address);\\n\\n\\tfunction setEmergencyAdmin(address admin) external;\\n\\n\\tfunction getPriceOracle() external view returns (address);\\n\\n\\tfunction setPriceOracle(address priceOracle) external;\\n\\n\\tfunction getLendingRateOracle() external view returns (address);\\n\\n\\tfunction setLendingRateOracle(address lendingRateOracle) external;\\n\\n\\tfunction getLiquidationFeeTo() external view returns (address);\\n\\n\\tfunction setLiquidationFeeTo(address liquidationFeeTo) external;\\n}\\n\",\"keccak256\":\"0x79e182f661632c6cd8cd15b460c7835f1eda952dd14bc28cf4966f37d4cb2e40\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/ILockZap.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface ILockZap {\\n\\tfunction zap(\\n\\t\\tbool _borrow,\\n\\t\\taddress _asset,\\n\\t\\tuint256 _assetAmt,\\n\\t\\tuint256 _prntAmt,\\n\\t\\tuint256 _lockTypeIndex,\\n\\t\\tuint256 _slippage\\n\\t) external returns (uint256 liquidity);\\n\\n\\tfunction zapOnBehalf(\\n\\t\\tbool _borrow,\\n\\t\\taddress _asset,\\n\\t\\tuint256 _assetAmt,\\n\\t\\tuint256 _prntAmt,\\n\\t\\taddress _onBehalf,\\n\\t\\tuint256 _slippage\\n\\t) external returns (uint256 liquidity);\\n}\\n\",\"keccak256\":\"0x55586f744c6747ae0959b444f31dd695594aa872f44f7ee44b6761f805d4cdf4\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IMintableToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IMintableToken is IERC20 {\\n\\tfunction mint(address _receiver, uint256 _amount) external returns (bool);\\n\\n\\tfunction burn(uint256 _amount) external returns (bool);\\n\\n\\tfunction setMinter(address _minter) external returns (bool);\\n\\n\\tfunction priceProvider() external view returns (address);\\n}\\n\",\"keccak256\":\"0x095eacfa4ddae47eb3053bc93643d78a683b6006009ce949ea8addf76c886aec\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IMultiFeeDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"./LockedBalance.sol\\\";\\nimport \\\"./IFeeDistribution.sol\\\";\\nimport \\\"./IMintableToken.sol\\\";\\n\\ninterface IMultiFeeDistribution is IFeeDistribution {\\n\\tfunction exit(bool claimRewards) external;\\n\\n\\tfunction stake(uint256 amount, address onBehalfOf, uint256 typeIndex) external;\\n\\n\\tfunction prntToken() external view returns (IMintableToken);\\n\\n\\tfunction getPriceProvider() external view returns (address);\\n\\n\\tfunction lockInfo(address user) external view returns (LockedBalance[] memory);\\n\\n\\tfunction autocompoundEnabled(address user) external view returns (bool);\\n\\n\\tfunction defaultLockIndex(address _user) external view returns (uint256);\\n\\n\\tfunction autoRelockDisabled(address user) external view returns (bool);\\n\\n\\tfunction totalBalance(address user) external view returns (uint256);\\n\\n\\tfunction lockedBalance(address user) external view returns (uint256);\\n\\n\\tfunction lockedBalances(\\n\\t\\taddress user\\n\\t) external view returns (uint256, uint256, uint256, uint256, LockedBalance[] memory);\\n\\n\\tfunction getBalances(address _user) external view returns (Balances memory);\\n\\n\\tfunction zapVestingToLp(address _address) external returns (uint256);\\n\\n\\tfunction claimableRewards(address account) external view returns (IFeeDistribution.RewardData[] memory rewards);\\n\\n\\tfunction setDefaultRelockTypeIndex(uint256 _index) external;\\n\\n\\tfunction daoTreasury() external view returns (address);\\n\\n\\tfunction stakingToken() external view returns (address);\\n\\n\\tfunction userSlippage(address) external view returns (uint256);\\n\\n\\tfunction claimFromConverter(address) external;\\n\\n\\tfunction vestTokens(address user, uint256 amount, bool withPenalty) external;\\n}\\n\\ninterface IMFDPlus is IMultiFeeDistribution {\\n\\tfunction getLastClaimTime(address _user) external returns (uint256);\\n\\n\\tfunction claimBounty(address _user, bool _execute) external returns (bool issueBaseBounty);\\n\\n\\tfunction claimCompound(address _user, bool _execute, uint256 _slippage) external returns (uint256 bountyAmt);\\n\\n\\tfunction setAutocompound(bool _newVal) external;\\n\\n\\tfunction getAutocompoundEnabled(address _user) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x6eae75bc31ca20b94f425a2ba2aede758baf09fc2ae38f630a38abf4ff15a72c\",\"license\":\"MIT\"},\"contracts/interfaces/IPriceProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\ninterface IPriceProvider {\\n\\tfunction getTokenPrice() external view returns (uint256);\\n\\n\\tfunction getTokenPriceUsd() external view returns (uint256);\\n\\n\\tfunction getLpTokenPrice() external view returns (uint256);\\n\\n\\tfunction getLpTokenPriceUsd() external view returns (uint256);\\n\\n\\tfunction decimals() external view returns (uint256);\\n\\n\\tfunction update() external;\\n\\n\\tfunction baseAssetChainlinkAdapter() external view returns (address);\\n}\\n\",\"keccak256\":\"0x8f5da67830c8d8dce0eebeb5626c9e1c2ed86132a8ae01e1fc6aa48cb60ae221\",\"license\":\"MIT\"},\"contracts/interfaces/IScaledBalanceToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\ninterface IScaledBalanceToken {\\n\\t/**\\n\\t * @dev Returns the scaled balance of the user. The scaled balance is the sum of all the\\n\\t * updated stored balance divided by the reserve's liquidity index at the moment of the update\\n\\t * @param user The user whose balance is calculated\\n\\t * @return The scaled balance of the user\\n\\t **/\\n\\tfunction scaledBalanceOf(address user) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns the scaled balance of the user and the scaled total supply.\\n\\t * @param user The address of the user\\n\\t * @return The scaled balance of the user\\n\\t * @return The scaled balance and the scaled total supply\\n\\t **/\\n\\tfunction getScaledUserBalanceAndSupply(address user) external view returns (uint256, uint256);\\n\\n\\t/**\\n\\t * @dev Returns the scaled total supply of the variable debt token. Represents sum(debt/index)\\n\\t * @return The scaled total supply\\n\\t **/\\n\\tfunction scaledTotalSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x20a9147e059d362660996b4922825860e759019f4cbbf293d3f4f2ccc7dadc57\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/LockedBalance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\nstruct LockedBalance {\\n\\tuint256 amount;\\n\\tuint256 unlockTime;\\n\\tuint256 multiplier;\\n\\tuint256 duration;\\n}\\n\\nstruct EarnedBalance {\\n\\tuint256 amount;\\n\\tuint256 unlockTime;\\n\\tuint256 penalty;\\n}\\n\\nstruct Reward {\\n\\tuint256 periodFinish;\\n\\tuint256 rewardPerSecond;\\n\\tuint256 lastUpdateTime;\\n\\tuint256 rewardPerTokenStored;\\n\\t// tracks already-added balances to handle accrued interest in aToken rewards\\n\\t// for the stakingToken this value is unused and will always be 0\\n\\tuint256 balance;\\n}\\n\\nstruct Balances {\\n\\tuint256 total; // sum of earnings and lockings; no use when LP and PRNT is different\\n\\tuint256 unlocked; // PRNT token\\n\\tuint256 locked; // LP token or PRNT token\\n\\tuint256 lockedWithMultiplier; // Multiplied locked amount\\n\\tuint256 earned; // PRNT token\\n}\\n\",\"keccak256\":\"0x6dbc04232605f1510a1db1b9c9467bb99cda33ac2335775e5faae2cc7d4eef07\",\"license\":\"MIT\"},\"contracts/lending/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nlibrary DataTypes {\\n\\t// refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\\n\\tstruct ReserveData {\\n\\t\\t//stores the reserve configuration\\n\\t\\tReserveConfigurationMap configuration;\\n\\t\\t//the liquidity index. Expressed in ray\\n\\t\\tuint128 liquidityIndex;\\n\\t\\t//variable borrow index. Expressed in ray\\n\\t\\tuint128 variableBorrowIndex;\\n\\t\\t//the current supply rate. Expressed in ray\\n\\t\\tuint128 currentLiquidityRate;\\n\\t\\t//the current variable borrow rate. Expressed in ray\\n\\t\\tuint128 currentVariableBorrowRate;\\n\\t\\t//the current stable borrow rate. Expressed in ray\\n\\t\\tuint128 currentStableBorrowRate;\\n\\t\\tuint40 lastUpdateTimestamp;\\n\\t\\t//tokens addresses\\n\\t\\taddress aTokenAddress;\\n\\t\\taddress stableDebtTokenAddress;\\n\\t\\taddress variableDebtTokenAddress;\\n\\t\\t//address of the interest rate strategy\\n\\t\\taddress interestRateStrategyAddress;\\n\\t\\t//the id of the reserve. Represents the position in the list of the active reserves\\n\\t\\tuint8 id;\\n\\t}\\n\\n\\tstruct ReserveConfigurationMap {\\n\\t\\t//bit 0-15: LTV\\n\\t\\t//bit 16-31: Liq. threshold\\n\\t\\t//bit 32-47: Liq. bonus\\n\\t\\t//bit 48-55: Decimals\\n\\t\\t//bit 56: Reserve is active\\n\\t\\t//bit 57: reserve is frozen\\n\\t\\t//bit 58: borrowing is enabled\\n\\t\\t//bit 59: stable rate borrowing enabled\\n\\t\\t//bit 60-63: reserved\\n\\t\\t//bit 64-79: reserve factor\\n\\t\\tuint256 data;\\n\\t}\\n\\n\\tstruct UserConfigurationMap {\\n\\t\\tuint256 data;\\n\\t}\\n\\n\\tenum InterestRateMode {\\n\\t\\tNONE,\\n\\t\\tSTABLE,\\n\\t\\tVARIABLE\\n\\t}\\n}\\n\",\"keccak256\":\"0xd0e55d855509f898d810479026993d64b9586e1af35816f1d2498ac27e7bcf69\",\"license\":\"agpl-3.0\"},\"contracts/prime/accessories/Compounder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\nimport {IUniswapV2Router} from \\\"../../uniswap-solc-0.8/interfaces/IUniswapV2Router.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {PausableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\n\\nimport {IAToken} from \\\"../../interfaces/IAToken.sol\\\";\\nimport {IMultiFeeDistribution} from \\\"../../interfaces/IMultiFeeDistribution.sol\\\";\\nimport {ILendingPoolAddressesProvider} from \\\"../../interfaces/ILendingPoolAddressesProvider.sol\\\";\\nimport {IAaveOracle} from \\\"../../interfaces/IAaveOracle.sol\\\";\\nimport {ILendingPool} from \\\"../../interfaces/ILendingPool.sol\\\";\\nimport {ILockZap} from \\\"../../interfaces/ILockZap.sol\\\";\\nimport {IPriceProvider} from \\\"../../interfaces/IPriceProvider.sol\\\";\\nimport {IFeeDistribution} from \\\"../../interfaces/IFeeDistribution.sol\\\";\\nimport {IMintableToken} from \\\"../../interfaces/IMintableToken.sol\\\";\\nimport {IBountyManager} from \\\"../../interfaces/IBountyManager.sol\\\";\\n\\n/// @title Compounder Contract\\n/// @author Prime\\ncontract Compounder is OwnableUpgradeable, PausableUpgradeable {\\n\\tusing SafeERC20 for IERC20;\\n\\n\\t/// @notice Reward data struct\\n\\tstruct RewardData {\\n\\t\\taddress token;\\n\\t\\tuint256 amount;\\n\\t}\\n\\n\\t/********************** Events ***********************/\\n\\n\\t/// @notice Emitted when routes are updated\\n\\tevent RoutesUpdated(address _token, address[] _routes);\\n\\n\\t/// @notice Emitted when bounty manager is updated\\n\\tevent BountyManagerUpdated(address indexed _manager);\\n\\n\\t/// @notice Emitted when compounding fee is updated\\n\\tevent CompoundFeeUpdated(uint256 indexed _compoundFee);\\n\\n\\t/// @notice Emitted when slippage limit is updated\\n\\tevent SlippageLimitUpdated(uint256 indexed _slippageLimit);\\n\\n\\t/********************** Errors ***********************/\\n\\terror AddressZero();\\n\\n\\terror InvalidCompoundFee();\\n\\n\\terror InvalidSlippage();\\n\\n\\terror NotBountyManager();\\n\\n\\terror NotEligible();\\n\\n\\terror InsufficientStakeAmount();\\n\\n\\terror ArrayLengthMismatch();\\n\\n\\terror SwapFailed(address asset, uint256 amount);\\n\\n\\t/// @notice The maximum slippage limit that can be set by admins\\n\\t/// @dev The max slippage should be equal to the max slippage of the LockZap contract, otherwise transactions could revert\\n\\tuint256 public constant MAX_SLIPPAGE_LIMIT = 8500; //15%\\n\\n\\t/// @notice Percent divisor which is equal to 100%\\n\\tuint256 public constant PERCENT_DIVISOR = 10000;\\n\\tuint256 public constant MAX_COMPOUND_FEE = 2000;\\n\\tuint256 public constant MIN_DELAY = 1 days;\\n\\t/// @notice Fee of compounding\\n\\tuint256 public compoundFee;\\n\\n\\t/// @notice Slippage limit for swap\\n\\tuint256 public slippageLimit;\\n\\n\\t/// @notice PRNT token address\\n\\tIMintableToken public prntToken;\\n\\n\\t/// @notice Token that PRNT is paired with in LP\\n\\taddress public baseToken;\\n\\n\\t/// @notice Lending Pool Addresses Provider contract address\\n\\taddress public addressProvider;\\n\\n\\t/// @notice Price provider contract address\\n\\taddress public priceProvider;\\n\\n\\t/// @notice Swap route WETH -> PRNT\\n\\taddress[] public wethToPrime;\\n\\n\\t/// @notice Swap router\\n\\taddress public uniRouter;\\n\\n\\t/// @notice MFD address\\n\\taddress public multiFeeDistribution;\\n\\n\\t/// @notice Lockzap address\\n\\taddress public lockZap;\\n\\n\\t/// @notice BountyManager address\\n\\taddress public bountyManager;\\n\\n\\t/// @notice Timestamp of last auto compounding\\n\\tmapping(address => uint256) public lastAutocompound;\\n\\n\\t/// @notice Swap route from rewardToken to baseToken\\n\\tmapping(address => address[]) public rewardToBaseRoute;\\n\\n\\tconstructor() {\\n\\t\\t_disableInitializers();\\n\\t}\\n\\n\\t/**\\n\\t * @notice Initializer\\n\\t * @param _uniRouter Address of swap router\\n\\t * @param _mfd Address of MFD\\n\\t * @param _baseToken Address of pair asset of PRNT LP\\n\\t * @param _addressProvider Address of LendingPoolAddressesProvider\\n\\t * @param _lockZap Address of LockZap contract\\n\\t * @param _compoundFee Compounding fee\\n\\t * @param _slippageLimit Slippage limit\\n\\t */\\n\\tfunction initialize(\\n\\t\\taddress _uniRouter,\\n\\t\\taddress _mfd,\\n\\t\\taddress _baseToken,\\n\\t\\taddress _addressProvider,\\n\\t\\taddress _lockZap,\\n\\t\\tuint256 _compoundFee,\\n\\t\\tuint256 _slippageLimit\\n\\t) external initializer {\\n\\t\\tif (_uniRouter == address(0)) revert AddressZero();\\n\\t\\tif (_mfd == address(0)) revert AddressZero();\\n\\t\\tif (_baseToken == address(0)) revert AddressZero();\\n\\t\\tif (_addressProvider == address(0)) revert AddressZero();\\n\\t\\tif (_lockZap == address(0)) revert AddressZero();\\n\\t\\tif (_compoundFee == 0) revert InvalidCompoundFee();\\n\\t\\tif (_compoundFee > MAX_COMPOUND_FEE) revert InvalidCompoundFee();\\n\\t\\t_validateSlippageLimit(_slippageLimit);\\n\\n\\t\\tuniRouter = _uniRouter;\\n\\t\\tmultiFeeDistribution = _mfd;\\n\\t\\tbaseToken = _baseToken;\\n\\t\\taddressProvider = _addressProvider;\\n\\t\\tlockZap = _lockZap;\\n\\t\\tprntToken = IMultiFeeDistribution(multiFeeDistribution).prntToken();\\n\\t\\tpriceProvider = IMultiFeeDistribution(multiFeeDistribution).getPriceProvider();\\n\\t\\twethToPrime = [baseToken, address(prntToken)];\\n\\t\\tcompoundFee = _compoundFee;\\n\\t\\tslippageLimit = _slippageLimit;\\n\\t\\t__Ownable_init();\\n\\t\\t__Pausable_init();\\n\\t}\\n\\n\\t/**\\n\\t * @notice Pause contract\\n\\t */\\n\\tfunction pause() external onlyOwner {\\n\\t\\t_pause();\\n\\t}\\n\\n\\t/**\\n\\t * @notice Unpause contract\\n\\t */\\n\\tfunction unpause() external onlyOwner {\\n\\t\\t_unpause();\\n\\t}\\n\\n\\t/**\\n\\t * @notice Set swap routes\\n\\t * @param _token Token for swap\\n\\t * @param _routes Swap route for token\\n\\t */\\n\\tfunction setRoutes(address _token, address[] memory _routes) external onlyOwner {\\n\\t\\trewardToBaseRoute[_token] = _routes;\\n\\t\\temit RoutesUpdated(_token, _routes);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Set bounty manager\\n\\t * @param _manager Bounty manager address\\n\\t */\\n\\tfunction setBountyManager(address _manager) external onlyOwner {\\n\\t\\tif (_manager == address(0)) revert AddressZero();\\n\\t\\tbountyManager = _manager;\\n\\t\\temit BountyManagerUpdated(_manager);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Sets the fee for compounding.\\n\\t * @param _compoundFee fee ratio for compounding\\n\\t */\\n\\tfunction setCompoundFee(uint256 _compoundFee) external onlyOwner {\\n\\t\\tif (_compoundFee == 0) revert InvalidCompoundFee();\\n\\t\\tif (_compoundFee > MAX_COMPOUND_FEE) revert InvalidCompoundFee();\\n\\t\\tcompoundFee = _compoundFee;\\n\\t\\temit CompoundFeeUpdated(_compoundFee);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Sets slippage limit.\\n\\t * @param _slippageLimit new slippage limit\\n\\t */\\n\\tfunction setSlippageLimit(uint256 _slippageLimit) external onlyOwner {\\n\\t\\t_validateSlippageLimit(_slippageLimit);\\n\\t\\tslippageLimit = _slippageLimit;\\n\\t\\temit SlippageLimitUpdated(_slippageLimit);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Claim and swap them into base token.\\n\\t * @param _user User whose rewards are compounded into dLP\\n\\t * @param tokens Tokens to claim and turn into dLP\\n\\t * @param amts Amounts of each token to be claimed and turned into dLP\\n\\t * @return Total base token amount\\n\\t */\\n\\tfunction _claimAndSwapToBase(\\n\\t\\taddress _user,\\n\\t\\taddress[] memory tokens,\\n\\t\\tuint256[] memory amts\\n\\t) internal returns (uint256) {\\n\\t\\tIMultiFeeDistribution mfd = IMultiFeeDistribution(multiFeeDistribution);\\n\\t\\tmfd.claimFromConverter(_user);\\n\\t\\tILendingPool lendingPool = ILendingPool(ILendingPoolAddressesProvider(addressProvider).getLendingPool());\\n\\n\\t\\tuint256 length = tokens.length;\\n\\t\\tfor (uint256 i; i < length; i++) {\\n\\t\\t\\tuint256 balance = amts[i];\\n\\t\\t\\tif (balance == 0) {\\n\\t\\t\\t\\tcontinue;\\n\\t\\t\\t}\\n\\n\\t\\t\\taddress tokenToTrade = tokens[i];\\n\\t\\t\\tuint256 amount;\\n\\t\\t\\ttry lendingPool.withdraw(tokenToTrade, type(uint256).max, address(this)) returns (uint256 withdrawnAmt) {\\n\\t\\t\\t\\tamount = withdrawnAmt;\\n\\t\\t\\t} catch {\\n\\t\\t\\t\\tamount = balance;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (tokenToTrade != baseToken) {\\n\\t\\t\\t\\tIERC20(tokenToTrade).forceApprove(uniRouter, amount);\\n\\t\\t\\t\\ttry\\n\\t\\t\\t\\t\\tIUniswapV2Router(uniRouter).swapExactTokensForTokens(\\n\\t\\t\\t\\t\\t\\tamount,\\n\\t\\t\\t\\t\\t\\t0,\\n\\t\\t\\t\\t\\t\\trewardToBaseRoute[tokenToTrade],\\n\\t\\t\\t\\t\\t\\taddress(this),\\n\\t\\t\\t\\t\\t\\tblock.timestamp\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t{} catch {\\n\\t\\t\\t\\t\\trevert SwapFailed(tokenToTrade, amount);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn IERC20(baseToken).balanceOf(address(this));\\n\\t}\\n\\n\\t/**\\n\\t * @notice Converts base token to lp token and stake them.\\n\\t * @param _user User for this action\\n\\t * @param _slippage maximum tolerated slippage for any occurring swaps\\n\\t * @return liquidity LP token amount\\n\\t */\\n\\tfunction _convertBaseToLPandStake(address _user, uint256 _slippage) internal returns (uint256 liquidity) {\\n\\t\\tuint256 baseBal = IERC20(baseToken).balanceOf(address(this));\\n\\t\\tif (baseBal != 0) {\\n\\t\\t\\tIERC20(baseToken).forceApprove(lockZap, baseBal);\\n\\t\\t\\tliquidity = ILockZap(lockZap).zapOnBehalf(false, address(0), baseBal, 0, _user, _slippage);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Compound user's rewards\\n\\t * @dev Can be auto compound or manual compound\\n\\t * @param _user user address\\n\\t * @param _execute whether to execute txn, or just quote (expected amount out for bounty executor)\\n\\t * @param _slippage that shouldn't be exceeded when performing swaps\\n\\t * @return fee amount\\n\\t */\\n\\tfunction claimCompound(address _user, bool _execute, uint256 _slippage) public returns (uint256 fee) {\\n\\t\\tif (paused()) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\t\\tuint256 slippageLimit_ = slippageLimit;\\n\\n\\t\\tbool isAutoCompound = _user != msg.sender;\\n\\n\\t\\t(address[] memory tokens, uint256[] memory amts) = viewPendingRewards(_user);\\n\\t\\tuint256 noSlippagePendingEth = _quoteSwapWithOracles(tokens, amts, baseToken);\\n\\n\\t\\tif (isAutoCompound) {\\n\\t\\t\\t_slippage = IMultiFeeDistribution(multiFeeDistribution).userSlippage(_user);\\n\\t\\t}\\n\\t\\tif (_slippage == 0) {\\n\\t\\t\\t_slippage = slippageLimit_;\\n\\t\\t}\\n\\t\\tif (_slippage < slippageLimit_ || _slippage >= PERCENT_DIVISOR) revert InvalidSlippage();\\n\\n\\t\\tif (isAutoCompound) {\\n\\t\\t\\tif (msg.sender != bountyManager) revert NotBountyManager();\\n\\t\\t\\tbool eligible = isEligibleForAutoCompound(_user, noSlippagePendingEth);\\n\\t\\t\\tif (!eligible) {\\n\\t\\t\\t\\tif (_execute) {\\n\\t\\t\\t\\t\\trevert NotEligible();\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\treturn (0);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tif (!isEligibleForCompound(noSlippagePendingEth)) revert InsufficientStakeAmount();\\n\\t\\t}\\n\\n\\t\\tif (!_execute) {\\n\\t\\t\\tif (isAutoCompound) {\\n\\t\\t\\t\\tuint256 pendingInPrnt = _wethToPrnt(noSlippagePendingEth, _execute, _slippage);\\n\\t\\t\\t\\tfee = (pendingInPrnt * compoundFee) / PERCENT_DIVISOR;\\n\\t\\t\\t\\treturn fee;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\treturn 0;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tuint256 actualWethAfterSwap = _claimAndSwapToBase(_user, tokens, amts);\\n\\t\\tif ((PERCENT_DIVISOR * actualWethAfterSwap) / noSlippagePendingEth < _slippage) revert InvalidSlippage();\\n\\n\\t\\tif (isAutoCompound) {\\n\\t\\t\\tfee = _wethToPrnt(((actualWethAfterSwap * compoundFee) / PERCENT_DIVISOR), _execute, _slippage);\\n\\t\\t}\\n\\n\\t\\t_convertBaseToLPandStake(_user, _slippage);\\n\\n\\t\\tif (isAutoCompound) {\\n\\t\\t\\tprntToken.approve(bountyManager, fee);\\n\\t\\t\\tlastAutocompound[_user] = block.timestamp;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Compound `msg.sender`'s rewards.\\n\\t * @param _slippage that shouldn't be exceeded when performing swaps\\n\\t */\\n\\tfunction selfCompound(uint256 _slippage) external {\\n\\t\\tclaimCompound(msg.sender, true, _slippage);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns the pending rewards of the `_user`\\n\\t * @param _user owner of rewards\\n\\t * @return tokens array of reward token addresses\\n\\t * @return amts array of reward amounts\\n\\t */\\n\\tfunction viewPendingRewards(address _user) public view returns (address[] memory tokens, uint256[] memory amts) {\\n\\t\\tIFeeDistribution.RewardData[] memory pending = IMultiFeeDistribution(multiFeeDistribution).claimableRewards(\\n\\t\\t\\t_user\\n\\t\\t);\\n\\t\\ttokens = new address[](pending.length - 1);\\n\\t\\tamts = new uint256[](pending.length - 1);\\n\\t\\tuint256 index;\\n\\t\\tuint256 length = pending.length;\\n\\t\\tfor (uint256 i; i < length;) {\\n\\t\\t\\tif (pending[i].token != address(prntToken)) {\\n\\t\\t\\t\\ttry IAToken(pending[i].token).UNDERLYING_ASSET_ADDRESS() returns (address underlyingAddress) {\\n\\t\\t\\t\\t\\ttokens[index] = underlyingAddress;\\n\\t\\t\\t\\t} catch {\\n\\t\\t\\t\\t\\ttokens[index] = pending[i].token;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tamts[index] = pending[i].amount;\\n\\t\\t\\t\\tunchecked {\\n\\t\\t\\t\\t\\tindex++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Estimate the out tokens amount.\\n\\t * @param _in token address\\n\\t * @param _out token address\\n\\t * @param _amtIn amount of input token\\n\\t * @return tokensOut amount of output\\n\\t */\\n\\tfunction _estimateTokensOut(address _in, address _out, uint256 _amtIn) internal view returns (uint256 tokensOut) {\\n\\t\\tIAaveOracle oracle = IAaveOracle(ILendingPoolAddressesProvider(addressProvider).getPriceOracle());\\n\\t\\tuint256 priceInAsset = oracle.getAssetPrice(_in); //USDC: 100000000\\n\\t\\tuint256 priceOutAsset = oracle.getAssetPrice(_out); //WETH: 153359950000\\n\\t\\tuint256 decimalsIn = IERC20Metadata(_in).decimals();\\n\\t\\tuint256 decimalsOut = IERC20Metadata(_out).decimals();\\n\\t\\ttokensOut = (_amtIn * priceInAsset * (10 ** decimalsOut)) / (priceOutAsset * (10 ** decimalsIn));\\n\\t}\\n\\n\\t/**\\n\\t * @notice Estimate the out tokens amount.\\n\\t * @param _in array of input token address\\n\\t * @param _amtsIn amount of input tokens\\n\\t * @return amtOut Sum of outputs\\n\\t */\\n\\tfunction _quoteSwapWithOracles(\\n\\t\\taddress[] memory _in,\\n\\t\\tuint256[] memory _amtsIn,\\n\\t\\taddress _out\\n\\t) internal view returns (uint256 amtOut) {\\n\\t\\tif (_in.length != _amtsIn.length) revert ArrayLengthMismatch();\\n\\t\\tuint256 length = _in.length;\\n\\t\\tfor (uint256 i; i < length;) {\\n\\t\\t\\tamtOut += _estimateTokensOut(_in[i], _out, _amtsIn[i]);\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Swap WETH to PRNT.\\n\\t * @param _wethIn WETH input amount\\n\\t * @param _execute Option to excute this action or not\\n\\t * @param _slippageLimit User defined slippage limit\\n\\t * @return prntOut Output PRNT amount\\n\\t */\\n\\tfunction _wethToPrnt(uint256 _wethIn, bool _execute, uint256 _slippageLimit) internal returns (uint256 prntOut) {\\n\\t\\tif (_execute) {\\n\\t\\t\\tIPriceProvider(priceProvider).update();\\n\\t\\t}\\n\\t\\tuint256 prntPrice = IPriceProvider(priceProvider).getTokenPrice();\\n\\t\\tif (_wethIn != 0) {\\n\\t\\t\\tif (_execute) {\\n\\t\\t\\t\\tIERC20(baseToken).forceApprove(uniRouter, _wethIn);\\n\\t\\t\\t\\tuint256[] memory amounts = IUniswapV2Router(uniRouter).swapExactTokensForTokens(\\n\\t\\t\\t\\t\\t_wethIn,\\n\\t\\t\\t\\t\\t0,\\n\\t\\t\\t\\t\\twethToPrime,\\n\\t\\t\\t\\t\\taddress(this),\\n\\t\\t\\t\\t\\tblock.timestamp\\n\\t\\t\\t\\t);\\n\\t\\t\\t\\tprntOut = amounts[amounts.length - 1];\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tuint256[] memory amounts = IUniswapV2Router(uniRouter).getAmountsOut(\\n\\t\\t\\t\\t\\t_wethIn, //amt in\\n\\t\\t\\t\\t\\twethToPrime\\n\\t\\t\\t\\t);\\n\\t\\t\\t\\tprntOut = amounts[amounts.length - 1];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tuint256 ethValueOfPRNT = prntPrice * prntOut;\\n\\t\\tif (ethValueOfPRNT / 10 ** 8 < (_wethIn * _slippageLimit) / PERCENT_DIVISOR) revert InvalidSlippage();\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns minimum stake amount in ETH\\n\\t * @return minStakeAmtEth Minimum stake amount in ETH\\n\\t */\\n\\tfunction autocompoundThreshold() public view returns (uint256 minStakeAmtEth) {\\n\\t\\tIPriceProvider priceProv = IPriceProvider(priceProvider);\\n\\n\\t\\tuint256 minStakeLpAmt = IBountyManager(bountyManager).minDLPBalance();\\n\\t\\tuint256 lpPriceEth = priceProv.getLpTokenPrice();\\n\\n\\t\\tminStakeAmtEth = (minStakeLpAmt * lpPriceEth) / (10 ** priceProv.decimals());\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns if user is eligbile for auto compounding\\n\\t * @param _user address\\n\\t * @param _pending amount\\n\\t * @return True or False\\n\\t */\\n\\tfunction isEligibleForAutoCompound(address _user, uint256 _pending) public view returns (bool) {\\n\\t\\tbool delayComplete = true;\\n\\t\\tif (lastAutocompound[_user] != 0) {\\n\\t\\t\\tdelayComplete = (block.timestamp - lastAutocompound[_user]) >= MIN_DELAY;\\n\\t\\t}\\n\\t\\treturn\\n\\t\\t\\tIMultiFeeDistribution(multiFeeDistribution).autocompoundEnabled(_user) &&\\n\\t\\t\\tisEligibleForCompound(_pending) &&\\n\\t\\t\\tdelayComplete;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns if pending amount is elgible for auto compounding\\n\\t * @param _pending amount\\n\\t * @return eligible True or False\\n\\t */\\n\\tfunction isEligibleForCompound(uint256 _pending) public view returns (bool eligible) {\\n\\t\\teligible = _pending >= autocompoundThreshold();\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns if the user is eligible for auto compound\\n\\t * @param _user address\\n\\t * @return eligible `true` or `false`\\n\\t */\\n\\tfunction userEligibleForCompound(address _user) external view returns (bool eligible) {\\n\\t\\teligible = _userEligibleForCompound(_user);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns if the `msg.sender` is eligible for self compound\\n\\t * @return eligible `true` or `false`\\n\\t */\\n\\tfunction selfEligibleCompound() external view returns (bool eligible) {\\n\\t\\teligible = _userEligibleForCompound(msg.sender);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns if the user is eligible for auto compound\\n\\t * @param _user address the be checked\\n\\t * @return eligible `true` if eligible or `false` if not\\n\\t */\\n\\tfunction _userEligibleForCompound(address _user) internal view returns (bool eligible) {\\n\\t\\t(address[] memory tokens, uint256[] memory amts) = viewPendingRewards(_user);\\n\\t\\tuint256 pendingEth = _quoteSwapWithOracles(tokens, amts, baseToken);\\n\\t\\teligible = pendingEth >= autocompoundThreshold();\\n\\t}\\n\\n\\t/**\\n\\t * @notice Validate if the slippage limit is within the boundaries\\n\\t * @param _slippageLimit slippage limit to be validated\\n\\t */\\n\\tfunction _validateSlippageLimit(uint256 _slippageLimit) internal pure {\\n\\t\\tif (_slippageLimit < MAX_SLIPPAGE_LIMIT || _slippageLimit >= PERCENT_DIVISOR) revert InvalidSlippage();\\n\\t}\\n}\\n\",\"keccak256\":\"0x5622914b722b93f05b43ee90a9830f6eee93828d6864485c5a47c69e693583af\",\"license\":\"MIT\"},\"contracts/uniswap-solc-0.8/interfaces/IUniswapV2Router.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"./IUniswapV2Router01.sol\\\";\\n\\ninterface IUniswapV2Router is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x7891c7cb47db84da3c58182c8d274fe18eef0e131044608f332e26008337d71e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/uniswap-solc-0.8/interfaces/IUniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.12;\\n\\n//solhint-disable func-name-mixedcase\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external view returns (address);\\n\\n    function WETH() external view returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(\\n        uint256 amountIn,\\n        address[] calldata path\\n    ) external view returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(\\n        uint256 amountOut,\\n        address[] calldata path\\n    ) external view returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0x585cf457b6e8cdba9d212899d36d7ed0fe90cf98310fd8bff067008aca994ba8\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000022565b620000e3565b600054610100900460ff16156200008f5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811614620000e1576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b612fab80620000f36000396000f3fe608060405234801561001057600080fd5b506004361061025c5760003560e01c80635c975abb11610145578063a3551c22116100bd578063c55dae631161008c578063e08094c811610071578063e08094c8146104b0578063f2fde38b146104c3578063ff66a305146104d657600080fd5b8063c55dae631461048a578063d3cb96fa1461049d57600080fd5b8063a3551c221461043e578063b33f952714610451578063b36b9ffd14610464578063b888879e1461047757600080fd5b8063891c4e19116101145780638da5cb5b116100f95780638da5cb5b146104105780639f81aed714610421578063a0e47bf61461042b57600080fd5b8063891c4e19146103f45780638ad029f11461040757600080fd5b80635c975abb146103d157806365ee91a7146103dc578063715018a6146103e45780638456cb59146103ec57600080fd5b80633299fcc7116101d85780634451a2a2116101a7578063542b3cb81161018c578063542b3cb8146103a257806356dac67b146103b55780635b07871a146103c857600080fd5b80634451a2a2146103765780634870dd9a1461039957600080fd5b80633299fcc7146103275780633c2d8312146103485780633d7175441461035b5780633f4ba83a1461036e57600080fd5b806327ec50661161022f5780632bf0edee116102145780632bf0edee146103035780633092a6651461030c5780633239d4381461031f57600080fd5b806327ec5066146102dd5780632954018c146102f057600080fd5b806306346c30146102615780630a6c3bb21461029157806317053a7e146102a85780631fe4ba17146102c8575b600080fd5b60a054610274906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61029a60975481565b604051908152602001610288565b61029a6102b63660046127d7565b60a26020526000908152604090205481565b6102db6102d63660046127f4565b6104e9565b005b6102db6102eb3660046127f4565b61052d565b609b54610274906001600160a01b031681565b61029a61213481565b61027461031a3660046127f4565b6105a9565b61029a6105d3565b61033a6103353660046127d7565b610756565b604051610288929190612851565b61029a6103563660046128b6565b610a34565b6102db61036936600461298b565b610db7565b6102db610e26565b6103896103843660046127f4565b610e38565b6040519015158152602001610288565b61029a61271081565b609f54610274906001600160a01b031681565b6103896103c33660046127d7565b610e4b565b61029a60985481565b60655460ff16610389565b610389610e5c565b6102db610e6c565b6102db610e7e565b6102db6104023660046127f4565b610e8e565b61029a6107d081565b6033546001600160a01b0316610274565b61029a6201518081565b609e54610274906001600160a01b031681565b609954610274906001600160a01b031681565b6102db61045f366004612a3f565b610e9e565b60a154610274906001600160a01b031681565b609c54610274906001600160a01b031681565b609a54610274906001600160a01b031681565b6102746104ab366004612ac2565b61129c565b6103896104be366004612ac2565b6112d4565b6102db6104d13660046127d7565b6113ca565b6102db6104e43660046127d7565b61145a565b6104f16114d3565b6104fa8161152d565b609881905560405181907fcf7f7495105ceec35e1d46b5a1330650da881193032a0a846d4c4d2e8d29930490600090a250565b6105356114d3565b8061055357604051631c1bac8960e11b815260040160405180910390fd5b6107d081111561057657604051631c1bac8960e11b815260040160405180910390fd5b609781905560405181907fa6d9a48d7e4e52ec0546321cd0b69b8bb699a75701b9bca931fadba0fece2d7e90600090a250565b609d81815481106105b957600080fd5b6000918252602090912001546001600160a01b0316905081565b609c5460a154604080517fd9cdd51300000000000000000000000000000000000000000000000000000000815290516000936001600160a01b0390811693859391169163d9cdd513916004808201926020929091908290030181865afa158015610641573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106659190612aee565b90506000826001600160a01b0316636f5cdb6c6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106cb9190612aee565b9050826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561070b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072f9190612aee565b61073a90600a612c01565b6107448284612c0d565b61074e9190612c2c565b935050505090565b609f546040517fdc01f60d0000000000000000000000000000000000000000000000000000000081526001600160a01b03838116600483015260609283926000929091169063dc01f60d90602401600060405180830381865afa1580156107c1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107e99190810190612c4e565b9050600181516107f99190612d02565b67ffffffffffffffff811115610811576108116128f7565b60405190808252806020026020018201604052801561083a578160200160208202803683370190505b5092506001815161084b9190612d02565b67ffffffffffffffff811115610863576108636128f7565b60405190808252806020026020018201604052801561088c578160200160208202803683370190505b508151909250600090815b81811015610a2b5760995484516001600160a01b03909116908590839081106108c2576108c2612d19565b6020026020010151600001516001600160a01b031614610a23578381815181106108ee576108ee612d19565b6020026020010151600001516001600160a01b031663b16a19de6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610953575060408051601f3d908101601f1916820190925261095091810190612d2f565b60015b6109ac5783818151811061096957610969612d19565b60200260200101516000015186848151811061098757610987612d19565b60200260200101906001600160a01b031690816001600160a01b0316815250506109e1565b808785815181106109bf576109bf612d19565b60200260200101906001600160a01b031690816001600160a01b031681525050505b8381815181106109f3576109f3612d19565b602002602001015160200151858481518110610a1157610a11612d19565b60209081029190910101526001909201915b600101610897565b50505050915091565b6000610a4260655460ff1690565b15610a4f57506000610db0565b6098546001600160a01b038516331415600080610a6b88610756565b609a549193509150600090610a8c90849084906001600160a01b031661155d565b90508315610b1e57609f546040517f525abb2b0000000000000000000000000000000000000000000000000000000081526001600160a01b038b811660048301529091169063525abb2b90602401602060405180830381865afa158015610af7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1b9190612aee565b96505b86610b27578496505b84871080610b3757506127108710155b15610b555760405163334ee9a160e01b815260040160405180910390fd5b8315610bff5760a1546001600160a01b03163314610b9f576040517f1745275900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610bab8a836112d4565b905080610bf9578815610bea576040517ff8eb54de00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60009650505050505050610db0565b50610c3e565b610c0881610e38565b610c3e576040517fa8ded35f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b87610c8e578315610c80576000610c56828a8a611601565b905061271060975482610c699190612c0d565b610c739190612c2c565b9650505050505050610db0565b600095505050505050610db0565b6000610c9b8a85856118e7565b90508782610cab83612710612c0d565b610cb59190612c2c565b1015610cd45760405163334ee9a160e01b815260040160405180910390fd5b8415610d0257610cff61271060975483610cee9190612c0d565b610cf89190612c2c565b8a8a611601565b96505b610d0c8a89611c64565b508415610da95760995460a15460405163095ea7b360e01b81526001600160a01b039182166004820152602481018a905291169063095ea7b3906044016020604051808303816000875af1158015610d68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8c9190612d4c565b506001600160a01b038a16600090815260a2602052604090204290555b5050505050505b9392505050565b610dbf6114d3565b6001600160a01b038216600090815260a3602090815260409091208251610de892840190612748565b507fbdcf5c7cd2942fc5ccabe6763e7068cae07e81eab2274cbf60f941357fc726c08282604051610e1a929190612d69565b60405180910390a15050565b610e2e6114d3565b610e36611dad565b565b6000610e426105d3565b90911015919050565b6000610e5682611dff565b92915050565b6000610e6733611dff565b905090565b610e746114d3565b610e366000611e42565b610e866114d3565b610e36611e94565b610e9a33600183610a34565b5050565b600054610100900460ff1615808015610ebe5750600054600160ff909116105b80610ed85750303b158015610ed8575060005460ff166001145b610f4f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b6000805460ff191660011790558015610f72576000805461ff0019166101001790555b6001600160a01b038816610f9957604051639fabe1c160e01b815260040160405180910390fd5b6001600160a01b038716610fc057604051639fabe1c160e01b815260040160405180910390fd5b6001600160a01b038616610fe757604051639fabe1c160e01b815260040160405180910390fd5b6001600160a01b03851661100e57604051639fabe1c160e01b815260040160405180910390fd5b6001600160a01b03841661103557604051639fabe1c160e01b815260040160405180910390fd5b8261105357604051631c1bac8960e11b815260040160405180910390fd5b6107d083111561107657604051631c1bac8960e11b815260040160405180910390fd5b61107f8261152d565b609e80546001600160a01b03808b166001600160a01b031992831617909255609f80548a84169083168117909155609a80548a8516908416179055609b805489851690841617905560a0805493881693909216929092179055604080517fa3551c22000000000000000000000000000000000000000000000000000000008152905163a3551c22916004818101926020929091908290030181865afa15801561112c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111509190612d2f565b609980546001600160a01b0319166001600160a01b03928316179055609f54604080517f0a065fb600000000000000000000000000000000000000000000000000000000815290519190921691630a065fb69160048083019260209291908290030181865afa1580156111c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111eb9190612d2f565b609c80546001600160a01b0319166001600160a01b0392831617905560408051808201909152609a5482168152609954909116602082015261123190609d906002612748565b5060978390556098829055611244611ed1565b61124c611f44565b8015611292576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b60a360205281600052604060002081815481106112b857600080fd5b6000918252602090912001546001600160a01b03169150829050565b6001600160a01b038216600090815260a2602052604081205460019015611322576001600160a01b038416600090815260a26020526040902054620151809061131d9042612d02565b101590505b609f546040517fada71bc20000000000000000000000000000000000000000000000000000000081526001600160a01b0386811660048301529091169063ada71bc290602401602060405180830381865afa158015611385573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a99190612d4c565b80156113b957506113b983610e38565b80156113c25750805b949350505050565b6113d26114d3565b6001600160a01b03811661144e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610f46565b61145781611e42565b50565b6114626114d3565b6001600160a01b03811661148957604051639fabe1c160e01b815260040160405180910390fd5b60a180546001600160a01b0319166001600160a01b0383169081179091556040517f399c0ee7188568b38d4bbb76666ae7a03da799c64e2a69ece47a0543021fa8d390600090a250565b6033546001600160a01b03163314610e365760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610f46565b61213481108061153f57506127108110155b156114575760405163334ee9a160e01b815260040160405180910390fd5b6000825184511461159a576040517fa24a13a600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b835160005b818110156115f8576115e48682815181106115bc576115bc612d19565b6020026020010151858784815181106115d7576115d7612d19565b6020026020010151611fb7565b6115ee9084612d8b565b925060010161159f565b50509392505050565b6000821561167257609c60009054906101000a90046001600160a01b03166001600160a01b031663a2e620456040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561165957600080fd5b505af115801561166d573d6000803e3d6000fd5b505050505b609c54604080517f4b94f50e00000000000000000000000000000000000000000000000000000000815290516000926001600160a01b031691634b94f50e9160048083019260209291908290030181865afa1580156116d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116f99190612aee565b905084156118955783156117d657609e54609a54611724916001600160a01b03918216911687612230565b609e546040516338ed173960e01b81526000916001600160a01b0316906338ed17399061175e9089908590609d9030904290600401612de1565b6000604051808303816000875af115801561177d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526117a59190810190612e1d565b905080600182516117b69190612d02565b815181106117c6576117c6612d19565b6020026020010151925050611895565b609e546040517fd06ca61f0000000000000000000000000000000000000000000000000000000081526000916001600160a01b03169063d06ca61f90611823908990609d90600401612ea3565b600060405180830381865afa158015611840573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526118689190810190612e1d565b905080600182516118799190612d02565b8151811061188957611889612d19565b60200260200101519250505b60006118a18383612c0d565b90506127106118b08588612c0d565b6118ba9190612c2c565b6118c86305f5e10083612c2c565b10156115f85760405163334ee9a160e01b815260040160405180910390fd5b609f546040517fb2d6e66d0000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301526000921690819063b2d6e66d90602401600060405180830381600087803b15801561194a57600080fd5b505af115801561195e573d6000803e3d6000fd5b505050506000609b60009054906101000a90046001600160a01b03166001600160a01b0316630261bf8b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156119b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119db9190612d2f565b855190915060005b81811015611bec5760008682815181106119ff576119ff612d19565b602002602001015190508060001415611a185750611bda565b6000888381518110611a2c57611a2c612d19565b60209081029190910101516040517f69328dec0000000000000000000000000000000000000000000000000000000081526001600160a01b03808316600483015260001960248301523060448301529192506000918716906369328dec906064016020604051808303816000875af1925050508015611ac8575060408051601f3d908101601f19168201909252611ac591810190612aee565b60015b611ad3575081611ad6565b90505b609a546001600160a01b03838116911614611bd657609e54611b05906001600160a01b03848116911683612230565b609e546001600160a01b03838116600090815260a3602052604080822090516338ed173960e01b815292909316926338ed173992611b4d928692909130904290600401612de1565b6000604051808303816000875af1925050508015611b8d57506040513d6000823e601f3d908101601f19168201604052611b8a9190810190612e1d565b60015b611bd4576040517ec9330a0000000000000000000000000000000000000000000000000000000081526001600160a01b038316600482015260248101829052604401610f46565b505b5050505b80611be481612ebc565b9150506119e3565b50609a546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015611c35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c599190612aee565b979650505050505050565b609a546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a0823190602401602060405180830381865afa158015611cb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd59190612aee565b90508015611da65760a054609a54611cfa916001600160a01b03918216911683612230565b60a0546040517f9506f05f000000000000000000000000000000000000000000000000000000008152600060048201819052602482018190526044820184905260648201526001600160a01b03868116608483015260a4820186905290911690639506f05f9060c4016020604051808303816000875af1158015611d82573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c29190612aee565b5092915050565b611db5612314565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6000806000611e0d84610756565b609a549193509150600090611e2e90849084906001600160a01b031661155d565b9050611e386105d3565b1115949350505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b611e9c612366565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611de23390565b600054610100900460ff16611f3c5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610f46565b610e366123b9565b600054610100900460ff16611faf5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610f46565b610e3661242d565b600080609b60009054906101000a90046001600160a01b03166001600160a01b031663fca513a86040518163ffffffff1660e01b8152600401602060405180830381865afa15801561200d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120319190612d2f565b60405163b3596f0760e01b81526001600160a01b03878116600483015291925060009183169063b3596f0790602401602060405180830381865afa15801561207d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120a19190612aee565b60405163b3596f0760e01b81526001600160a01b03878116600483015291925060009184169063b3596f0790602401602060405180830381865afa1580156120ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121119190612aee565b90506000876001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612153573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121779190612ed7565b60ff1690506000876001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156121bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121e09190612ed7565b60ff1690506121f082600a612c01565b6121fa9084612c0d565b61220582600a612c01565b61220f868a612c0d565b6122199190612c0d565b6122239190612c2c565b9998505050505050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663095ea7b360e01b17905261229684826124a4565b61230e57604080516001600160a01b038516602482015260006044808301919091528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663095ea7b360e01b17905261230490859061254b565b61230e848261254b565b50505050565b60655460ff16610e365760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610f46565b60655460ff1615610e365760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610f46565b600054610100900460ff166124245760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610f46565b610e3633611e42565b600054610100900460ff166124985760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610f46565b6065805460ff19169055565b6000806000846001600160a01b0316846040516124c19190612f26565b6000604051808303816000865af19150503d80600081146124fe576040519150601f19603f3d011682016040523d82523d6000602084013e612503565b606091505b509150915081801561252d57508051158061252d57508080602001905181019061252d9190612d4c565b801561254257506001600160a01b0385163b15155b95945050505050565b60006125a0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166126389092919063ffffffff16565b90508051600014806125c15750808060200190518101906125c19190612d4c565b6126335760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610f46565b505050565b60606113c2848460008585600080866001600160a01b0316858760405161265f9190612f26565b60006040518083038185875af1925050503d806000811461269c576040519150601f19603f3d011682016040523d82523d6000602084013e6126a1565b606091505b5091509150611c598783838760608315612719578251612712576001600160a01b0385163b6127125760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610f46565b50816113c2565b6113c2838381511561272e5781518083602001fd5b8060405162461bcd60e51b8152600401610f469190612f42565b82805482825590600052602060002090810192821561279d579160200282015b8281111561279d57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190612768565b506127a99291506127ad565b5090565b5b808211156127a957600081556001016127ae565b6001600160a01b038116811461145757600080fd5b6000602082840312156127e957600080fd5b8135610db0816127c2565b60006020828403121561280657600080fd5b5035919050565b600081518084526020808501945080840160005b838110156128465781516001600160a01b031687529582019590820190600101612821565b509495945050505050565b604081526000612864604083018561280d565b82810360208481019190915284518083528582019282019060005b8181101561289b5784518352938301939183019160010161287f565b5090979650505050505050565b801515811461145757600080fd5b6000806000606084860312156128cb57600080fd5b83356128d6816127c2565b925060208401356128e6816128a8565b929592945050506040919091013590565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715612930576129306128f7565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561295f5761295f6128f7565b604052919050565b600067ffffffffffffffff821115612981576129816128f7565b5060051b60200190565b6000806040838503121561299e57600080fd5b82356129a9816127c2565b915060208381013567ffffffffffffffff8111156129c657600080fd5b8401601f810186136129d757600080fd5b80356129ea6129e582612967565b612936565b81815260059190911b82018301908381019088831115612a0957600080fd5b928401925b82841015612a30578335612a21816127c2565b82529284019290840190612a0e565b80955050505050509250929050565b600080600080600080600060e0888a031215612a5a57600080fd5b8735612a65816127c2565b96506020880135612a75816127c2565b95506040880135612a85816127c2565b94506060880135612a95816127c2565b93506080880135612aa5816127c2565b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215612ad557600080fd5b8235612ae0816127c2565b946020939093013593505050565b600060208284031215612b0057600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600181815b80851115612b58578160001904821115612b3e57612b3e612b07565b80851615612b4b57918102915b93841c9390800290612b22565b509250929050565b600082612b6f57506001610e56565b81612b7c57506000610e56565b8160018114612b925760028114612b9c57612bb8565b6001915050610e56565b60ff841115612bad57612bad612b07565b50506001821b610e56565b5060208310610133831016604e8410600b8410161715612bdb575081810a610e56565b612be58383612b1d565b8060001904821115612bf957612bf9612b07565b029392505050565b6000610db08383612b60565b6000816000190483118215151615612c2757612c27612b07565b500290565b600082612c4957634e487b7160e01b600052601260045260246000fd5b500490565b60006020808385031215612c6157600080fd5b825167ffffffffffffffff811115612c7857600080fd5b8301601f81018513612c8957600080fd5b8051612c976129e582612967565b81815260069190911b82018301908381019087831115612cb657600080fd5b928401925b82841015611c595760408489031215612cd45760008081fd5b612cdc61290d565b8451612ce7816127c2565b81528486015186820152825260409093019290840190612cbb565b600082821015612d1457612d14612b07565b500390565b634e487b7160e01b600052603260045260246000fd5b600060208284031215612d4157600080fd5b8151610db0816127c2565b600060208284031215612d5e57600080fd5b8151610db0816128a8565b6001600160a01b03831681526040602082015260006113c2604083018461280d565b60008219821115612d9e57612d9e612b07565b500190565b6000815480845260208085019450836000528060002060005b838110156128465781546001600160a01b031687529582019560019182019101612dbc565b85815284602082015260a060408201526000612e0060a0830186612da3565b6001600160a01b0394909416606083015250608001529392505050565b60006020808385031215612e3057600080fd5b825167ffffffffffffffff811115612e4757600080fd5b8301601f81018513612e5857600080fd5b8051612e666129e582612967565b81815260059190911b82018301908381019087831115612e8557600080fd5b928401925b82841015611c5957835182529284019290840190612e8a565b8281526040602082015260006113c26040830184612da3565b6000600019821415612ed057612ed0612b07565b5060010190565b600060208284031215612ee957600080fd5b815160ff81168114610db057600080fd5b60005b83811015612f15578181015183820152602001612efd565b8381111561230e5750506000910152565b60008251612f38818460208701612efa565b9190910192915050565b6020815260008251806020840152612f61816040850160208701612efa565b601f01601f1916919091016040019291505056fea2646970667358221220f01bf4bc9d4fc39e1603cd7506bc8cb6e200276e51e28f97a6a5f722e4c22e4f64736f6c634300080c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061025c5760003560e01c80635c975abb11610145578063a3551c22116100bd578063c55dae631161008c578063e08094c811610071578063e08094c8146104b0578063f2fde38b146104c3578063ff66a305146104d657600080fd5b8063c55dae631461048a578063d3cb96fa1461049d57600080fd5b8063a3551c221461043e578063b33f952714610451578063b36b9ffd14610464578063b888879e1461047757600080fd5b8063891c4e19116101145780638da5cb5b116100f95780638da5cb5b146104105780639f81aed714610421578063a0e47bf61461042b57600080fd5b8063891c4e19146103f45780638ad029f11461040757600080fd5b80635c975abb146103d157806365ee91a7146103dc578063715018a6146103e45780638456cb59146103ec57600080fd5b80633299fcc7116101d85780634451a2a2116101a7578063542b3cb81161018c578063542b3cb8146103a257806356dac67b146103b55780635b07871a146103c857600080fd5b80634451a2a2146103765780634870dd9a1461039957600080fd5b80633299fcc7146103275780633c2d8312146103485780633d7175441461035b5780633f4ba83a1461036e57600080fd5b806327ec50661161022f5780632bf0edee116102145780632bf0edee146103035780633092a6651461030c5780633239d4381461031f57600080fd5b806327ec5066146102dd5780632954018c146102f057600080fd5b806306346c30146102615780630a6c3bb21461029157806317053a7e146102a85780631fe4ba17146102c8575b600080fd5b60a054610274906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61029a60975481565b604051908152602001610288565b61029a6102b63660046127d7565b60a26020526000908152604090205481565b6102db6102d63660046127f4565b6104e9565b005b6102db6102eb3660046127f4565b61052d565b609b54610274906001600160a01b031681565b61029a61213481565b61027461031a3660046127f4565b6105a9565b61029a6105d3565b61033a6103353660046127d7565b610756565b604051610288929190612851565b61029a6103563660046128b6565b610a34565b6102db61036936600461298b565b610db7565b6102db610e26565b6103896103843660046127f4565b610e38565b6040519015158152602001610288565b61029a61271081565b609f54610274906001600160a01b031681565b6103896103c33660046127d7565b610e4b565b61029a60985481565b60655460ff16610389565b610389610e5c565b6102db610e6c565b6102db610e7e565b6102db6104023660046127f4565b610e8e565b61029a6107d081565b6033546001600160a01b0316610274565b61029a6201518081565b609e54610274906001600160a01b031681565b609954610274906001600160a01b031681565b6102db61045f366004612a3f565b610e9e565b60a154610274906001600160a01b031681565b609c54610274906001600160a01b031681565b609a54610274906001600160a01b031681565b6102746104ab366004612ac2565b61129c565b6103896104be366004612ac2565b6112d4565b6102db6104d13660046127d7565b6113ca565b6102db6104e43660046127d7565b61145a565b6104f16114d3565b6104fa8161152d565b609881905560405181907fcf7f7495105ceec35e1d46b5a1330650da881193032a0a846d4c4d2e8d29930490600090a250565b6105356114d3565b8061055357604051631c1bac8960e11b815260040160405180910390fd5b6107d081111561057657604051631c1bac8960e11b815260040160405180910390fd5b609781905560405181907fa6d9a48d7e4e52ec0546321cd0b69b8bb699a75701b9bca931fadba0fece2d7e90600090a250565b609d81815481106105b957600080fd5b6000918252602090912001546001600160a01b0316905081565b609c5460a154604080517fd9cdd51300000000000000000000000000000000000000000000000000000000815290516000936001600160a01b0390811693859391169163d9cdd513916004808201926020929091908290030181865afa158015610641573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106659190612aee565b90506000826001600160a01b0316636f5cdb6c6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106cb9190612aee565b9050826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561070b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072f9190612aee565b61073a90600a612c01565b6107448284612c0d565b61074e9190612c2c565b935050505090565b609f546040517fdc01f60d0000000000000000000000000000000000000000000000000000000081526001600160a01b03838116600483015260609283926000929091169063dc01f60d90602401600060405180830381865afa1580156107c1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107e99190810190612c4e565b9050600181516107f99190612d02565b67ffffffffffffffff811115610811576108116128f7565b60405190808252806020026020018201604052801561083a578160200160208202803683370190505b5092506001815161084b9190612d02565b67ffffffffffffffff811115610863576108636128f7565b60405190808252806020026020018201604052801561088c578160200160208202803683370190505b508151909250600090815b81811015610a2b5760995484516001600160a01b03909116908590839081106108c2576108c2612d19565b6020026020010151600001516001600160a01b031614610a23578381815181106108ee576108ee612d19565b6020026020010151600001516001600160a01b031663b16a19de6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610953575060408051601f3d908101601f1916820190925261095091810190612d2f565b60015b6109ac5783818151811061096957610969612d19565b60200260200101516000015186848151811061098757610987612d19565b60200260200101906001600160a01b031690816001600160a01b0316815250506109e1565b808785815181106109bf576109bf612d19565b60200260200101906001600160a01b031690816001600160a01b031681525050505b8381815181106109f3576109f3612d19565b602002602001015160200151858481518110610a1157610a11612d19565b60209081029190910101526001909201915b600101610897565b50505050915091565b6000610a4260655460ff1690565b15610a4f57506000610db0565b6098546001600160a01b038516331415600080610a6b88610756565b609a549193509150600090610a8c90849084906001600160a01b031661155d565b90508315610b1e57609f546040517f525abb2b0000000000000000000000000000000000000000000000000000000081526001600160a01b038b811660048301529091169063525abb2b90602401602060405180830381865afa158015610af7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1b9190612aee565b96505b86610b27578496505b84871080610b3757506127108710155b15610b555760405163334ee9a160e01b815260040160405180910390fd5b8315610bff5760a1546001600160a01b03163314610b9f576040517f1745275900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610bab8a836112d4565b905080610bf9578815610bea576040517ff8eb54de00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60009650505050505050610db0565b50610c3e565b610c0881610e38565b610c3e576040517fa8ded35f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b87610c8e578315610c80576000610c56828a8a611601565b905061271060975482610c699190612c0d565b610c739190612c2c565b9650505050505050610db0565b600095505050505050610db0565b6000610c9b8a85856118e7565b90508782610cab83612710612c0d565b610cb59190612c2c565b1015610cd45760405163334ee9a160e01b815260040160405180910390fd5b8415610d0257610cff61271060975483610cee9190612c0d565b610cf89190612c2c565b8a8a611601565b96505b610d0c8a89611c64565b508415610da95760995460a15460405163095ea7b360e01b81526001600160a01b039182166004820152602481018a905291169063095ea7b3906044016020604051808303816000875af1158015610d68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8c9190612d4c565b506001600160a01b038a16600090815260a2602052604090204290555b5050505050505b9392505050565b610dbf6114d3565b6001600160a01b038216600090815260a3602090815260409091208251610de892840190612748565b507fbdcf5c7cd2942fc5ccabe6763e7068cae07e81eab2274cbf60f941357fc726c08282604051610e1a929190612d69565b60405180910390a15050565b610e2e6114d3565b610e36611dad565b565b6000610e426105d3565b90911015919050565b6000610e5682611dff565b92915050565b6000610e6733611dff565b905090565b610e746114d3565b610e366000611e42565b610e866114d3565b610e36611e94565b610e9a33600183610a34565b5050565b600054610100900460ff1615808015610ebe5750600054600160ff909116105b80610ed85750303b158015610ed8575060005460ff166001145b610f4f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b6000805460ff191660011790558015610f72576000805461ff0019166101001790555b6001600160a01b038816610f9957604051639fabe1c160e01b815260040160405180910390fd5b6001600160a01b038716610fc057604051639fabe1c160e01b815260040160405180910390fd5b6001600160a01b038616610fe757604051639fabe1c160e01b815260040160405180910390fd5b6001600160a01b03851661100e57604051639fabe1c160e01b815260040160405180910390fd5b6001600160a01b03841661103557604051639fabe1c160e01b815260040160405180910390fd5b8261105357604051631c1bac8960e11b815260040160405180910390fd5b6107d083111561107657604051631c1bac8960e11b815260040160405180910390fd5b61107f8261152d565b609e80546001600160a01b03808b166001600160a01b031992831617909255609f80548a84169083168117909155609a80548a8516908416179055609b805489851690841617905560a0805493881693909216929092179055604080517fa3551c22000000000000000000000000000000000000000000000000000000008152905163a3551c22916004818101926020929091908290030181865afa15801561112c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111509190612d2f565b609980546001600160a01b0319166001600160a01b03928316179055609f54604080517f0a065fb600000000000000000000000000000000000000000000000000000000815290519190921691630a065fb69160048083019260209291908290030181865afa1580156111c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111eb9190612d2f565b609c80546001600160a01b0319166001600160a01b0392831617905560408051808201909152609a5482168152609954909116602082015261123190609d906002612748565b5060978390556098829055611244611ed1565b61124c611f44565b8015611292576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b60a360205281600052604060002081815481106112b857600080fd5b6000918252602090912001546001600160a01b03169150829050565b6001600160a01b038216600090815260a2602052604081205460019015611322576001600160a01b038416600090815260a26020526040902054620151809061131d9042612d02565b101590505b609f546040517fada71bc20000000000000000000000000000000000000000000000000000000081526001600160a01b0386811660048301529091169063ada71bc290602401602060405180830381865afa158015611385573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a99190612d4c565b80156113b957506113b983610e38565b80156113c25750805b949350505050565b6113d26114d3565b6001600160a01b03811661144e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610f46565b61145781611e42565b50565b6114626114d3565b6001600160a01b03811661148957604051639fabe1c160e01b815260040160405180910390fd5b60a180546001600160a01b0319166001600160a01b0383169081179091556040517f399c0ee7188568b38d4bbb76666ae7a03da799c64e2a69ece47a0543021fa8d390600090a250565b6033546001600160a01b03163314610e365760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610f46565b61213481108061153f57506127108110155b156114575760405163334ee9a160e01b815260040160405180910390fd5b6000825184511461159a576040517fa24a13a600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b835160005b818110156115f8576115e48682815181106115bc576115bc612d19565b6020026020010151858784815181106115d7576115d7612d19565b6020026020010151611fb7565b6115ee9084612d8b565b925060010161159f565b50509392505050565b6000821561167257609c60009054906101000a90046001600160a01b03166001600160a01b031663a2e620456040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561165957600080fd5b505af115801561166d573d6000803e3d6000fd5b505050505b609c54604080517f4b94f50e00000000000000000000000000000000000000000000000000000000815290516000926001600160a01b031691634b94f50e9160048083019260209291908290030181865afa1580156116d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116f99190612aee565b905084156118955783156117d657609e54609a54611724916001600160a01b03918216911687612230565b609e546040516338ed173960e01b81526000916001600160a01b0316906338ed17399061175e9089908590609d9030904290600401612de1565b6000604051808303816000875af115801561177d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526117a59190810190612e1d565b905080600182516117b69190612d02565b815181106117c6576117c6612d19565b6020026020010151925050611895565b609e546040517fd06ca61f0000000000000000000000000000000000000000000000000000000081526000916001600160a01b03169063d06ca61f90611823908990609d90600401612ea3565b600060405180830381865afa158015611840573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526118689190810190612e1d565b905080600182516118799190612d02565b8151811061188957611889612d19565b60200260200101519250505b60006118a18383612c0d565b90506127106118b08588612c0d565b6118ba9190612c2c565b6118c86305f5e10083612c2c565b10156115f85760405163334ee9a160e01b815260040160405180910390fd5b609f546040517fb2d6e66d0000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301526000921690819063b2d6e66d90602401600060405180830381600087803b15801561194a57600080fd5b505af115801561195e573d6000803e3d6000fd5b505050506000609b60009054906101000a90046001600160a01b03166001600160a01b0316630261bf8b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156119b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119db9190612d2f565b855190915060005b81811015611bec5760008682815181106119ff576119ff612d19565b602002602001015190508060001415611a185750611bda565b6000888381518110611a2c57611a2c612d19565b60209081029190910101516040517f69328dec0000000000000000000000000000000000000000000000000000000081526001600160a01b03808316600483015260001960248301523060448301529192506000918716906369328dec906064016020604051808303816000875af1925050508015611ac8575060408051601f3d908101601f19168201909252611ac591810190612aee565b60015b611ad3575081611ad6565b90505b609a546001600160a01b03838116911614611bd657609e54611b05906001600160a01b03848116911683612230565b609e546001600160a01b03838116600090815260a3602052604080822090516338ed173960e01b815292909316926338ed173992611b4d928692909130904290600401612de1565b6000604051808303816000875af1925050508015611b8d57506040513d6000823e601f3d908101601f19168201604052611b8a9190810190612e1d565b60015b611bd4576040517ec9330a0000000000000000000000000000000000000000000000000000000081526001600160a01b038316600482015260248101829052604401610f46565b505b5050505b80611be481612ebc565b9150506119e3565b50609a546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015611c35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c599190612aee565b979650505050505050565b609a546040516370a0823160e01b815230600482015260009182916001600160a01b03909116906370a0823190602401602060405180830381865afa158015611cb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd59190612aee565b90508015611da65760a054609a54611cfa916001600160a01b03918216911683612230565b60a0546040517f9506f05f000000000000000000000000000000000000000000000000000000008152600060048201819052602482018190526044820184905260648201526001600160a01b03868116608483015260a4820186905290911690639506f05f9060c4016020604051808303816000875af1158015611d82573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c29190612aee565b5092915050565b611db5612314565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6000806000611e0d84610756565b609a549193509150600090611e2e90849084906001600160a01b031661155d565b9050611e386105d3565b1115949350505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b611e9c612366565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611de23390565b600054610100900460ff16611f3c5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610f46565b610e366123b9565b600054610100900460ff16611faf5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610f46565b610e3661242d565b600080609b60009054906101000a90046001600160a01b03166001600160a01b031663fca513a86040518163ffffffff1660e01b8152600401602060405180830381865afa15801561200d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120319190612d2f565b60405163b3596f0760e01b81526001600160a01b03878116600483015291925060009183169063b3596f0790602401602060405180830381865afa15801561207d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120a19190612aee565b60405163b3596f0760e01b81526001600160a01b03878116600483015291925060009184169063b3596f0790602401602060405180830381865afa1580156120ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121119190612aee565b90506000876001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612153573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121779190612ed7565b60ff1690506000876001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156121bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121e09190612ed7565b60ff1690506121f082600a612c01565b6121fa9084612c0d565b61220582600a612c01565b61220f868a612c0d565b6122199190612c0d565b6122239190612c2c565b9998505050505050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663095ea7b360e01b17905261229684826124a4565b61230e57604080516001600160a01b038516602482015260006044808301919091528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663095ea7b360e01b17905261230490859061254b565b61230e848261254b565b50505050565b60655460ff16610e365760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610f46565b60655460ff1615610e365760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610f46565b600054610100900460ff166124245760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610f46565b610e3633611e42565b600054610100900460ff166124985760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610f46565b6065805460ff19169055565b6000806000846001600160a01b0316846040516124c19190612f26565b6000604051808303816000865af19150503d80600081146124fe576040519150601f19603f3d011682016040523d82523d6000602084013e612503565b606091505b509150915081801561252d57508051158061252d57508080602001905181019061252d9190612d4c565b801561254257506001600160a01b0385163b15155b95945050505050565b60006125a0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166126389092919063ffffffff16565b90508051600014806125c15750808060200190518101906125c19190612d4c565b6126335760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610f46565b505050565b60606113c2848460008585600080866001600160a01b0316858760405161265f9190612f26565b60006040518083038185875af1925050503d806000811461269c576040519150601f19603f3d011682016040523d82523d6000602084013e6126a1565b606091505b5091509150611c598783838760608315612719578251612712576001600160a01b0385163b6127125760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610f46565b50816113c2565b6113c2838381511561272e5781518083602001fd5b8060405162461bcd60e51b8152600401610f469190612f42565b82805482825590600052602060002090810192821561279d579160200282015b8281111561279d57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190612768565b506127a99291506127ad565b5090565b5b808211156127a957600081556001016127ae565b6001600160a01b038116811461145757600080fd5b6000602082840312156127e957600080fd5b8135610db0816127c2565b60006020828403121561280657600080fd5b5035919050565b600081518084526020808501945080840160005b838110156128465781516001600160a01b031687529582019590820190600101612821565b509495945050505050565b604081526000612864604083018561280d565b82810360208481019190915284518083528582019282019060005b8181101561289b5784518352938301939183019160010161287f565b5090979650505050505050565b801515811461145757600080fd5b6000806000606084860312156128cb57600080fd5b83356128d6816127c2565b925060208401356128e6816128a8565b929592945050506040919091013590565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715612930576129306128f7565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561295f5761295f6128f7565b604052919050565b600067ffffffffffffffff821115612981576129816128f7565b5060051b60200190565b6000806040838503121561299e57600080fd5b82356129a9816127c2565b915060208381013567ffffffffffffffff8111156129c657600080fd5b8401601f810186136129d757600080fd5b80356129ea6129e582612967565b612936565b81815260059190911b82018301908381019088831115612a0957600080fd5b928401925b82841015612a30578335612a21816127c2565b82529284019290840190612a0e565b80955050505050509250929050565b600080600080600080600060e0888a031215612a5a57600080fd5b8735612a65816127c2565b96506020880135612a75816127c2565b95506040880135612a85816127c2565b94506060880135612a95816127c2565b93506080880135612aa5816127c2565b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215612ad557600080fd5b8235612ae0816127c2565b946020939093013593505050565b600060208284031215612b0057600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600181815b80851115612b58578160001904821115612b3e57612b3e612b07565b80851615612b4b57918102915b93841c9390800290612b22565b509250929050565b600082612b6f57506001610e56565b81612b7c57506000610e56565b8160018114612b925760028114612b9c57612bb8565b6001915050610e56565b60ff841115612bad57612bad612b07565b50506001821b610e56565b5060208310610133831016604e8410600b8410161715612bdb575081810a610e56565b612be58383612b1d565b8060001904821115612bf957612bf9612b07565b029392505050565b6000610db08383612b60565b6000816000190483118215151615612c2757612c27612b07565b500290565b600082612c4957634e487b7160e01b600052601260045260246000fd5b500490565b60006020808385031215612c6157600080fd5b825167ffffffffffffffff811115612c7857600080fd5b8301601f81018513612c8957600080fd5b8051612c976129e582612967565b81815260069190911b82018301908381019087831115612cb657600080fd5b928401925b82841015611c595760408489031215612cd45760008081fd5b612cdc61290d565b8451612ce7816127c2565b81528486015186820152825260409093019290840190612cbb565b600082821015612d1457612d14612b07565b500390565b634e487b7160e01b600052603260045260246000fd5b600060208284031215612d4157600080fd5b8151610db0816127c2565b600060208284031215612d5e57600080fd5b8151610db0816128a8565b6001600160a01b03831681526040602082015260006113c2604083018461280d565b60008219821115612d9e57612d9e612b07565b500190565b6000815480845260208085019450836000528060002060005b838110156128465781546001600160a01b031687529582019560019182019101612dbc565b85815284602082015260a060408201526000612e0060a0830186612da3565b6001600160a01b0394909416606083015250608001529392505050565b60006020808385031215612e3057600080fd5b825167ffffffffffffffff811115612e4757600080fd5b8301601f81018513612e5857600080fd5b8051612e666129e582612967565b81815260059190911b82018301908381019087831115612e8557600080fd5b928401925b82841015611c5957835182529284019290840190612e8a565b8281526040602082015260006113c26040830184612da3565b6000600019821415612ed057612ed0612b07565b5060010190565b600060208284031215612ee957600080fd5b815160ff81168114610db057600080fd5b60005b83811015612f15578181015183820152602001612efd565b8381111561230e5750506000910152565b60008251612f38818460208701612efa565b9190910192915050565b6020815260008251806020840152612f61816040850160208701612efa565b601f01601f1916919091016040019291505056fea2646970667358221220f01bf4bc9d4fc39e1603cd7506bc8cb6e200276e51e28f97a6a5f722e4c22e4f64736f6c634300080c0033",
  "devdoc": {
    "author": "Prime",
    "kind": "dev",
    "methods": {
      "autocompoundThreshold()": {
        "returns": {
          "minStakeAmtEth": "Minimum stake amount in ETH"
        }
      },
      "claimCompound(address,bool,uint256)": {
        "details": "Can be auto compound or manual compound",
        "params": {
          "_execute": "whether to execute txn, or just quote (expected amount out for bounty executor)",
          "_slippage": "that shouldn't be exceeded when performing swaps",
          "_user": "user address"
        },
        "returns": {
          "fee": "amount"
        }
      },
      "initialize(address,address,address,address,address,uint256,uint256)": {
        "params": {
          "_addressProvider": "Address of LendingPoolAddressesProvider",
          "_baseToken": "Address of pair asset of PRNT LP",
          "_compoundFee": "Compounding fee",
          "_lockZap": "Address of LockZap contract",
          "_mfd": "Address of MFD",
          "_slippageLimit": "Slippage limit",
          "_uniRouter": "Address of swap router"
        }
      },
      "isEligibleForAutoCompound(address,uint256)": {
        "params": {
          "_pending": "amount",
          "_user": "address"
        },
        "returns": {
          "_0": "True or False"
        }
      },
      "isEligibleForCompound(uint256)": {
        "params": {
          "_pending": "amount"
        },
        "returns": {
          "eligible": "True or False"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "selfCompound(uint256)": {
        "params": {
          "_slippage": "that shouldn't be exceeded when performing swaps"
        }
      },
      "selfEligibleCompound()": {
        "returns": {
          "eligible": "`true` or `false`"
        }
      },
      "setBountyManager(address)": {
        "params": {
          "_manager": "Bounty manager address"
        }
      },
      "setCompoundFee(uint256)": {
        "params": {
          "_compoundFee": "fee ratio for compounding"
        }
      },
      "setRoutes(address,address[])": {
        "params": {
          "_routes": "Swap route for token",
          "_token": "Token for swap"
        }
      },
      "setSlippageLimit(uint256)": {
        "params": {
          "_slippageLimit": "new slippage limit"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "userEligibleForCompound(address)": {
        "params": {
          "_user": "address"
        },
        "returns": {
          "eligible": "`true` or `false`"
        }
      },
      "viewPendingRewards(address)": {
        "params": {
          "_user": "owner of rewards"
        },
        "returns": {
          "amts": "array of reward amounts",
          "tokens": "array of reward token addresses"
        }
      }
    },
    "stateVariables": {
      "MAX_SLIPPAGE_LIMIT": {
        "details": "The max slippage should be equal to the max slippage of the LockZap contract, otherwise transactions could revert"
      }
    },
    "title": "Compounder Contract",
    "version": 1
  },
  "userdoc": {
    "events": {
      "BountyManagerUpdated(address)": {
        "notice": "Emitted when bounty manager is updated"
      },
      "CompoundFeeUpdated(uint256)": {
        "notice": "Emitted when compounding fee is updated"
      },
      "RoutesUpdated(address,address[])": {
        "notice": "Emitted when routes are updated"
      },
      "SlippageLimitUpdated(uint256)": {
        "notice": "Emitted when slippage limit is updated"
      }
    },
    "kind": "user",
    "methods": {
      "MAX_SLIPPAGE_LIMIT()": {
        "notice": "The maximum slippage limit that can be set by admins"
      },
      "PERCENT_DIVISOR()": {
        "notice": "Percent divisor which is equal to 100%"
      },
      "addressProvider()": {
        "notice": "Lending Pool Addresses Provider contract address"
      },
      "autocompoundThreshold()": {
        "notice": "Returns minimum stake amount in ETH"
      },
      "baseToken()": {
        "notice": "Token that PRNT is paired with in LP"
      },
      "bountyManager()": {
        "notice": "BountyManager address"
      },
      "claimCompound(address,bool,uint256)": {
        "notice": "Compound user's rewards"
      },
      "compoundFee()": {
        "notice": "Fee of compounding"
      },
      "initialize(address,address,address,address,address,uint256,uint256)": {
        "notice": "Initializer"
      },
      "isEligibleForAutoCompound(address,uint256)": {
        "notice": "Returns if user is eligbile for auto compounding"
      },
      "isEligibleForCompound(uint256)": {
        "notice": "Returns if pending amount is elgible for auto compounding"
      },
      "lastAutocompound(address)": {
        "notice": "Timestamp of last auto compounding"
      },
      "lockZap()": {
        "notice": "Lockzap address"
      },
      "multiFeeDistribution()": {
        "notice": "MFD address"
      },
      "pause()": {
        "notice": "Pause contract"
      },
      "priceProvider()": {
        "notice": "Price provider contract address"
      },
      "prntToken()": {
        "notice": "PRNT token address"
      },
      "rewardToBaseRoute(address,uint256)": {
        "notice": "Swap route from rewardToken to baseToken"
      },
      "selfCompound(uint256)": {
        "notice": "Compound `msg.sender`'s rewards."
      },
      "selfEligibleCompound()": {
        "notice": "Returns if the `msg.sender` is eligible for self compound"
      },
      "setBountyManager(address)": {
        "notice": "Set bounty manager"
      },
      "setCompoundFee(uint256)": {
        "notice": "Sets the fee for compounding."
      },
      "setRoutes(address,address[])": {
        "notice": "Set swap routes"
      },
      "setSlippageLimit(uint256)": {
        "notice": "Sets slippage limit."
      },
      "slippageLimit()": {
        "notice": "Slippage limit for swap"
      },
      "uniRouter()": {
        "notice": "Swap router"
      },
      "unpause()": {
        "notice": "Unpause contract"
      },
      "userEligibleForCompound(address)": {
        "notice": "Returns if the user is eligible for auto compound"
      },
      "viewPendingRewards(address)": {
        "notice": "Returns the pending rewards of the `_user`"
      },
      "wethToPrime(uint256)": {
        "notice": "Swap route WETH -> PRNT"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 139,
        "contract": "contracts/prime/accessories/Compounder.sol:Compounder",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 142,
        "contract": "contracts/prime/accessories/Compounder.sol:Compounder",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 809,
        "contract": "contracts/prime/accessories/Compounder.sol:Compounder",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 11,
        "contract": "contracts/prime/accessories/Compounder.sol:Compounder",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 131,
        "contract": "contracts/prime/accessories/Compounder.sol:Compounder",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 323,
        "contract": "contracts/prime/accessories/Compounder.sol:Compounder",
        "label": "_paused",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 428,
        "contract": "contracts/prime/accessories/Compounder.sol:Compounder",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5995,
        "contract": "contracts/prime/accessories/Compounder.sol:Compounder",
        "label": "compoundFee",
        "offset": 0,
        "slot": "151",
        "type": "t_uint256"
      },
      {
        "astId": 5998,
        "contract": "contracts/prime/accessories/Compounder.sol:Compounder",
        "label": "slippageLimit",
        "offset": 0,
        "slot": "152",
        "type": "t_uint256"
      },
      {
        "astId": 6002,
        "contract": "contracts/prime/accessories/Compounder.sol:Compounder",
        "label": "prntToken",
        "offset": 0,
        "slot": "153",
        "type": "t_contract(IMintableToken)4976"
      },
      {
        "astId": 6005,
        "contract": "contracts/prime/accessories/Compounder.sol:Compounder",
        "label": "baseToken",
        "offset": 0,
        "slot": "154",
        "type": "t_address"
      },
      {
        "astId": 6008,
        "contract": "contracts/prime/accessories/Compounder.sol:Compounder",
        "label": "addressProvider",
        "offset": 0,
        "slot": "155",
        "type": "t_address"
      },
      {
        "astId": 6011,
        "contract": "contracts/prime/accessories/Compounder.sol:Compounder",
        "label": "priceProvider",
        "offset": 0,
        "slot": "156",
        "type": "t_address"
      },
      {
        "astId": 6015,
        "contract": "contracts/prime/accessories/Compounder.sol:Compounder",
        "label": "wethToPrime",
        "offset": 0,
        "slot": "157",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 6018,
        "contract": "contracts/prime/accessories/Compounder.sol:Compounder",
        "label": "uniRouter",
        "offset": 0,
        "slot": "158",
        "type": "t_address"
      },
      {
        "astId": 6021,
        "contract": "contracts/prime/accessories/Compounder.sol:Compounder",
        "label": "multiFeeDistribution",
        "offset": 0,
        "slot": "159",
        "type": "t_address"
      },
      {
        "astId": 6024,
        "contract": "contracts/prime/accessories/Compounder.sol:Compounder",
        "label": "lockZap",
        "offset": 0,
        "slot": "160",
        "type": "t_address"
      },
      {
        "astId": 6027,
        "contract": "contracts/prime/accessories/Compounder.sol:Compounder",
        "label": "bountyManager",
        "offset": 0,
        "slot": "161",
        "type": "t_address"
      },
      {
        "astId": 6032,
        "contract": "contracts/prime/accessories/Compounder.sol:Compounder",
        "label": "lastAutocompound",
        "offset": 0,
        "slot": "162",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6038,
        "contract": "contracts/prime/accessories/Compounder.sol:Compounder",
        "label": "rewardToBaseRoute",
        "offset": 0,
        "slot": "163",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IMintableToken)4976": {
        "encoding": "inplace",
        "label": "contract IMintableToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}