{
  "address": "0x7e38140922e17eA071DC29432E0cf94B055871d6",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AddressZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidOracle",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_baseTokenPriceInUsdProxyAggregator",
          "type": "address"
        }
      ],
      "name": "AggregatorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_newOracle",
          "type": "address"
        }
      ],
      "name": "OracleUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_poolHelper",
          "type": "address"
        }
      ],
      "name": "PoolHelperUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bool",
          "name": "_usePool",
          "type": "bool"
        }
      ],
      "name": "UsePoolUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "baseAssetChainlinkAdapter",
      "outputs": [
        {
          "internalType": "contract IChainlinkAdapter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLpTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLpTokenPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLpTokenPriceUsd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "priceInEth",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenPriceUsd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IChainlinkAdapter",
          "name": "_baseAssetChainlinkAdapter",
          "type": "address"
        },
        {
          "internalType": "contract IPoolHelper",
          "name": "_poolHelper",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "contract IBaseOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolHelper",
      "outputs": [
        {
          "internalType": "contract IPoolHelper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_baseAssetChainlinkAdapter",
          "type": "address"
        }
      ],
      "name": "setAggregator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOracle",
          "type": "address"
        }
      ],
      "name": "setOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poolHelper",
          "type": "address"
        }
      ],
      "name": "setPoolHelper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_usePool",
          "type": "bool"
        }
      ],
      "name": "setUsePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "update",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6da3fbcd9454180b54e771c1dc8078127d978d5387a4272dc8d2c0c3fed1a455",
  "receipt": {
    "to": null,
    "from": "0xdE8023f05d831Fb7381486D041237ddEB06c1BA2",
    "contractAddress": "0x7e38140922e17eA071DC29432E0cf94B055871d6",
    "transactionIndex": 3,
    "gasUsed": "889633",
    "logsBloom": "0x
    "blockHash": "0x1ffd1f2779528d5ac0bdfd26a90759cd2f7b09e3c1f242d679a67e4d0f87d571",
    "transactionHash": "0x6da3fbcd9454180b54e771c1dc8078127d978d5387a4272dc8d2c0c3fed1a455",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 43440019,
        "transactionHash": "0x6da3fbcd9454180b54e771c1dc8078127d978d5387a4272dc8d2c0c3fed1a455",
        "address": "0x7e38140922e17eA071DC29432E0cf94B055871d6",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 3,
        "blockHash": "0x1ffd1f2779528d5ac0bdfd26a90759cd2f7b09e3c1f242d679a67e4d0f87d571"
      }
    ],
    "blockNumber": 43440019,
    "cumulativeGasUsed": "1095273",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "1d544f96a00f94e7a887913a2bd4bf37",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOracle\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_baseTokenPriceInUsdProxyAggregator\",\"type\":\"address\"}],\"name\":\"AggregatorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newOracle\",\"type\":\"address\"}],\"name\":\"OracleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_poolHelper\",\"type\":\"address\"}],\"name\":\"PoolHelperUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"_usePool\",\"type\":\"bool\"}],\"name\":\"UsePoolUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"baseAssetChainlinkAdapter\",\"outputs\":[{\"internalType\":\"contract IChainlinkAdapter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLpTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLpTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLpTokenPriceUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"priceInEth\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenPriceUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IChainlinkAdapter\",\"name\":\"_baseAssetChainlinkAdapter\",\"type\":\"address\"},{\"internalType\":\"contract IPoolHelper\",\"name\":\"_poolHelper\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract IBaseOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolHelper\",\"outputs\":[{\"internalType\":\"contract IPoolHelper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_baseAssetChainlinkAdapter\",\"type\":\"address\"}],\"name\":\"setAggregator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolHelper\",\"type\":\"address\"}],\"name\":\"setPoolHelper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_usePool\",\"type\":\"bool\"}],\"name\":\"setUsePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Prime\",\"kind\":\"dev\",\"methods\":{\"initialize(address,address)\":{\"params\":{\"_baseAssetChainlinkAdapter\":\"Chainlink aggregator for USD price of base token\",\"_poolHelper\":\"Pool helper contract - Uniswap/Balancer\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"PriceProvider Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"baseAssetChainlinkAdapter()\":{\"notice\":\"Chainlink aggregator for USD price of base token\"},\"decimals()\":{\"notice\":\"Returns decimals of price.\"},\"getLpTokenAddress()\":{\"notice\":\"Returns lp token address.\"},\"getLpTokenPrice()\":{\"notice\":\"Returns lp token price in ETH.\"},\"getLpTokenPriceUsd()\":{\"notice\":\"Returns lp token price in USD.\"},\"getTokenPrice()\":{\"notice\":\"Returns the latest price in eth.\"},\"getTokenPriceUsd()\":{\"notice\":\"Returns the latest price in USD.\"},\"initialize(address,address)\":{\"notice\":\"Initializer\"},\"oracle()\":{\"notice\":\"Selected PRNT Oracle\"},\"poolHelper()\":{\"notice\":\"Pool helper contract - Uniswap/Balancer\"},\"setAggregator(address)\":{\"notice\":\"Sets base token price aggregator.\"},\"setOracle(address)\":{\"notice\":\"Sets new oracle.\"},\"setPoolHelper(address)\":{\"notice\":\"Sets pool helper contract.\"},\"setUsePool(bool)\":{\"notice\":\"Sets option to use pool.\"},\"update()\":{\"notice\":\"Update oracles.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/prime/oracles/PriceProvider.sol\":\"PriceProvider\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x359a1ab89b46b9aba7bcad3fb651924baf4893d15153049b9976b0fc9be1358e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"contracts/interfaces/IBaseOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\ninterface IBaseOracle {\\n\\tfunction latestAnswer() external view returns (uint256 price);\\n\\n\\tfunction latestAnswerInEth() external view returns (uint256 price);\\n\\n\\tfunction update() external;\\n\\n\\tfunction canUpdate() external view returns (bool);\\n\\n\\tfunction consult() external view returns (uint256 price);\\n}\\n\",\"keccak256\":\"0xaea33fc98413b52ae33c22aff071429893fbf61a67ba06e6ad0ae15e14b3c265\",\"license\":\"MIT\"},\"contracts/interfaces/IChainlinkAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\ninterface IChainlinkAdapter {\\n\\tfunction latestAnswer() external view returns (uint256 price);\\n}\\n\",\"keccak256\":\"0x02576e519248f5e8fc12bf32351d24baba6104992502c8c9604e8f7c53423b4c\",\"license\":\"MIT\"},\"contracts/interfaces/IPoolHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IPoolHelper {\\n\\tfunction lpTokenAddr() external view returns (address);\\n\\n\\tfunction zapWETH(uint256 amount) external returns (uint256);\\n\\n\\tfunction zapTokens(uint256 _wethAmt, uint256 _prntAmt) external returns (uint256);\\n\\n\\tfunction quoteFromToken(uint256 tokenAmount) external view returns (uint256 optimalWETHAmount);\\n\\n\\tfunction quoteWETH(uint256 lpAmount) external view returns (uint256 wethAmount);\\n\\n\\tfunction getLpPrice(uint256 prntPriceInEth) external view returns (uint256 priceInEth);\\n\\n\\tfunction getReserves() external view returns (uint256 prnt, uint256 weth, uint256 lpTokenSupply);\\n\\n\\tfunction getPrice() external view returns (uint256 priceInEth);\\n\\n\\tfunction quoteSwap(address _inToken, uint256 _wethAmount) external view returns (uint256 tokenAmount);\\n\\n\\tfunction swapToWeth(address _inToken, uint256 _amount, uint256 _minAmountOut) external;\\n}\\n\\ninterface IBalancerPoolHelper is IPoolHelper {\\n\\tfunction initializePool(string calldata _tokenName, string calldata _tokenSymbol) external;\\n}\\n\\ninterface IUniswapPoolHelper is IPoolHelper {\\n\\tfunction initializePool() external;\\n}\\n\\ninterface ITestPoolHelper is IPoolHelper {\\n\\tfunction sell(uint256 _amount) external returns (uint256 amountOut);\\n}\\n\",\"keccak256\":\"0xad679c74b1966322ad2624bea0cbc6aaf15f88ae310160360bb3fbae185d27b7\",\"license\":\"MIT\"},\"contracts/prime/oracles/PriceProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\nimport {IBaseOracle} from \\\"../../interfaces/IBaseOracle.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {IPoolHelper} from \\\"../../interfaces/IPoolHelper.sol\\\";\\nimport {IChainlinkAdapter} from \\\"../../interfaces/IChainlinkAdapter.sol\\\";\\n\\n/// @title PriceProvider Contract\\n/// @author Prime\\ncontract PriceProvider is Initializable, OwnableUpgradeable {\\n\\t/// @notice Chainlink aggregator for USD price of base token\\n\\tIChainlinkAdapter public baseAssetChainlinkAdapter;\\n\\n\\t/// @notice Pool helper contract - Uniswap/Balancer\\n\\tIPoolHelper public poolHelper;\\n\\n\\t/// @notice Selected PRNT Oracle\\n\\tIBaseOracle public oracle;\\n\\n\\tbool private usePool;\\n\\n\\terror AddressZero();\\n\\n\\terror InvalidOracle();\\n\\n\\t/********************** Events ***********************/\\n\\n\\tevent OracleUpdated(address indexed _newOracle);\\n\\n\\tevent PoolHelperUpdated(address indexed _poolHelper);\\n\\n\\tevent AggregatorUpdated(address indexed _baseTokenPriceInUsdProxyAggregator);\\n\\n\\tevent UsePoolUpdated(bool indexed _usePool);\\n\\n\\tconstructor() {\\n\\t\\t_disableInitializers();\\n\\t}\\n\\n\\t/**\\n\\t * @notice Initializer\\n\\t * @param _baseAssetChainlinkAdapter Chainlink aggregator for USD price of base token\\n\\t * @param _poolHelper Pool helper contract - Uniswap/Balancer\\n\\t */\\n\\tfunction initialize(IChainlinkAdapter _baseAssetChainlinkAdapter, IPoolHelper _poolHelper) public initializer {\\n\\t\\tif (address(_baseAssetChainlinkAdapter) == (address(0))) revert AddressZero();\\n\\t\\tif (address(_poolHelper) == (address(0))) revert AddressZero();\\n\\t\\t__Ownable_init();\\n\\n\\t\\tpoolHelper = _poolHelper;\\n\\t\\tbaseAssetChainlinkAdapter = IChainlinkAdapter(_baseAssetChainlinkAdapter);\\n\\t\\tusePool = true;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Update oracles.\\n\\t */\\n\\tfunction update() public {\\n\\t\\tif (address(oracle) != address(0) && oracle.canUpdate()) {\\n\\t\\t\\toracle.update();\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns the latest price in eth.\\n\\t */\\n\\tfunction getTokenPrice() public view returns (uint256 priceInEth) {\\n\\t\\tif (usePool) {\\n\\t\\t\\t// use sparingly, TWAP/CL otherwise\\n\\t\\t\\tpriceInEth = poolHelper.getPrice();\\n\\t\\t} else {\\n\\t\\t\\tpriceInEth = oracle.latestAnswerInEth();\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns the latest price in USD.\\n\\t */\\n\\tfunction getTokenPriceUsd() public view returns (uint256 price) {\\n\\t\\t// use sparingly, TWAP/CL otherwise\\n\\t\\tif (usePool) {\\n\\t\\t\\tuint256 ethPrice = baseAssetChainlinkAdapter.latestAnswer();\\n\\t\\t\\tuint256 priceInEth = poolHelper.getPrice();\\n\\t\\t\\tprice = (priceInEth * uint256(ethPrice)) / (10 ** 8);\\n\\t\\t} else {\\n\\t\\t\\tprice = oracle.latestAnswer();\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns lp token price in ETH.\\n\\t */\\n\\tfunction getLpTokenPrice() public view returns (uint256) {\\n\\t\\t// decis 8\\n\\t\\tuint256 prntPriceInEth = getTokenPrice();\\n\\t\\treturn poolHelper.getLpPrice(prntPriceInEth);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns lp token price in USD.\\n\\t */\\n\\tfunction getLpTokenPriceUsd() public view returns (uint256 price) {\\n\\t\\t// decimals 8\\n\\t\\tuint256 lpPriceInEth = getLpTokenPrice();\\n\\t\\t// decimals 8\\n\\t\\tuint256 ethPrice = baseAssetChainlinkAdapter.latestAnswer();\\n\\t\\tprice = (lpPriceInEth * uint256(ethPrice)) / (10 ** 8);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns lp token address.\\n\\t */\\n\\tfunction getLpTokenAddress() public view returns (address) {\\n\\t\\treturn poolHelper.lpTokenAddr();\\n\\t}\\n\\n\\t/**\\n\\t * @notice Sets new oracle.\\n\\t */\\n\\tfunction setOracle(address _newOracle) external onlyOwner {\\n\\t\\tif (_newOracle == address(0)) revert AddressZero();\\n\\t\\toracle = IBaseOracle(_newOracle);\\n\\t\\temit OracleUpdated(_newOracle);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Sets pool helper contract.\\n\\t */\\n\\tfunction setPoolHelper(address _poolHelper) external onlyOwner {\\n\\t\\tpoolHelper = IPoolHelper(_poolHelper);\\n\\t\\tif (getLpTokenPrice() == 0) revert InvalidOracle();\\n\\t\\temit PoolHelperUpdated(_poolHelper);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Sets base token price aggregator.\\n\\t */\\n\\tfunction setAggregator(address _baseAssetChainlinkAdapter) external onlyOwner {\\n\\t\\tbaseAssetChainlinkAdapter = IChainlinkAdapter(_baseAssetChainlinkAdapter);\\n\\t\\tif (getLpTokenPriceUsd() == 0) revert InvalidOracle();\\n\\t\\temit AggregatorUpdated(_baseAssetChainlinkAdapter);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Sets option to use pool.\\n\\t */\\n\\tfunction setUsePool(bool _usePool) external onlyOwner {\\n\\t\\tusePool = _usePool;\\n\\t\\temit UsePoolUpdated(_usePool);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns decimals of price.\\n\\t */\\n\\tfunction decimals() public pure returns (uint256) {\\n\\t\\treturn 8;\\n\\t}\\n}\\n\",\"keccak256\":\"0x2fe4df2731c672c6e1619c6265c654ce51121d5f949cbb24bcf8baf799d9ebe2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001961001e565b6100dd565b600054610100900460ff161561008a5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff908116146100db576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b610eac806100ec6000396000f3fe608060405234801561001057600080fd5b50600436106101365760003560e01c80637adbf973116100b25780638da5cb5b11610081578063ad8cb7f511610066578063ad8cb7f514610226578063f2fde38b14610239578063f9120af61461024c57600080fd5b80638da5cb5b1461020d578063a2e620451461021e57600080fd5b80637adbf973146101cc5780637dc0d1d0146101df57806388be91a0146101f25780638c237c691461020557600080fd5b806355ac8d30116101095780636e9a05c5116100ee5780636e9a05c5146101b45780636f5cdb6c146101bc578063715018a6146101c457600080fd5b806355ac8d30146101815780636d2ed184146101ac57600080fd5b80632cd354751461013b578063313ce56714610150578063485cc955146101665780634b94f50e14610179575b600080fd5b61014e610149366004610d4c565b61025f565b005b60085b6040519081526020015b60405180910390f35b61014e610174366004610d70565b6102de565b610153610496565b606654610194906001600160a01b031681565b6040516001600160a01b03909116815260200161015d565b61015361057a565b610153610706565b61015361079d565b61014e610835565b61014e6101da366004610d4c565b610849565b606754610194906001600160a01b031681565b606554610194906001600160a01b031681565b6101946108c2565b6033546001600160a01b0316610194565b61014e610949565b61014e610234366004610db7565b610a44565b61014e610247366004610d4c565b610a95565b61014e61025a366004610d4c565b610b25565b610267610ba4565b606680546001600160a01b0319166001600160a01b03831617905561028a61079d565b6102a757604051639589a27d60e01b815260040160405180910390fd5b6040516001600160a01b038216907fce3a680d01747abb9461a3d05f1da77c9cfb9a5b7a6cc1828c733dc52b15479790600090a250565b600054610100900460ff16158080156102fe5750600054600160ff909116105b806103185750303b158015610318575060005460ff166001145b61038f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b6000805460ff1916600117905580156103b2576000805461ff0019166101001790555b6001600160a01b0383166103d957604051639fabe1c160e01b815260040160405180910390fd5b6001600160a01b03821661040057604051639fabe1c160e01b815260040160405180910390fd5b610408610bfe565b606680546001600160a01b038085166001600160a01b03199283161790925560658054928616929091169190911790556067805460ff60a01b1916600160a01b1790558015610491576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b606754600090600160a01b900460ff161561052757606660009054906101000a90046001600160a01b03166001600160a01b03166398d5fdca6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105229190610dd4565b905090565b606760009054906101000a90046001600160a01b03166001600160a01b031663251cdcd86040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104fe573d6000803e3d6000fd5b606754600090600160a01b900460ff16156106b357606554604080517f50d25bcd00000000000000000000000000000000000000000000000000000000815290516000926001600160a01b0316916350d25bcd9160048083019260209291908290030181865afa1580156105f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106169190610dd4565b90506000606660009054906101000a90046001600160a01b03166001600160a01b03166398d5fdca6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561066d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106919190610dd4565b90506305f5e1006106a28383610ded565b6106ac9190610e1a565b9250505090565b606760009054906101000a90046001600160a01b03166001600160a01b03166350d25bcd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104fe573d6000803e3d6000fd5b60008061071161079d565b90506000606560009054906101000a90046001600160a01b03166001600160a01b03166350d25bcd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610768573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078c9190610dd4565b90506305f5e1006106a28284610ded565b6000806107a8610496565b6066546040517fe28861fa000000000000000000000000000000000000000000000000000000008152600481018390529192506001600160a01b03169063e28861fa90602401602060405180830381865afa15801561080b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082f9190610dd4565b91505090565b61083d610ba4565b6108476000610c71565b565b610851610ba4565b6001600160a01b03811661087857604051639fabe1c160e01b815260040160405180910390fd5b606780546001600160a01b0319166001600160a01b0383169081179091556040517f3df77beb5db05fcdd70a30fc8adf3f83f9501b68579455adbd100b818094039490600090a250565b606654604080517f439e501600000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163439e50169160048083019260209291908290030181865afa158015610925573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105229190610e3c565b6067546001600160a01b0316158015906109d55750606760009054906101000a90046001600160a01b03166001600160a01b031663a17a26856040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d59190610e59565b1561084757606760009054906101000a90046001600160a01b03166001600160a01b031663a2e620456040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610a2a57600080fd5b505af1158015610a3e573d6000803e3d6000fd5b50505050565b610a4c610ba4565b6067805460ff60a01b1916600160a01b831515908102919091179091556040517f9c9cc9a8d894f0f8e25eff967a8e37a5d1fe96444b43b2860b85923267dbba1890600090a250565b610a9d610ba4565b6001600160a01b038116610b195760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610386565b610b2281610c71565b50565b610b2d610ba4565b606580546001600160a01b0319166001600160a01b038316179055610b50610706565b610b6d57604051639589a27d60e01b815260040160405180910390fd5b6040516001600160a01b038216907f602cec4b1583b07d071161da5eb9589444d2459201e2fab7753dc941e9351c2190600090a250565b6033546001600160a01b031633146108475760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610386565b600054610100900460ff16610c695760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610386565b610847610cc3565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16610d2e5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610386565b61084733610c71565b6001600160a01b0381168114610b2257600080fd5b600060208284031215610d5e57600080fd5b8135610d6981610d37565b9392505050565b60008060408385031215610d8357600080fd5b8235610d8e81610d37565b91506020830135610d9e81610d37565b809150509250929050565b8015158114610b2257600080fd5b600060208284031215610dc957600080fd5b8135610d6981610da9565b600060208284031215610de657600080fd5b5051919050565b6000816000190483118215151615610e1557634e487b7160e01b600052601160045260246000fd5b500290565b600082610e3757634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215610e4e57600080fd5b8151610d6981610d37565b600060208284031215610e6b57600080fd5b8151610d6981610da956fea264697066735822122082d62f4dc40850f1be112988227dd451b8806bf8d754250ebbc5f11f10e084f864736f6c634300080c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101365760003560e01c80637adbf973116100b25780638da5cb5b11610081578063ad8cb7f511610066578063ad8cb7f514610226578063f2fde38b14610239578063f9120af61461024c57600080fd5b80638da5cb5b1461020d578063a2e620451461021e57600080fd5b80637adbf973146101cc5780637dc0d1d0146101df57806388be91a0146101f25780638c237c691461020557600080fd5b806355ac8d30116101095780636e9a05c5116100ee5780636e9a05c5146101b45780636f5cdb6c146101bc578063715018a6146101c457600080fd5b806355ac8d30146101815780636d2ed184146101ac57600080fd5b80632cd354751461013b578063313ce56714610150578063485cc955146101665780634b94f50e14610179575b600080fd5b61014e610149366004610d4c565b61025f565b005b60085b6040519081526020015b60405180910390f35b61014e610174366004610d70565b6102de565b610153610496565b606654610194906001600160a01b031681565b6040516001600160a01b03909116815260200161015d565b61015361057a565b610153610706565b61015361079d565b61014e610835565b61014e6101da366004610d4c565b610849565b606754610194906001600160a01b031681565b606554610194906001600160a01b031681565b6101946108c2565b6033546001600160a01b0316610194565b61014e610949565b61014e610234366004610db7565b610a44565b61014e610247366004610d4c565b610a95565b61014e61025a366004610d4c565b610b25565b610267610ba4565b606680546001600160a01b0319166001600160a01b03831617905561028a61079d565b6102a757604051639589a27d60e01b815260040160405180910390fd5b6040516001600160a01b038216907fce3a680d01747abb9461a3d05f1da77c9cfb9a5b7a6cc1828c733dc52b15479790600090a250565b600054610100900460ff16158080156102fe5750600054600160ff909116105b806103185750303b158015610318575060005460ff166001145b61038f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b6000805460ff1916600117905580156103b2576000805461ff0019166101001790555b6001600160a01b0383166103d957604051639fabe1c160e01b815260040160405180910390fd5b6001600160a01b03821661040057604051639fabe1c160e01b815260040160405180910390fd5b610408610bfe565b606680546001600160a01b038085166001600160a01b03199283161790925560658054928616929091169190911790556067805460ff60a01b1916600160a01b1790558015610491576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b606754600090600160a01b900460ff161561052757606660009054906101000a90046001600160a01b03166001600160a01b03166398d5fdca6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105229190610dd4565b905090565b606760009054906101000a90046001600160a01b03166001600160a01b031663251cdcd86040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104fe573d6000803e3d6000fd5b606754600090600160a01b900460ff16156106b357606554604080517f50d25bcd00000000000000000000000000000000000000000000000000000000815290516000926001600160a01b0316916350d25bcd9160048083019260209291908290030181865afa1580156105f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106169190610dd4565b90506000606660009054906101000a90046001600160a01b03166001600160a01b03166398d5fdca6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561066d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106919190610dd4565b90506305f5e1006106a28383610ded565b6106ac9190610e1a565b9250505090565b606760009054906101000a90046001600160a01b03166001600160a01b03166350d25bcd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104fe573d6000803e3d6000fd5b60008061071161079d565b90506000606560009054906101000a90046001600160a01b03166001600160a01b03166350d25bcd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610768573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078c9190610dd4565b90506305f5e1006106a28284610ded565b6000806107a8610496565b6066546040517fe28861fa000000000000000000000000000000000000000000000000000000008152600481018390529192506001600160a01b03169063e28861fa90602401602060405180830381865afa15801561080b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082f9190610dd4565b91505090565b61083d610ba4565b6108476000610c71565b565b610851610ba4565b6001600160a01b03811661087857604051639fabe1c160e01b815260040160405180910390fd5b606780546001600160a01b0319166001600160a01b0383169081179091556040517f3df77beb5db05fcdd70a30fc8adf3f83f9501b68579455adbd100b818094039490600090a250565b606654604080517f439e501600000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163439e50169160048083019260209291908290030181865afa158015610925573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105229190610e3c565b6067546001600160a01b0316158015906109d55750606760009054906101000a90046001600160a01b03166001600160a01b031663a17a26856040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d59190610e59565b1561084757606760009054906101000a90046001600160a01b03166001600160a01b031663a2e620456040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610a2a57600080fd5b505af1158015610a3e573d6000803e3d6000fd5b50505050565b610a4c610ba4565b6067805460ff60a01b1916600160a01b831515908102919091179091556040517f9c9cc9a8d894f0f8e25eff967a8e37a5d1fe96444b43b2860b85923267dbba1890600090a250565b610a9d610ba4565b6001600160a01b038116610b195760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610386565b610b2281610c71565b50565b610b2d610ba4565b606580546001600160a01b0319166001600160a01b038316179055610b50610706565b610b6d57604051639589a27d60e01b815260040160405180910390fd5b6040516001600160a01b038216907f602cec4b1583b07d071161da5eb9589444d2459201e2fab7753dc941e9351c2190600090a250565b6033546001600160a01b031633146108475760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610386565b600054610100900460ff16610c695760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610386565b610847610cc3565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16610d2e5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610386565b61084733610c71565b6001600160a01b0381168114610b2257600080fd5b600060208284031215610d5e57600080fd5b8135610d6981610d37565b9392505050565b60008060408385031215610d8357600080fd5b8235610d8e81610d37565b91506020830135610d9e81610d37565b809150509250929050565b8015158114610b2257600080fd5b600060208284031215610dc957600080fd5b8135610d6981610da9565b600060208284031215610de657600080fd5b5051919050565b6000816000190483118215151615610e1557634e487b7160e01b600052601160045260246000fd5b500290565b600082610e3757634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215610e4e57600080fd5b8151610d6981610d37565b600060208284031215610e6b57600080fd5b8151610d6981610da956fea264697066735822122082d62f4dc40850f1be112988227dd451b8806bf8d754250ebbc5f11f10e084f864736f6c634300080c0033",
  "devdoc": {
    "author": "Prime",
    "kind": "dev",
    "methods": {
      "initialize(address,address)": {
        "params": {
          "_baseAssetChainlinkAdapter": "Chainlink aggregator for USD price of base token",
          "_poolHelper": "Pool helper contract - Uniswap/Balancer"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "PriceProvider Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "baseAssetChainlinkAdapter()": {
        "notice": "Chainlink aggregator for USD price of base token"
      },
      "decimals()": {
        "notice": "Returns decimals of price."
      },
      "getLpTokenAddress()": {
        "notice": "Returns lp token address."
      },
      "getLpTokenPrice()": {
        "notice": "Returns lp token price in ETH."
      },
      "getLpTokenPriceUsd()": {
        "notice": "Returns lp token price in USD."
      },
      "getTokenPrice()": {
        "notice": "Returns the latest price in eth."
      },
      "getTokenPriceUsd()": {
        "notice": "Returns the latest price in USD."
      },
      "initialize(address,address)": {
        "notice": "Initializer"
      },
      "oracle()": {
        "notice": "Selected PRNT Oracle"
      },
      "poolHelper()": {
        "notice": "Pool helper contract - Uniswap/Balancer"
      },
      "setAggregator(address)": {
        "notice": "Sets base token price aggregator."
      },
      "setOracle(address)": {
        "notice": "Sets new oracle."
      },
      "setPoolHelper(address)": {
        "notice": "Sets pool helper contract."
      },
      "setUsePool(bool)": {
        "notice": "Sets option to use pool."
      },
      "update()": {
        "notice": "Update oracles."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3621,
        "contract": "contracts/prime/oracles/PriceProvider.sol:PriceProvider",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 3624,
        "contract": "contracts/prime/oracles/PriceProvider.sol:PriceProvider",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4291,
        "contract": "contracts/prime/oracles/PriceProvider.sol:PriceProvider",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3493,
        "contract": "contracts/prime/oracles/PriceProvider.sol:PriceProvider",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 3613,
        "contract": "contracts/prime/oracles/PriceProvider.sol:PriceProvider",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 43718,
        "contract": "contracts/prime/oracles/PriceProvider.sol:PriceProvider",
        "label": "baseAssetChainlinkAdapter",
        "offset": 0,
        "slot": "101",
        "type": "t_contract(IChainlinkAdapter)16247"
      },
      {
        "astId": 43722,
        "contract": "contracts/prime/oracles/PriceProvider.sol:PriceProvider",
        "label": "poolHelper",
        "offset": 0,
        "slot": "102",
        "type": "t_contract(IPoolHelper)18185"
      },
      {
        "astId": 43726,
        "contract": "contracts/prime/oracles/PriceProvider.sol:PriceProvider",
        "label": "oracle",
        "offset": 0,
        "slot": "103",
        "type": "t_contract(IBaseOracle)16204"
      },
      {
        "astId": 43728,
        "contract": "contracts/prime/oracles/PriceProvider.sol:PriceProvider",
        "label": "usePool",
        "offset": 20,
        "slot": "103",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IBaseOracle)16204": {
        "encoding": "inplace",
        "label": "contract IBaseOracle",
        "numberOfBytes": "20"
      },
      "t_contract(IChainlinkAdapter)16247": {
        "encoding": "inplace",
        "label": "contract IChainlinkAdapter",
        "numberOfBytes": "20"
      },
      "t_contract(IPoolHelper)18185": {
        "encoding": "inplace",
        "label": "contract IPoolHelper",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}