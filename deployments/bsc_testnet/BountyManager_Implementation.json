{
  "address": "0x2A493e4FbAe4be2a4ad583057C53898b0CB1D754",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ActionTypeIndexOutOfBounds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AddressZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Ineligible",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidNumber",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSlippage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotWhitelisted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "QuoteFail",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_newVal",
          "type": "uint256"
        }
      ],
      "name": "BaseBountyUsdTargetUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "BountiesSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_bal",
          "type": "uint256"
        }
      ],
      "name": "BountyReserveEmpty",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_newVal",
          "type": "uint256"
        }
      ],
      "name": "HunterShareUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_newVal",
          "type": "uint256"
        }
      ],
      "name": "MaxBaseBountyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_minStakeAmount",
          "type": "uint256"
        }
      ],
      "name": "MinStakeAmountUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        }
      ],
      "name": "WhitelistActiveChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "_isActive",
          "type": "bool"
        }
      ],
      "name": "WhitelistUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "RATIO_DIVISOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "addAddressToWL",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseBountyUsdTarget",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bountyCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "changeWL",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chef",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_actionType",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "compounder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eligibilityDataProvider",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_execute",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_actionType",
          "type": "uint256"
        }
      ],
      "name": "executeBounty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "bounty",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "actionType",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBaseBounty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hunterShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_prnt",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mfd",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_chef",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceProvider",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_eligibilityDataProvider",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_compounder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_hunterShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_baseBountyUsdTarget",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxBaseBounty",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxBaseBounty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mfd",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minDLPBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "min",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minStakeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceProvider",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "prnt",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "quote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "bounty",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "actionType",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newVal",
          "type": "uint256"
        }
      ],
      "name": "setBaseBountyUsdTarget",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setBounties",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newVal",
          "type": "uint256"
        }
      ],
      "name": "setHunterShare",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newVal",
          "type": "uint256"
        }
      ],
      "name": "setMaxBaseBounty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minStakeAmount",
          "type": "uint256"
        }
      ],
      "name": "setMinStakeAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "whitelistActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x873ca13a293e5e095565d5d1af808787556d69bd1b59a5b53b210cf85fcdf861",
  "receipt": {
    "to": null,
    "from": "0xdE8023f05d831Fb7381486D041237ddEB06c1BA2",
    "contractAddress": "0x2A493e4FbAe4be2a4ad583057C53898b0CB1D754",
    "transactionIndex": 4,
    "gasUsed": "1948402",
    "logsBloom": "0x
    "blockHash": "0x1b0143e5f2d50fbb2d4670836b987c752080317ae5ebf5c8e3721d912d544fbe",
    "transactionHash": "0x873ca13a293e5e095565d5d1af808787556d69bd1b59a5b53b210cf85fcdf861",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 43440233,
        "transactionHash": "0x873ca13a293e5e095565d5d1af808787556d69bd1b59a5b53b210cf85fcdf861",
        "address": "0x2A493e4FbAe4be2a4ad583057C53898b0CB1D754",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 4,
        "blockHash": "0x1b0143e5f2d50fbb2d4670836b987c752080317ae5ebf5c8e3721d912d544fbe"
      }
    ],
    "blockNumber": 43440233,
    "cumulativeGasUsed": "2220394",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "1d544f96a00f94e7a887913a2bd4bf37",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ActionTypeIndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Ineligible\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidNumber\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSlippage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotWhitelisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QuoteFail\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_newVal\",\"type\":\"uint256\"}],\"name\":\"BaseBountyUsdTargetUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"BountiesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_bal\",\"type\":\"uint256\"}],\"name\":\"BountyReserveEmpty\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_newVal\",\"type\":\"uint256\"}],\"name\":\"HunterShareUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_newVal\",\"type\":\"uint256\"}],\"name\":\"MaxBaseBountyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_minStakeAmount\",\"type\":\"uint256\"}],\"name\":\"MinStakeAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"name\":\"WhitelistActiveChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"_isActive\",\"type\":\"bool\"}],\"name\":\"WhitelistUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"RATIO_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"addAddressToWL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseBountyUsdTarget\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bountyCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"changeWL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chef\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_actionType\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"compounder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eligibilityDataProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_execute\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_actionType\",\"type\":\"uint256\"}],\"name\":\"executeBounty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bounty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actionType\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBaseBounty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hunterShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_prnt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mfd\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_chef\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_eligibilityDataProvider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_compounder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_hunterShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_baseBountyUsdTarget\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxBaseBounty\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBaseBounty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mfd\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDLPBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prnt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bounty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actionType\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newVal\",\"type\":\"uint256\"}],\"name\":\"setBaseBountyUsdTarget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setBounties\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newVal\",\"type\":\"uint256\"}],\"name\":\"setHunterShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newVal\",\"type\":\"uint256\"}],\"name\":\"setMaxBaseBounty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minStakeAmount\",\"type\":\"uint256\"}],\"name\":\"setMinStakeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whitelistActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Prime Devs\",\"kind\":\"dev\",\"methods\":{\"addAddressToWL(address,bool)\":{\"params\":{\"status\":\"for whitelist\",\"user\":\"address\"}},\"changeWL(bool)\":{\"params\":{\"status\":\"New whitelist status\"}},\"claim(address,uint256)\":{\"params\":{\"_actionType\":\"which of the 3 bounty types (above) to run.\",\"_user\":\"address can be a fixed amt (Base Bounty) or dynamic amt based on rewards removed from target user during execution (ineligible revenue, autocompound fee)\"},\"returns\":{\"_0\":\"bounty in PRNT to be paid to Hunter (via vesting)\",\"_1\":\"actionType which bounty ran\"}},\"executeBounty(address,bool,uint256)\":{\"params\":{\"_actionType\":\"which of the 3 bounty types (above) to run.\",\"_execute\":\"whether to execute this txn, or just quote what its execution would return can be a fixed amt (Base Bounty) or dynamic amt based on rewards removed from target user during execution (ineligible revenue, autocompound fee)\",\"_user\":\"address\"},\"returns\":{\"actionType\":\"which bounty ran\",\"bounty\":\"in PRNT to be paid to Hunter (via vesting)\"}},\"getBaseBounty()\":{\"returns\":{\"_0\":\"bounty in PRNT\"}},\"initialize(address,address,address,address,address,address,address,uint256,uint256,uint256)\":{\"params\":{\"_baseBountyUsdTarget\":\"Base Bounty is paid in PRNT, will scale to match this USD target value\",\"_chef\":\"CIC, to query bounties for ineligible emissions\",\"_compounder\":\"Compounder address\",\"_eligibilityDataProvider\":\"Eligibility data provider\",\"_hunterShare\":\"% of reclaimed rewards to send to Hunter\",\"_maxBaseBounty\":\"cap the scaling above\",\"_mfd\":\"MFD, to send bounties as vesting PRNT to Hunter (user calling bounty)\",\"_priceProvider\":\"PriceProvider service, to get PRNT price for bounty quotes\",\"_prnt\":\"PRNT address\",\"_weth\":\"WETH address\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"quote(address)\":{\"params\":{\"_user\":\"address\"},\"returns\":{\"actionType\":\"which of the 3 bounty types (above) to run. _getAvailableBounty returns this based on priority (expired locks first, then inelig emissions, then autocompound)\",\"bounty\":\"amount of PRNT Hunter will recieve. can be a fixed amt (Base Bounty) or dynamic amt based on rewards removed from target user during execution (ineligible revenue, autocompound fee)\"}},\"recoverERC20(address,uint256)\":{\"params\":{\"tokenAddress\":\"Token address to recover\",\"tokenAmount\":\"Amount to recover\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setBaseBountyUsdTarget(uint256)\":{\"details\":\"Only owner can call this function.\",\"params\":{\"_newVal\":\"New USD value\"}},\"setBounties()\":{\"details\":\"Only owner can call this function.\"},\"setHunterShare(uint256)\":{\"details\":\"Only owner can call this function.\",\"params\":{\"_newVal\":\"New hunter share ratio\"}},\"setMaxBaseBounty(uint256)\":{\"details\":\"Only owner can call this function.\",\"params\":{\"_newVal\":\"Maximum base bounty\"}},\"setMinStakeAmount(uint256)\":{\"details\":\"Only owner can call this function.\",\"params\":{\"_minStakeAmount\":\"Minimum stake amount\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"BountyManager Contract\",\"version\":1},\"userdoc\":{\"events\":{\"Recovered(address,uint256)\":{\"notice\":\"Emitted when ERC20 token is recovered\"}},\"kind\":\"user\",\"methods\":{\"RATIO_DIVISOR()\":{\"notice\":\"Ratio Divisor\"},\"addAddressToWL(address,bool)\":{\"notice\":\"Add new address to whitelist.\"},\"changeWL(bool)\":{\"notice\":\"Update whitelist active status.\"},\"claim(address,uint256)\":{\"notice\":\"Execute a bounty.\"},\"executeBounty(address,bool,uint256)\":{\"notice\":\"Execute the most appropriate bounty on a user, check returned amount for slippage, calc amount going to Hunter, send to vesting.\"},\"getBaseBounty()\":{\"notice\":\"Return PRNT amount for Base Bounty. Base Bounty used to incentivize operations that don't generate their own reward to pay to Hunter.\"},\"initialize(address,address,address,address,address,address,address,uint256,uint256,uint256)\":{\"notice\":\"Initialize\"},\"minDLPBalance()\":{\"notice\":\"Minimum locked lp balance\"},\"pause()\":{\"notice\":\"Pause the bounty operations.\"},\"quote(address)\":{\"notice\":\"Given a user, return their bounty amount. uses staticcall to run same bounty aglo, but without execution\"},\"recoverERC20(address,uint256)\":{\"notice\":\"Recover ERC20 tokens from the contract.\"},\"setBaseBountyUsdTarget(uint256)\":{\"notice\":\"Sets target price of base bounty.\"},\"setBounties()\":{\"notice\":\"Set bounty operations.\"},\"setHunterShare(uint256)\":{\"notice\":\"Sets hunter's share ratio.\"},\"setMaxBaseBounty(uint256)\":{\"notice\":\"Updates maximum base bounty.\"},\"setMinStakeAmount(uint256)\":{\"notice\":\"Sets minimum stake amount.\"},\"unpause()\":{\"notice\":\"Unpause the bounty operations.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/prime/eligibility/BountyManager.sol\":\"BountyManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x359a1ab89b46b9aba7bcad3fb651924baf4893d15153049b9976b0fc9be1358e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xad32f6821f860555f9530902a65b54203a4f5db2117f4384ae47a124958078db\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"contracts/interfaces/IBountyManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\ninterface IBountyManager {\\n\\tfunction quote(address _param) external returns (uint256 bounty);\\n\\n\\tfunction claim(address _param) external returns (uint256 bounty);\\n\\n\\tfunction minDLPBalance() external view returns (uint256 amt);\\n\\n\\tfunction executeBounty(\\n\\t\\taddress _user,\\n\\t\\tbool _execute,\\n\\t\\tuint256 _actionType\\n\\t) external returns (uint256 bounty, uint256 actionType);\\n}\\n\",\"keccak256\":\"0x374f668f3eb846150cbf079517c0acd8a13d5a8e937f6719b7d745a0788a49fa\",\"license\":\"MIT\"},\"contracts/interfaces/IChefIncentivesController.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface IChefIncentivesController {\\n\\t/**\\n\\t * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n\\t * @param user The address of the user\\n\\t **/\\n\\tfunction handleActionBefore(address user) external;\\n\\n\\t/**\\n\\t * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n\\t * @param user The address of the user\\n\\t * @param userBalance The balance of the user of the asset in the lending pool\\n\\t * @param totalSupply The total supply of the asset in the lending pool\\n\\t **/\\n\\tfunction handleActionAfter(address user, uint256 userBalance, uint256 totalSupply) external;\\n\\n\\t/**\\n\\t * @dev Called by the locking contracts after locking or unlocking happens\\n\\t * @param user The address of the user\\n\\t **/\\n\\tfunction beforeLockUpdate(address user) external;\\n\\n\\t/**\\n\\t * @notice Hook for lock update.\\n\\t * @dev Called by the locking contracts after locking or unlocking happens\\n\\t */\\n\\tfunction afterLockUpdate(address _user) external;\\n\\n\\tfunction addPool(address _token, uint256 _allocPoint) external;\\n\\n\\tfunction claim(address _user, address[] calldata _tokens) external;\\n\\n\\tfunction setClaimReceiver(address _user, address _receiver) external;\\n\\n\\tfunction getRegisteredTokens() external view returns (address[] memory);\\n\\n\\tfunction disqualifyUser(address _user, address _hunter) external returns (uint256 bounty);\\n\\n\\tfunction bountyForUser(address _user) external view returns (uint256 bounty);\\n\\n\\tfunction allPendingRewards(address _user) external view returns (uint256 pending);\\n\\n\\tfunction claimAll(address _user) external;\\n\\n\\tfunction claimBounty(address _user, bool _execute) external returns (bool issueBaseBounty);\\n\\n\\tfunction setEligibilityExempt(address _address, bool _value) external;\\n}\\n\",\"keccak256\":\"0x3f44ee9291069ef7a3b09c70293e745db5fe53b4f1b5ccdf72c97d1aad0f7720\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/ICompounder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\ninterface ICompounder {\\n\\tfunction claimCompound(address _user, bool _execute, uint256 _slippage) external returns (uint256 tokensOut);\\n\\n\\tfunction viewPendingRewards(address user) external view returns (address[] memory tokens, uint256[] memory amts);\\n\\n\\tfunction estimateReturns(address _in, address _out, uint256 amtIn) external view returns (uint256 amtOut);\\n}\\n\",\"keccak256\":\"0x107bf6a0abe596c64ed432e61ea0349615ba6f7ef826f9823156b8d5a3561620\",\"license\":\"MIT\"},\"contracts/interfaces/IEligibilityDataProvider.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface IEligibilityDataProvider {\\n\\tfunction refresh(address user) external returns (bool currentEligibility);\\n\\n\\tfunction updatePrice() external;\\n\\n\\tfunction requiredEthValue(address user) external view returns (uint256 required);\\n\\n\\tfunction isEligibleForRewards(address _user) external view returns (bool isEligible);\\n\\n\\tfunction lastEligibleTime(address user) external view returns (uint256 lastEligibleTimestamp);\\n\\n\\tfunction lockedUsdValue(address user) external view returns (uint256);\\n\\n\\tfunction requiredUsdValue(address user) external view returns (uint256 required);\\n\\n\\tfunction lastEligibleStatus(address user) external view returns (bool);\\n\\n\\tfunction rewardEligibleAmount(address token) external view returns (uint256);\\n\\n\\tfunction setDqTime(address _user, uint256 _time) external;\\n\\n\\tfunction getDqTime(address _user) external view returns (uint256);\\n\\n\\tfunction autoprune() external returns (uint256 processed);\\n\\n\\tfunction requiredDepositRatio() external view returns (uint256);\\n\\n\\tfunction RATIO_DIVISOR() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x8ce465d9ef3bf4dff1413fc63746903164aad8e1bb444d71e0e4c1e2b8fdd12a\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IFeeDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"./LockedBalance.sol\\\";\\n\\ninterface IFeeDistribution {\\n\\tstruct RewardData {\\n\\t\\taddress token;\\n\\t\\tuint256 amount;\\n\\t}\\n\\n\\tfunction addReward(address rewardsToken) external;\\n\\n\\tfunction removeReward(address _rewardToken) external;\\n}\\n\",\"keccak256\":\"0x421b5d02ce20947dda76d10f1398c5c075cae789bd453b61935d9b2609c5ac48\",\"license\":\"MIT\"},\"contracts/interfaces/IMintableToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IMintableToken is IERC20 {\\n\\tfunction mint(address _receiver, uint256 _amount) external returns (bool);\\n\\n\\tfunction burn(uint256 _amount) external returns (bool);\\n\\n\\tfunction setMinter(address _minter) external returns (bool);\\n\\n\\tfunction priceProvider() external view returns (address);\\n}\\n\",\"keccak256\":\"0x095eacfa4ddae47eb3053bc93643d78a683b6006009ce949ea8addf76c886aec\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IMultiFeeDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"./LockedBalance.sol\\\";\\nimport \\\"./IFeeDistribution.sol\\\";\\nimport \\\"./IMintableToken.sol\\\";\\n\\ninterface IMultiFeeDistribution is IFeeDistribution {\\n\\tfunction exit(bool claimRewards) external;\\n\\n\\tfunction stake(uint256 amount, address onBehalfOf, uint256 typeIndex) external;\\n\\n\\tfunction prntToken() external view returns (IMintableToken);\\n\\n\\tfunction getPriceProvider() external view returns (address);\\n\\n\\tfunction lockInfo(address user) external view returns (LockedBalance[] memory);\\n\\n\\tfunction autocompoundEnabled(address user) external view returns (bool);\\n\\n\\tfunction defaultLockIndex(address _user) external view returns (uint256);\\n\\n\\tfunction autoRelockDisabled(address user) external view returns (bool);\\n\\n\\tfunction totalBalance(address user) external view returns (uint256);\\n\\n\\tfunction lockedBalance(address user) external view returns (uint256);\\n\\n\\tfunction lockedBalances(\\n\\t\\taddress user\\n\\t) external view returns (uint256, uint256, uint256, uint256, LockedBalance[] memory);\\n\\n\\tfunction getBalances(address _user) external view returns (Balances memory);\\n\\n\\tfunction zapVestingToLp(address _address) external returns (uint256);\\n\\n\\tfunction claimableRewards(address account) external view returns (IFeeDistribution.RewardData[] memory rewards);\\n\\n\\tfunction setDefaultRelockTypeIndex(uint256 _index) external;\\n\\n\\tfunction daoTreasury() external view returns (address);\\n\\n\\tfunction stakingToken() external view returns (address);\\n\\n\\tfunction userSlippage(address) external view returns (uint256);\\n\\n\\tfunction claimFromConverter(address) external;\\n\\n\\tfunction vestTokens(address user, uint256 amount, bool withPenalty) external;\\n}\\n\\ninterface IMFDPlus is IMultiFeeDistribution {\\n\\tfunction getLastClaimTime(address _user) external returns (uint256);\\n\\n\\tfunction claimBounty(address _user, bool _execute) external returns (bool issueBaseBounty);\\n\\n\\tfunction claimCompound(address _user, bool _execute, uint256 _slippage) external returns (uint256 bountyAmt);\\n\\n\\tfunction setAutocompound(bool _newVal) external;\\n\\n\\tfunction getAutocompoundEnabled(address _user) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x6eae75bc31ca20b94f425a2ba2aede758baf09fc2ae38f630a38abf4ff15a72c\",\"license\":\"MIT\"},\"contracts/interfaces/IPriceProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\ninterface IPriceProvider {\\n\\tfunction getTokenPrice() external view returns (uint256);\\n\\n\\tfunction getTokenPriceUsd() external view returns (uint256);\\n\\n\\tfunction getLpTokenPrice() external view returns (uint256);\\n\\n\\tfunction getLpTokenPriceUsd() external view returns (uint256);\\n\\n\\tfunction decimals() external view returns (uint256);\\n\\n\\tfunction update() external;\\n\\n\\tfunction baseAssetChainlinkAdapter() external view returns (address);\\n}\\n\",\"keccak256\":\"0x8f5da67830c8d8dce0eebeb5626c9e1c2ed86132a8ae01e1fc6aa48cb60ae221\",\"license\":\"MIT\"},\"contracts/interfaces/LockedBalance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\nstruct LockedBalance {\\n\\tuint256 amount;\\n\\tuint256 unlockTime;\\n\\tuint256 multiplier;\\n\\tuint256 duration;\\n}\\n\\nstruct EarnedBalance {\\n\\tuint256 amount;\\n\\tuint256 unlockTime;\\n\\tuint256 penalty;\\n}\\n\\nstruct Reward {\\n\\tuint256 periodFinish;\\n\\tuint256 rewardPerSecond;\\n\\tuint256 lastUpdateTime;\\n\\tuint256 rewardPerTokenStored;\\n\\t// tracks already-added balances to handle accrued interest in aToken rewards\\n\\t// for the stakingToken this value is unused and will always be 0\\n\\tuint256 balance;\\n}\\n\\nstruct Balances {\\n\\tuint256 total; // sum of earnings and lockings; no use when LP and PRNT is different\\n\\tuint256 unlocked; // PRNT token\\n\\tuint256 locked; // LP token or PRNT token\\n\\tuint256 lockedWithMultiplier; // Multiplied locked amount\\n\\tuint256 earned; // PRNT token\\n}\\n\",\"keccak256\":\"0x6dbc04232605f1510a1db1b9c9467bb99cda33ac2335775e5faae2cc7d4eef07\",\"license\":\"MIT\"},\"contracts/prime/eligibility/BountyManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {PausableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport {RecoverERC20} from \\\"../libraries/RecoverERC20.sol\\\";\\nimport {IMFDPlus} from \\\"../../interfaces/IMultiFeeDistribution.sol\\\";\\nimport {IChefIncentivesController} from \\\"../../interfaces/IChefIncentivesController.sol\\\";\\nimport {IPriceProvider} from \\\"../../interfaces/IPriceProvider.sol\\\";\\nimport {IEligibilityDataProvider} from \\\"../../interfaces/IEligibilityDataProvider.sol\\\";\\nimport {ICompounder} from \\\"../../interfaces/ICompounder.sol\\\";\\nimport {IBountyManager} from \\\"../../interfaces/IBountyManager.sol\\\";\\n\\n/// @title BountyManager Contract\\n/// @author Prime Devs\\ncontract BountyManager is Initializable, OwnableUpgradeable, PausableUpgradeable, RecoverERC20 {\\n\\tusing SafeERC20 for IERC20;\\n\\n\\taddress public prnt;\\n\\taddress public weth;\\n\\taddress public mfd;\\n\\taddress public chef;\\n\\taddress public priceProvider;\\n\\taddress public eligibilityDataProvider;\\n\\taddress public compounder;\\n\\tuint256 public hunterShare;\\n\\tuint256 public baseBountyUsdTarget; // decimals 18\\n\\tuint256 public maxBaseBounty;\\n\\tuint256 public bountyCount;\\n\\tuint256 public minStakeAmount;\\n\\n\\t/// @notice Ratio Divisor\\n\\tuint256 public constant RATIO_DIVISOR = 10000;\\n\\n\\t/// @notice The users specified slippage value for auto-compounding will be used \\n\\tuint256 internal constant DEFAULT_USERS_SLIPPAGE = 0;\\n\\n\\t// Array of available Bounty functions to run. See _getMfdBounty, _getChefBounty, etc.\\n\\tmapping(uint256 => function(address, bool) returns (address, uint256, bool)) private bounties;\\n\\n\\tmapping(address => bool) public whitelist;\\n\\tbool public whitelistActive;\\n\\n\\tmodifier isWhitelisted() {\\n\\t\\tif (whitelistActive) {\\n\\t\\t\\tif (!whitelist[msg.sender] && msg.sender != address(this)) revert NotWhitelisted();\\n\\t\\t}\\n\\t\\t_;\\n\\t}\\n\\n\\tevent MinStakeAmountUpdated(uint256 indexed _minStakeAmount);\\n\\tevent BaseBountyUsdTargetUpdated(uint256 indexed _newVal);\\n\\tevent HunterShareUpdated(uint256 indexed _newVal);\\n\\tevent MaxBaseBountyUpdated(uint256 indexed _newVal);\\n\\tevent BountiesSet();\\n\\tevent BountyReserveEmpty(uint256 indexed _bal);\\n\\tevent WhitelistUpdated(address indexed _user, bool indexed _isActive);\\n\\tevent WhitelistActiveChanged(bool indexed isActive);\\n\\n\\terror AddressZero();\\n\\terror InvalidNumber();\\n\\terror QuoteFail();\\n\\terror Ineligible();\\n\\terror InvalidSlippage();\\n\\terror ActionTypeIndexOutOfBounds();\\n\\terror NotWhitelisted();\\n\\n\\tconstructor() {\\n\\t\\t_disableInitializers();\\n\\t}\\n\\n\\t/**\\n\\t * @notice Initialize\\n\\t * @param _prnt PRNT address\\n\\t * @param _weth WETH address\\n\\t * @param _mfd MFD, to send bounties as vesting PRNT to Hunter (user calling bounty)\\n\\t * @param _chef CIC, to query bounties for ineligible emissions\\n\\t * @param _priceProvider PriceProvider service, to get PRNT price for bounty quotes\\n\\t * @param _eligibilityDataProvider Eligibility data provider\\n\\t * @param _compounder Compounder address\\n\\t * @param _hunterShare % of reclaimed rewards to send to Hunter\\n\\t * @param _baseBountyUsdTarget Base Bounty is paid in PRNT, will scale to match this USD target value\\n\\t * @param _maxBaseBounty cap the scaling above\\n\\t */\\n\\tfunction initialize(\\n\\t\\taddress _prnt,\\n\\t\\taddress _weth,\\n\\t\\taddress _mfd,\\n\\t\\taddress _chef,\\n\\t\\taddress _priceProvider,\\n\\t\\taddress _eligibilityDataProvider,\\n\\t\\taddress _compounder,\\n\\t\\tuint256 _hunterShare,\\n\\t\\tuint256 _baseBountyUsdTarget,\\n\\t\\tuint256 _maxBaseBounty\\n\\t) external initializer {\\n\\t\\tif (_prnt == address(0)) revert AddressZero();\\n\\t\\tif (_weth == address(0)) revert AddressZero();\\n\\t\\tif (_mfd == address(0)) revert AddressZero();\\n\\t\\tif (_chef == address(0)) revert AddressZero();\\n\\t\\tif (_priceProvider == address(0)) revert AddressZero();\\n\\t\\tif (_eligibilityDataProvider == address(0)) revert AddressZero();\\n\\t\\tif (_compounder == address(0)) revert AddressZero();\\n\\t\\tif (_hunterShare > RATIO_DIVISOR) revert InvalidNumber();\\n\\t\\tif (_baseBountyUsdTarget == 0) revert InvalidNumber();\\n\\t\\tif (_maxBaseBounty == 0) revert InvalidNumber();\\n\\n\\t\\tprnt = _prnt;\\n\\t\\tweth = _weth;\\n\\t\\tmfd = _mfd;\\n\\t\\tchef = _chef;\\n\\t\\tpriceProvider = _priceProvider;\\n\\t\\teligibilityDataProvider = _eligibilityDataProvider;\\n\\t\\tcompounder = _compounder;\\n\\n\\t\\thunterShare = _hunterShare;\\n\\t\\tbaseBountyUsdTarget = _baseBountyUsdTarget;\\n\\t\\tmaxBaseBounty = _maxBaseBounty;\\n\\n\\t\\tbounties[1] = _getMfdBounty;\\n\\t\\tbounties[2] = _getChefBounty;\\n\\t\\tbounties[3] = _getAutoCompoundBounty;\\n\\t\\tbountyCount = 3;\\n\\n\\t\\t__Ownable_init();\\n\\t\\t__Pausable_init();\\n\\t}\\n\\n\\t/**\\n\\t * @notice Given a user, return their bounty amount. uses staticcall to run same bounty aglo, but without execution\\n\\t * @param _user address\\n\\t * @return bounty amount of PRNT Hunter will recieve.\\n\\t * can be a fixed amt (Base Bounty) or dynamic amt based on rewards removed from target user during execution (ineligible revenue, autocompound fee)\\n\\t * @return actionType which of the 3 bounty types (above) to run.\\n\\t * _getAvailableBounty returns this based on priority (expired locks first, then inelig emissions, then autocompound)\\n\\t */\\n\\tfunction quote(address _user) public view returns (uint256 bounty, uint256 actionType) {\\n\\t\\t(bool success, bytes memory data) = address(this).staticcall(\\n\\t\\t\\tabi.encodeCall(IBountyManager.executeBounty, (_user, false, 0))\\n\\t\\t);\\n\\t\\tif (!success) revert QuoteFail();\\n\\n\\t\\t(bounty, actionType) = abi.decode(data, (uint256, uint256));\\n\\t}\\n\\n\\t/**\\n\\t * @notice Execute a bounty.\\n\\t * @param _user address\\n\\t * can be a fixed amt (Base Bounty) or dynamic amt based on rewards removed from target user during execution (ineligible revenue, autocompound fee)\\n\\t * @param _actionType which of the 3 bounty types (above) to run.\\n\\t * @return bounty in PRNT to be paid to Hunter (via vesting)\\n\\t * @return actionType which bounty ran\\n\\t */\\n\\tfunction claim(address _user, uint256 _actionType) public returns (uint256, uint256) {\\n\\t\\treturn executeBounty(_user, true, _actionType);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Execute the most appropriate bounty on a user, check returned amount for slippage, calc amount going to Hunter, send to vesting.\\n\\t * @param _user address\\n\\t * @param _execute whether to execute this txn, or just quote what its execution would return\\n\\t * can be a fixed amt (Base Bounty) or dynamic amt based on rewards removed from target user during execution (ineligible revenue, autocompound fee)\\n\\t * @param _actionType which of the 3 bounty types (above) to run.\\n\\t * @return bounty in PRNT to be paid to Hunter (via vesting)\\n\\t * @return actionType which bounty ran\\n\\t */\\n\\tfunction executeBounty(\\n\\t\\taddress _user,\\n\\t\\tbool _execute,\\n\\t\\tuint256 _actionType\\n\\t) public whenNotPaused isWhitelisted returns (uint256 bounty, uint256 actionType) {\\n\\t\\tif (_execute && msg.sender != address(this)) {\\n\\t\\t\\tif (!_canBountyHunt(msg.sender)) revert Ineligible();\\n\\t\\t}\\n\\t\\tuint256 totalBounty;\\n\\t\\tbool issueBaseBounty;\\n\\t\\taddress incentivizer;\\n\\n\\t\\t(incentivizer, totalBounty, issueBaseBounty, actionType) = _getAvailableBounty(_user, _execute, _actionType);\\n\\t\\tif (issueBaseBounty) {\\n\\t\\t\\tbounty = getBaseBounty();\\n\\t\\t} else {\\n\\t\\t\\tif (totalBounty != 0) {\\n\\t\\t\\t\\tbounty = (totalBounty * hunterShare) / RATIO_DIVISOR;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif (_execute && bounty != 0) {\\n\\t\\t\\tif (!issueBaseBounty) {\\n\\t\\t\\t\\tIERC20(prnt).safeTransferFrom(incentivizer, address(this), totalBounty);\\n\\t\\t\\t}\\n\\t\\t\\tbounty = _sendBounty(msg.sender, bounty);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _canBountyHunt(address _user) internal view returns (bool) {\\n\\t\\t(, , uint256 lockedLP, , ) = IMFDPlus(mfd).lockedBalances(_user);\\n\\t\\tbool isEmissionsEligible = IEligibilityDataProvider(eligibilityDataProvider).isEligibleForRewards(_user);\\n\\t\\treturn lockedLP >= minDLPBalance() && isEmissionsEligible;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Given a user and actionType, execute that bounty on either CIC or MFD or Compounder.\\n\\t * @param _user address\\n\\t * @param _execute whether to execute this txn, or just quote what its execution would return\\n\\t * @param _actionTypeIndex, which of the 3 bounty types (above) to run.\\n\\t * @return incentivizer the contract that had a bounty operation performed for it.\\n\\t * Either CIC (to remove ineligible user from emission pool, or MFD to remove expired locks)\\n\\t * @return totalBounty raw amount of PRNT returned from Incentivizer. Hunter % will be deducted from this.\\n\\t * @return issueBaseBounty whether Incentivizer will pay bounty from its own PRNT reserve, or from this contracts PRNT reserve\\n\\t * @return actionType the action type index executed\\n\\t */\\n\\tfunction _getAvailableBounty(\\n\\t\\taddress _user,\\n\\t\\tbool _execute,\\n\\t\\tuint256 _actionTypeIndex\\n\\t) internal returns (address incentivizer, uint256 totalBounty, bool issueBaseBounty, uint256 actionType) {\\n\\t\\tif (_actionTypeIndex > bountyCount) revert ActionTypeIndexOutOfBounds();\\n\\t\\tif (_actionTypeIndex != 0) {\\n\\t\\t\\t// execute bounty w/ given params\\n\\t\\t\\t(incentivizer, totalBounty, issueBaseBounty) = bounties[_actionTypeIndex](_user, _execute);\\n\\t\\t\\tactionType = _actionTypeIndex;\\n\\t\\t} else {\\n\\t\\t\\tfor (uint256 i = 1; i <= bountyCount; ) {\\n\\t\\t\\t\\t(incentivizer, totalBounty, issueBaseBounty) = bounties[i](_user, _execute);\\n\\t\\t\\t\\tif (totalBounty != 0 || issueBaseBounty) {\\n\\t\\t\\t\\t\\tactionType = i;\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tunchecked {\\n\\t\\t\\t\\t\\ti++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice call MFDPlus.claimBounty()\\n\\t * @param _user address\\n\\t * @param _execute whether to execute this txn, or just quote what its execution would return\\n\\t * @return incentivizer in this case MFD\\n\\t * @return totalBounty PRNT to pay for this _user's bounty execution\\n\\t * @return issueBaseBounty false when !autorelock because they will have rewards removed from their ineligible time after locks expired\\n\\t */\\n\\tfunction _getMfdBounty(\\n\\t\\taddress _user,\\n\\t\\tbool _execute\\n\\t) internal returns (address incentivizer, uint256, bool issueBaseBounty) {\\n\\t\\ttry IMFDPlus(mfd).claimBounty(_user, _execute) returns (bool issueBaseBounty_) {\\n\\t\\t\\tissueBaseBounty = issueBaseBounty_;\\n\\t\\t} catch {\\n\\t\\t\\tissueBaseBounty = false;\\n\\t\\t}\\n\\t\\tincentivizer = mfd;\\n\\t\\treturn (incentivizer, 0, issueBaseBounty);\\n\\t}\\n\\n\\t/**\\n\\t * @notice call CIC.claimBounty()\\n\\t * @param _user address\\n\\t * @param _execute whether to execute this txn, or just quote what its execution would return\\n\\t * @return incentivizer in this case CIC\\n\\t * @return totalBounty PRNT to pay for this _user's bounty execution\\n\\t * @return issueBaseBounty will be true\\n\\t */\\n\\tfunction _getChefBounty(\\n\\t\\taddress _user,\\n\\t\\tbool _execute\\n\\t) internal returns (address incentivizer, uint256, bool issueBaseBounty) {\\n\\t\\tissueBaseBounty = IChefIncentivesController(chef).claimBounty(_user, _execute);\\n\\t\\tincentivizer = chef;\\n\\t\\treturn (incentivizer, 0, issueBaseBounty);\\n\\t}\\n\\n\\t/**\\n\\t * @notice call Compounder.claimCompound(). compound pending rewards for _user into locked LP\\n\\t * @param _user address\\n\\t * @param _execute whether to execute this txn, or just quote what its execution would return\\n\\t * @return incentivizer is the Compounder\\n\\t * @return totalBounty PRNT to pay for this _user's bounty execution. paid from Autocompound fee\\n\\t * @return issueBaseBounty will be false, will vary based on autocompound fee\\n\\t */\\n\\tfunction _getAutoCompoundBounty(\\n\\t\\taddress _user,\\n\\t\\tbool _execute\\n\\t) internal returns (address incentivizer, uint256 totalBounty, bool issueBaseBounty) {\\n\\t\\t(totalBounty) = ICompounder(compounder).claimCompound(_user, _execute, DEFAULT_USERS_SLIPPAGE);\\n\\t\\tissueBaseBounty = false;\\n\\t\\tincentivizer = compounder;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Vest a bounty in MFD for successful bounty by Hunter\\n\\t * @param _to Hunter address\\n\\t * @param _amount of PRNT\\n\\t * @return amt added to vesting\\n\\t */\\n\\tfunction _sendBounty(address _to, uint256 _amount) internal returns (uint256) {\\n\\t\\tuint256 bountyReserve = IERC20(prnt).balanceOf(address(this));\\n\\t\\tif (_amount > bountyReserve) {\\n\\t\\t\\tIERC20(prnt).safeTransfer(address(mfd), bountyReserve);\\n\\t\\t\\tIMFDPlus(mfd).vestTokens(_to, bountyReserve, true);\\n\\t\\t\\temit BountyReserveEmpty(bountyReserve);\\n\\t\\t\\t_pause();\\n\\t\\t\\treturn bountyReserve;\\n\\t\\t} else {\\n\\t\\t\\tIERC20(prnt).safeTransfer(address(mfd), _amount);\\n\\t\\t\\tIMFDPlus(mfd).vestTokens(_to, _amount, true);\\n\\t\\t\\treturn _amount;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Return PRNT amount for Base Bounty.\\n\\t * Base Bounty used to incentivize operations that don't generate their own reward to pay to Hunter.\\n\\t * @return bounty in PRNT\\n\\t */\\n\\tfunction getBaseBounty() public view whenNotPaused returns (uint256) {\\n\\t\\tuint256 prntPrice = IPriceProvider(priceProvider).getTokenPriceUsd();\\n\\t\\tuint256 bounty = (baseBountyUsdTarget * 1e8) / prntPrice;\\n\\t\\treturn bounty > maxBaseBounty ? maxBaseBounty : bounty;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Minimum locked lp balance\\n\\t */\\n\\tfunction minDLPBalance() public view returns (uint256 min) {\\n\\t\\tuint256 lpTokenPrice = IPriceProvider(priceProvider).getLpTokenPriceUsd();\\n\\t\\tmin = (minStakeAmount * 1e8) / lpTokenPrice;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Sets minimum stake amount.\\n\\t * @dev Only owner can call this function.\\n\\t * @param _minStakeAmount Minimum stake amount\\n\\t */\\n\\tfunction setMinStakeAmount(uint256 _minStakeAmount) external onlyOwner {\\n\\t\\tminStakeAmount = _minStakeAmount;\\n\\t\\temit MinStakeAmountUpdated(_minStakeAmount);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Sets target price of base bounty.\\n\\t * @dev Only owner can call this function.\\n\\t * @param _newVal New USD value\\n\\t */\\n\\tfunction setBaseBountyUsdTarget(uint256 _newVal) external onlyOwner {\\n\\t\\tbaseBountyUsdTarget = _newVal;\\n\\t\\temit BaseBountyUsdTargetUpdated(_newVal);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Sets hunter's share ratio.\\n\\t * @dev Only owner can call this function.\\n\\t * @param _newVal New hunter share ratio\\n\\t */\\n\\tfunction setHunterShare(uint256 _newVal) external onlyOwner {\\n\\t\\tif (_newVal > RATIO_DIVISOR) revert InvalidNumber();\\n\\t\\thunterShare = _newVal;\\n\\t\\temit HunterShareUpdated(_newVal);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Updates maximum base bounty.\\n\\t * @dev Only owner can call this function.\\n\\t * @param _newVal Maximum base bounty\\n\\t */\\n\\tfunction setMaxBaseBounty(uint256 _newVal) external onlyOwner {\\n\\t\\tmaxBaseBounty = _newVal;\\n\\t\\temit MaxBaseBountyUpdated(_newVal);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Set bounty operations.\\n\\t * @dev Only owner can call this function.\\n\\t */\\n\\tfunction setBounties() external onlyOwner {\\n\\t\\tbounties[1] = _getMfdBounty;\\n\\t\\tbounties[2] = _getChefBounty;\\n\\t\\tbounties[3] = _getAutoCompoundBounty;\\n\\t\\temit BountiesSet();\\n\\t}\\n\\n\\t/**\\n\\t * @notice Recover ERC20 tokens from the contract.\\n\\t * @param tokenAddress Token address to recover\\n\\t * @param tokenAmount Amount to recover\\n\\t */\\n\\tfunction recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyOwner {\\n\\t\\t_recoverERC20(tokenAddress, tokenAmount);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Add new address to whitelist.\\n\\t * @param user address\\n\\t * @param status for whitelist\\n\\t */\\n\\tfunction addAddressToWL(address user, bool status) external onlyOwner {\\n\\t\\twhitelist[user] = status;\\n\\t\\temit WhitelistUpdated(user, status);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Update whitelist active status.\\n\\t * @param status New whitelist status\\n\\t */\\n\\tfunction changeWL(bool status) external onlyOwner {\\n\\t\\twhitelistActive = status;\\n\\t\\temit WhitelistActiveChanged(status);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Pause the bounty operations.\\n\\t */\\n\\tfunction pause() public onlyOwner {\\n\\t\\t_pause();\\n\\t}\\n\\n\\t/**\\n\\t * @notice Unpause the bounty operations.\\n\\t */\\n\\tfunction unpause() public onlyOwner {\\n\\t\\t_unpause();\\n\\t}\\n}\\n\",\"keccak256\":\"0xf9b74b1ac476c86114b9bf2d8cf4e94e08c342d67b08fac67a90873fd0daa24b\",\"license\":\"MIT\"},\"contracts/prime/libraries/RecoverERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/// @title RecoverERC20 contract\\n/// @author Prime Devs\\n/// @dev All function calls are currently implemented without side effects\\ncontract RecoverERC20 {\\n\\tusing SafeERC20 for IERC20;\\n\\n\\t/// @notice Emitted when ERC20 token is recovered\\n\\tevent Recovered(address indexed token, uint256 amount);\\n\\n\\t/**\\n\\t * @notice Added to support recovering LP Rewards from other systems such as BAL to be distributed to holders\\n\\t */\\n\\tfunction _recoverERC20(address tokenAddress, uint256 tokenAmount) internal {\\n\\t\\tIERC20(tokenAddress).safeTransfer(msg.sender, tokenAmount);\\n\\t\\temit Recovered(tokenAddress, tokenAmount);\\n\\t}\\n}\\n\",\"keccak256\":\"0x722c49abbca1b04a363084d729efbf41aa6ac01bff477c39b754e22a10e698df\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001961001e565b6100dd565b600054610100900460ff161561008a5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff908116146100db576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6121e280620000ed6000396000f3fe608060405234801561001057600080fd5b50600436106102415760003560e01c80638456cb5911610145578063d1025c0c116100bd578063e011b2891161008c578063f188768411610071578063f188768414610484578063f2fde38b1461048d578063fa2cc3c0146104a057600080fd5b8063e011b2891461045e578063eb4af0451461047157600080fd5b8063d1025c0c14610431578063d4743bae1461043a578063d8c0e2531461044d578063d9cdd5131461045657600080fd5b8063aad3ec9611610114578063b200e2c8116100f9578063b200e2c814610403578063b888879e14610416578063c0d02c511461042957600080fd5b8063aad3ec96146103dd578063b0c634ee146103f057600080fd5b80638456cb591461038e5780638980f11f146103965780638da5cb5b146103a95780639b19251a146103ba57600080fd5b80633e362c96116101d85780635c975abb116101a75780636a7e9f331161018c5780636a7e9f331461036a578063715018a61461037357806376e82e8b1461037b57600080fd5b80635c975abb1461034c5780635ebd4f9f1461035757600080fd5b80633e362c96146103155780633f4ba83a1461031e5780633fc8cef314610326578063464cea3d1461033957600080fd5b80631a2baad6116102145780631a2baad6146102b85780631fc8bc5d146102ce5780632a023387146102f957806339bd5ff51461030257600080fd5b8063015d87611461024657806302ce58131461025b5780630974f94c1461027d5780630b39ed4714610290575b600080fd5b610259610254366004611d32565b6104b3565b005b60a5546102689060ff1681565b60405190151581526020015b60405180910390f35b61025961028b366004611d67565b6104ee565b6102a361029e366004611e0c565b6108d3565b60408051928352602083019190915201610274565b6102c0610a00565b604051908152602001610274565b609a546102e1906001600160a01b031681565b6040516001600160a01b039091168152602001610274565b6102c0609e5481565b6097546102e1906001600160a01b031681565b6102c060a15481565b610259610ace565b6098546102e1906001600160a01b031681565b610259610347366004611e3c565b610ae0565b60655460ff16610268565b610259610365366004611d32565b610b3c565b6102c061271081565b610259610b9a565b609c546102e1906001600160a01b031681565b610259610bac565b6102596103a4366004611e73565b610bbc565b6033546001600160a01b03166102e1565b6102686103c8366004611e0c565b60a46020526000908152604090205460ff1681565b6102a36103eb366004611e73565b610bd2565b6099546102e1906001600160a01b031681565b610259610411366004611d32565b610bec565b609b546102e1906001600160a01b031681565b610259610c27565b6102c0609f5481565b610259610448366004611e9d565b610d07565b6102c060a05481565b6102c0610d4c565b6102a361046c366004611eba565b610deb565b61025961047f366004611d32565b610f41565b6102c060a25481565b61025961049b366004611e0c565b610f7c565b609d546102e1906001600160a01b031681565b6104bb61100c565b60a081905560405181907fe63c291a066613fe10359993ab33123d8c5985f14ae0ccdfd066c63d537e229690600090a250565b600054610100900460ff161580801561050e5750600054600160ff909116105b806105285750303b158015610528575060005460ff166001145b61059f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b6000805460ff1916600117905580156105c2576000805461ff0019166101001790555b6001600160a01b038b166105e957604051639fabe1c160e01b815260040160405180910390fd5b6001600160a01b038a1661061057604051639fabe1c160e01b815260040160405180910390fd5b6001600160a01b03891661063757604051639fabe1c160e01b815260040160405180910390fd5b6001600160a01b03881661065e57604051639fabe1c160e01b815260040160405180910390fd5b6001600160a01b03871661068557604051639fabe1c160e01b815260040160405180910390fd5b6001600160a01b0386166106ac57604051639fabe1c160e01b815260040160405180910390fd5b6001600160a01b0385166106d357604051639fabe1c160e01b815260040160405180910390fd5b6127108411156106f6576040516374cbd35f60e01b815260040160405180910390fd5b82610714576040516374cbd35f60e01b815260040160405180910390fd5b81610732576040516374cbd35f60e01b815260040160405180910390fd5b6097805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b038e8116919091179092556098805482168d84161790556099805482168c8416179055609a805482168b8416179055609b805482168a8416179055609c80548216898416179055609d8054909116918716919091179055609e849055609f83905560a082905560a36020527fc3869149e653ab70ab3abed8edc49ed99ccd0c8cf7ca81486b7adbd034773b10805467ffffffffffffffff1990811661106667ffffffffffffffff908116919091179092557fe262b42e4ca35e2f1e405b90c91327b65c89bdbf5dd51dedc3459002050f6b7b805482166111058416179055600360008190527fe9af58d115897398a1f35176114f462ebaa379402284755e74d53e3847c6a970805490921661119e90931692909217905560a155610878611257565b6108806112ca565b80156108c6576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050505050565b6040516001600160a01b03821660248201526000604482018190526064820181905290819081908190309060840160408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fe011b28900000000000000000000000000000000000000000000000000000000179052516109649190611f25565b600060405180830381855afa9150503d806000811461099f576040519150601f19603f3d011682016040523d82523d6000602084013e6109a4565b606091505b5091509150816109e0576040517f59ed39fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b808060200190518101906109f49190611f41565b90969095509350505050565b6000610a0a61133d565b609b54604080517f6d2ed18400000000000000000000000000000000000000000000000000000000815290516000926001600160a01b031691636d2ed1849160048083019260209291908290030181865afa158015610a6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a919190611f65565b9050600081609f546305f5e100610aa89190611f7e565b610ab29190611fab565b905060a0548111610ac35780610ac7565b60a0545b9250505090565b610ad661100c565b610ade611390565b565b610ae861100c565b6001600160a01b038216600081815260a46020526040808220805460ff191685151590811790915590519092917ff93f9a76c1bf3444d22400a00cb9fe990e6abe9dbb333fda48859cfee864543d91a35050565b610b4461100c565b612710811115610b67576040516374cbd35f60e01b815260040160405180910390fd5b609e81905560405181907fc6d3d93e80290ad8687918eb1cd28293fa9e658800d205f09a6d73d2d5e0fbdf90600090a250565b610ba261100c565b610ade60006113e2565b610bb461100c565b610ade611441565b610bc461100c565b610bce828261147e565b5050565b600080610be184600185610deb565b915091509250929050565b610bf461100c565b609f81905560405181907f27fed2da20a195ee831c4e78ce2bd0cfc4be23b636e8820121f147336084971e90600090a250565b610c2f61100c565b60a36020527fc3869149e653ab70ab3abed8edc49ed99ccd0c8cf7ca81486b7adbd034773b10805467ffffffffffffffff611066811667ffffffffffffffff19928316179092557fe262b42e4ca35e2f1e405b90c91327b65c89bdbf5dd51dedc3459002050f6b7b80546111058416908316179055600360009081527fe9af58d115897398a1f35176114f462ebaa379402284755e74d53e3847c6a970805461119e909416939092169290921790556040517ff839db0816cdb37939761d34b799f5b60282327aa12bc28d2fb4f5a511893cc39190a1565b610d0f61100c565b60a5805460ff19168215159081179091556040517f9c3f345b91941b4513c16d31601085e204abcc7df3ded47d446a78268da64b0490600090a250565b600080609b60009054906101000a90046001600160a01b03166001600160a01b0316636e9a05c56040518163ffffffff1660e01b8152600401602060405180830381865afa158015610da2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc69190611f65565b90508060a2546305f5e100610ddb9190611f7e565b610de59190611fab565b91505090565b600080610df661133d565b60a55460ff1615610e585733600090815260a4602052604090205460ff16158015610e215750333014155b15610e58576040517f584a793800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b838015610e655750333014155b15610ea957610e73336114d9565b610ea9576040517f3cb9724000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000806000610eb9888888611616565b9650909450925090508115610ed757610ed0610a00565b9450610efb565b8215610efb57612710609e5484610eee9190611f7e565b610ef89190611fab565b94505b868015610f0757508415155b15610f365781610f2957609754610f29906001600160a01b03168230866116f7565b610f3333866117ae565b94505b505050935093915050565b610f4961100c565b60a281905560405181907f8448c02797b448f4946bc25b3bf925e5556d1df822c944da701c54bab8a3162f90600090a250565b610f8461100c565b6001600160a01b0381166110005760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610596565b611009816113e2565b50565b6033546001600160a01b03163314610ade5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610596565b609954604051637ab8955d60e01b81526001600160a01b03848116600483015283151560248301526000928392839290911690637ab8955d906044016020604051808303816000875af19250505080156110dd575060408051601f3d908101601f191682019092526110da91810190611fcd565b60015b6110e9575060006110ec565b90505b6099546001600160a01b03169250600091509250925092565b609a54604051637ab8955d60e01b81526001600160a01b03848116600483015283151560248301526000928392839290911690637ab8955d906044016020604051808303816000875af1158015611160573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111849190611fcd565b609a546001600160a01b0316966000965090945092505050565b609d546040517f3c2d83120000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301528315156024830152600060448301819052928392839290911690633c2d8312906064016020604051808303816000875af1158015611219573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061123d9190611f65565b609d546001600160a01b0316969095506000945092505050565b600054610100900460ff166112c25760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610596565b610ade611997565b600054610100900460ff166113355760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610596565b610ade611a0b565b60655460ff1615610ade5760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610596565b611398611a82565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b603380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b61144961133d565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586113c53390565b6114926001600160a01b0383163383611ad4565b816001600160a01b03167f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28826040516114cd91815260200190565b60405180910390a25050565b6099546040517f0483a7f60000000000000000000000000000000000000000000000000000000081526001600160a01b0383811660048301526000928392911690630483a7f690602401600060405180830381865afa158015611540573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611568919081019061205a565b5050609c546040517f660186e60000000000000000000000000000000000000000000000000000000081526001600160a01b038881166004830152929550600094509116915063660186e690602401602060405180830381865afa1580156115d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f89190611fcd565b9050611602610d4c565b821015801561160e5750805b949350505050565b60008060008060a154851115611658576040517facb67c1900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b841561169357600085815260a3602052604090205461168490889088908015611d2a021763ffffffff16565b919550935091508490506116ee565b60015b60a15481116116ec57600081815260a360205260409020546116c590899089908015611d2a021763ffffffff16565b91965094509250831515806116d75750825b156116e4578091506116ec565b600101611696565b505b93509350935093565b6040516001600160a01b03808516602483015283166044820152606481018290526117a89085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611b22565b50505050565b6097546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009182916001600160a01b03909116906370a0823190602401602060405180830381865afa158015611814573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118389190611f65565b9050808311156119045760995460975461185f916001600160a01b03918216911683611ad4565b60995460405162520b9d60e11b81526001600160a01b03868116600483015260248201849052600160448301529091169062a4173a90606401600060405180830381600087803b1580156118b257600080fd5b505af11580156118c6573d6000803e3d6000fd5b50506040518392507fe18877e49d8a98b9748ce4fc0451f1f2f20afbd428aa2f5d5cbbed3ba2d47b229150600090a26118fd611441565b9050611991565b609954609754611921916001600160a01b03918216911685611ad4565b60995460405162520b9d60e11b81526001600160a01b03868116600483015260248201869052600160448301529091169062a4173a90606401600060405180830381600087803b15801561197457600080fd5b505af1158015611988573d6000803e3d6000fd5b50505050829150505b92915050565b600054610100900460ff16611a025760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610596565b610ade336113e2565b600054610100900460ff16611a765760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610596565b6065805460ff19169055565b60655460ff16610ade5760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610596565b6040516001600160a01b038316602482015260448101829052611b1d9084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401611744565b505050565b6000611b77826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611c0a9092919063ffffffff16565b9050805160001480611b98575080806020019051810190611b989190611fcd565b611b1d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610596565b606061160e848460008585600080866001600160a01b03168587604051611c319190611f25565b60006040518083038185875af1925050503d8060008114611c6e576040519150601f19603f3d011682016040523d82523d6000602084013e611c73565b606091505b5091509150611c8487838387611c8f565b979650505050505050565b60608315611cfb578251611cf4576001600160a01b0385163b611cf45760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610596565b508161160e565b61160e8383815115611d105781518083602001fd5b8060405162461bcd60e51b81526004016105969190612163565b610ade612196565b600060208284031215611d4457600080fd5b5035919050565b80356001600160a01b0381168114611d6257600080fd5b919050565b6000806000806000806000806000806101408b8d031215611d8757600080fd5b611d908b611d4b565b9950611d9e60208c01611d4b565b9850611dac60408c01611d4b565b9750611dba60608c01611d4b565b9650611dc860808c01611d4b565b9550611dd660a08c01611d4b565b9450611de460c08c01611d4b565b935060e08b013592506101008b013591506101208b013590509295989b9194979a5092959850565b600060208284031215611e1e57600080fd5b611e2782611d4b565b9392505050565b801515811461100957600080fd5b60008060408385031215611e4f57600080fd5b611e5883611d4b565b91506020830135611e6881611e2e565b809150509250929050565b60008060408385031215611e8657600080fd5b611e8f83611d4b565b946020939093013593505050565b600060208284031215611eaf57600080fd5b8135611e2781611e2e565b600080600060608486031215611ecf57600080fd5b611ed884611d4b565b92506020840135611ee881611e2e565b929592945050506040919091013590565b60005b83811015611f14578181015183820152602001611efc565b838111156117a85750506000910152565b60008251611f37818460208701611ef9565b9190910192915050565b60008060408385031215611f5457600080fd5b505080516020909101519092909150565b600060208284031215611f7757600080fd5b5051919050565b6000816000190483118215151615611fa657634e487b7160e01b600052601160045260246000fd5b500290565b600082611fc857634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215611fdf57600080fd5b8151611e2781611e2e565b634e487b7160e01b600052604160045260246000fd5b6040516080810167ffffffffffffffff8111828210171561202357612023611fea565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561205257612052611fea565b604052919050565b600080600080600060a0868803121561207257600080fd5b85519450602080870151945060408701519350606080880151935060808089015167ffffffffffffffff808211156120a957600080fd5b818b0191508b601f8301126120bd57600080fd5b8151818111156120cf576120cf611fea565b6120dd868260051b01612029565b818152868101925060079190911b83018601908d8211156120fd57600080fd5b928601925b8184101561214f5784848f03121561211a5760008081fd5b612122612000565b84518152878501518882015260408086015190820152868501518782015283529284019291860191612102565b809750505050505050509295509295909350565b6020815260008251806020840152612182816040850160208701611ef9565b601f01601f19169190910160400192915050565b634e487b7160e01b600052605160045260246000fdfea2646970667358221220f3576942822bc6794ddb49f55d0413a820b5afd5a322c0c28ed08869ae30536c64736f6c634300080c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102415760003560e01c80638456cb5911610145578063d1025c0c116100bd578063e011b2891161008c578063f188768411610071578063f188768414610484578063f2fde38b1461048d578063fa2cc3c0146104a057600080fd5b8063e011b2891461045e578063eb4af0451461047157600080fd5b8063d1025c0c14610431578063d4743bae1461043a578063d8c0e2531461044d578063d9cdd5131461045657600080fd5b8063aad3ec9611610114578063b200e2c8116100f9578063b200e2c814610403578063b888879e14610416578063c0d02c511461042957600080fd5b8063aad3ec96146103dd578063b0c634ee146103f057600080fd5b80638456cb591461038e5780638980f11f146103965780638da5cb5b146103a95780639b19251a146103ba57600080fd5b80633e362c96116101d85780635c975abb116101a75780636a7e9f331161018c5780636a7e9f331461036a578063715018a61461037357806376e82e8b1461037b57600080fd5b80635c975abb1461034c5780635ebd4f9f1461035757600080fd5b80633e362c96146103155780633f4ba83a1461031e5780633fc8cef314610326578063464cea3d1461033957600080fd5b80631a2baad6116102145780631a2baad6146102b85780631fc8bc5d146102ce5780632a023387146102f957806339bd5ff51461030257600080fd5b8063015d87611461024657806302ce58131461025b5780630974f94c1461027d5780630b39ed4714610290575b600080fd5b610259610254366004611d32565b6104b3565b005b60a5546102689060ff1681565b60405190151581526020015b60405180910390f35b61025961028b366004611d67565b6104ee565b6102a361029e366004611e0c565b6108d3565b60408051928352602083019190915201610274565b6102c0610a00565b604051908152602001610274565b609a546102e1906001600160a01b031681565b6040516001600160a01b039091168152602001610274565b6102c0609e5481565b6097546102e1906001600160a01b031681565b6102c060a15481565b610259610ace565b6098546102e1906001600160a01b031681565b610259610347366004611e3c565b610ae0565b60655460ff16610268565b610259610365366004611d32565b610b3c565b6102c061271081565b610259610b9a565b609c546102e1906001600160a01b031681565b610259610bac565b6102596103a4366004611e73565b610bbc565b6033546001600160a01b03166102e1565b6102686103c8366004611e0c565b60a46020526000908152604090205460ff1681565b6102a36103eb366004611e73565b610bd2565b6099546102e1906001600160a01b031681565b610259610411366004611d32565b610bec565b609b546102e1906001600160a01b031681565b610259610c27565b6102c0609f5481565b610259610448366004611e9d565b610d07565b6102c060a05481565b6102c0610d4c565b6102a361046c366004611eba565b610deb565b61025961047f366004611d32565b610f41565b6102c060a25481565b61025961049b366004611e0c565b610f7c565b609d546102e1906001600160a01b031681565b6104bb61100c565b60a081905560405181907fe63c291a066613fe10359993ab33123d8c5985f14ae0ccdfd066c63d537e229690600090a250565b600054610100900460ff161580801561050e5750600054600160ff909116105b806105285750303b158015610528575060005460ff166001145b61059f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b6000805460ff1916600117905580156105c2576000805461ff0019166101001790555b6001600160a01b038b166105e957604051639fabe1c160e01b815260040160405180910390fd5b6001600160a01b038a1661061057604051639fabe1c160e01b815260040160405180910390fd5b6001600160a01b03891661063757604051639fabe1c160e01b815260040160405180910390fd5b6001600160a01b03881661065e57604051639fabe1c160e01b815260040160405180910390fd5b6001600160a01b03871661068557604051639fabe1c160e01b815260040160405180910390fd5b6001600160a01b0386166106ac57604051639fabe1c160e01b815260040160405180910390fd5b6001600160a01b0385166106d357604051639fabe1c160e01b815260040160405180910390fd5b6127108411156106f6576040516374cbd35f60e01b815260040160405180910390fd5b82610714576040516374cbd35f60e01b815260040160405180910390fd5b81610732576040516374cbd35f60e01b815260040160405180910390fd5b6097805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b038e8116919091179092556098805482168d84161790556099805482168c8416179055609a805482168b8416179055609b805482168a8416179055609c80548216898416179055609d8054909116918716919091179055609e849055609f83905560a082905560a36020527fc3869149e653ab70ab3abed8edc49ed99ccd0c8cf7ca81486b7adbd034773b10805467ffffffffffffffff1990811661106667ffffffffffffffff908116919091179092557fe262b42e4ca35e2f1e405b90c91327b65c89bdbf5dd51dedc3459002050f6b7b805482166111058416179055600360008190527fe9af58d115897398a1f35176114f462ebaa379402284755e74d53e3847c6a970805490921661119e90931692909217905560a155610878611257565b6108806112ca565b80156108c6576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050505050565b6040516001600160a01b03821660248201526000604482018190526064820181905290819081908190309060840160408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fe011b28900000000000000000000000000000000000000000000000000000000179052516109649190611f25565b600060405180830381855afa9150503d806000811461099f576040519150601f19603f3d011682016040523d82523d6000602084013e6109a4565b606091505b5091509150816109e0576040517f59ed39fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b808060200190518101906109f49190611f41565b90969095509350505050565b6000610a0a61133d565b609b54604080517f6d2ed18400000000000000000000000000000000000000000000000000000000815290516000926001600160a01b031691636d2ed1849160048083019260209291908290030181865afa158015610a6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a919190611f65565b9050600081609f546305f5e100610aa89190611f7e565b610ab29190611fab565b905060a0548111610ac35780610ac7565b60a0545b9250505090565b610ad661100c565b610ade611390565b565b610ae861100c565b6001600160a01b038216600081815260a46020526040808220805460ff191685151590811790915590519092917ff93f9a76c1bf3444d22400a00cb9fe990e6abe9dbb333fda48859cfee864543d91a35050565b610b4461100c565b612710811115610b67576040516374cbd35f60e01b815260040160405180910390fd5b609e81905560405181907fc6d3d93e80290ad8687918eb1cd28293fa9e658800d205f09a6d73d2d5e0fbdf90600090a250565b610ba261100c565b610ade60006113e2565b610bb461100c565b610ade611441565b610bc461100c565b610bce828261147e565b5050565b600080610be184600185610deb565b915091509250929050565b610bf461100c565b609f81905560405181907f27fed2da20a195ee831c4e78ce2bd0cfc4be23b636e8820121f147336084971e90600090a250565b610c2f61100c565b60a36020527fc3869149e653ab70ab3abed8edc49ed99ccd0c8cf7ca81486b7adbd034773b10805467ffffffffffffffff611066811667ffffffffffffffff19928316179092557fe262b42e4ca35e2f1e405b90c91327b65c89bdbf5dd51dedc3459002050f6b7b80546111058416908316179055600360009081527fe9af58d115897398a1f35176114f462ebaa379402284755e74d53e3847c6a970805461119e909416939092169290921790556040517ff839db0816cdb37939761d34b799f5b60282327aa12bc28d2fb4f5a511893cc39190a1565b610d0f61100c565b60a5805460ff19168215159081179091556040517f9c3f345b91941b4513c16d31601085e204abcc7df3ded47d446a78268da64b0490600090a250565b600080609b60009054906101000a90046001600160a01b03166001600160a01b0316636e9a05c56040518163ffffffff1660e01b8152600401602060405180830381865afa158015610da2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc69190611f65565b90508060a2546305f5e100610ddb9190611f7e565b610de59190611fab565b91505090565b600080610df661133d565b60a55460ff1615610e585733600090815260a4602052604090205460ff16158015610e215750333014155b15610e58576040517f584a793800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b838015610e655750333014155b15610ea957610e73336114d9565b610ea9576040517f3cb9724000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000806000610eb9888888611616565b9650909450925090508115610ed757610ed0610a00565b9450610efb565b8215610efb57612710609e5484610eee9190611f7e565b610ef89190611fab565b94505b868015610f0757508415155b15610f365781610f2957609754610f29906001600160a01b03168230866116f7565b610f3333866117ae565b94505b505050935093915050565b610f4961100c565b60a281905560405181907f8448c02797b448f4946bc25b3bf925e5556d1df822c944da701c54bab8a3162f90600090a250565b610f8461100c565b6001600160a01b0381166110005760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610596565b611009816113e2565b50565b6033546001600160a01b03163314610ade5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610596565b609954604051637ab8955d60e01b81526001600160a01b03848116600483015283151560248301526000928392839290911690637ab8955d906044016020604051808303816000875af19250505080156110dd575060408051601f3d908101601f191682019092526110da91810190611fcd565b60015b6110e9575060006110ec565b90505b6099546001600160a01b03169250600091509250925092565b609a54604051637ab8955d60e01b81526001600160a01b03848116600483015283151560248301526000928392839290911690637ab8955d906044016020604051808303816000875af1158015611160573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111849190611fcd565b609a546001600160a01b0316966000965090945092505050565b609d546040517f3c2d83120000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301528315156024830152600060448301819052928392839290911690633c2d8312906064016020604051808303816000875af1158015611219573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061123d9190611f65565b609d546001600160a01b0316969095506000945092505050565b600054610100900460ff166112c25760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610596565b610ade611997565b600054610100900460ff166113355760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610596565b610ade611a0b565b60655460ff1615610ade5760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610596565b611398611a82565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b603380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b61144961133d565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586113c53390565b6114926001600160a01b0383163383611ad4565b816001600160a01b03167f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28826040516114cd91815260200190565b60405180910390a25050565b6099546040517f0483a7f60000000000000000000000000000000000000000000000000000000081526001600160a01b0383811660048301526000928392911690630483a7f690602401600060405180830381865afa158015611540573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611568919081019061205a565b5050609c546040517f660186e60000000000000000000000000000000000000000000000000000000081526001600160a01b038881166004830152929550600094509116915063660186e690602401602060405180830381865afa1580156115d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f89190611fcd565b9050611602610d4c565b821015801561160e5750805b949350505050565b60008060008060a154851115611658576040517facb67c1900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b841561169357600085815260a3602052604090205461168490889088908015611d2a021763ffffffff16565b919550935091508490506116ee565b60015b60a15481116116ec57600081815260a360205260409020546116c590899089908015611d2a021763ffffffff16565b91965094509250831515806116d75750825b156116e4578091506116ec565b600101611696565b505b93509350935093565b6040516001600160a01b03808516602483015283166044820152606481018290526117a89085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611b22565b50505050565b6097546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009182916001600160a01b03909116906370a0823190602401602060405180830381865afa158015611814573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118389190611f65565b9050808311156119045760995460975461185f916001600160a01b03918216911683611ad4565b60995460405162520b9d60e11b81526001600160a01b03868116600483015260248201849052600160448301529091169062a4173a90606401600060405180830381600087803b1580156118b257600080fd5b505af11580156118c6573d6000803e3d6000fd5b50506040518392507fe18877e49d8a98b9748ce4fc0451f1f2f20afbd428aa2f5d5cbbed3ba2d47b229150600090a26118fd611441565b9050611991565b609954609754611921916001600160a01b03918216911685611ad4565b60995460405162520b9d60e11b81526001600160a01b03868116600483015260248201869052600160448301529091169062a4173a90606401600060405180830381600087803b15801561197457600080fd5b505af1158015611988573d6000803e3d6000fd5b50505050829150505b92915050565b600054610100900460ff16611a025760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610596565b610ade336113e2565b600054610100900460ff16611a765760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610596565b6065805460ff19169055565b60655460ff16610ade5760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610596565b6040516001600160a01b038316602482015260448101829052611b1d9084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401611744565b505050565b6000611b77826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611c0a9092919063ffffffff16565b9050805160001480611b98575080806020019051810190611b989190611fcd565b611b1d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610596565b606061160e848460008585600080866001600160a01b03168587604051611c319190611f25565b60006040518083038185875af1925050503d8060008114611c6e576040519150601f19603f3d011682016040523d82523d6000602084013e611c73565b606091505b5091509150611c8487838387611c8f565b979650505050505050565b60608315611cfb578251611cf4576001600160a01b0385163b611cf45760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610596565b508161160e565b61160e8383815115611d105781518083602001fd5b8060405162461bcd60e51b81526004016105969190612163565b610ade612196565b600060208284031215611d4457600080fd5b5035919050565b80356001600160a01b0381168114611d6257600080fd5b919050565b6000806000806000806000806000806101408b8d031215611d8757600080fd5b611d908b611d4b565b9950611d9e60208c01611d4b565b9850611dac60408c01611d4b565b9750611dba60608c01611d4b565b9650611dc860808c01611d4b565b9550611dd660a08c01611d4b565b9450611de460c08c01611d4b565b935060e08b013592506101008b013591506101208b013590509295989b9194979a5092959850565b600060208284031215611e1e57600080fd5b611e2782611d4b565b9392505050565b801515811461100957600080fd5b60008060408385031215611e4f57600080fd5b611e5883611d4b565b91506020830135611e6881611e2e565b809150509250929050565b60008060408385031215611e8657600080fd5b611e8f83611d4b565b946020939093013593505050565b600060208284031215611eaf57600080fd5b8135611e2781611e2e565b600080600060608486031215611ecf57600080fd5b611ed884611d4b565b92506020840135611ee881611e2e565b929592945050506040919091013590565b60005b83811015611f14578181015183820152602001611efc565b838111156117a85750506000910152565b60008251611f37818460208701611ef9565b9190910192915050565b60008060408385031215611f5457600080fd5b505080516020909101519092909150565b600060208284031215611f7757600080fd5b5051919050565b6000816000190483118215151615611fa657634e487b7160e01b600052601160045260246000fd5b500290565b600082611fc857634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215611fdf57600080fd5b8151611e2781611e2e565b634e487b7160e01b600052604160045260246000fd5b6040516080810167ffffffffffffffff8111828210171561202357612023611fea565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561205257612052611fea565b604052919050565b600080600080600060a0868803121561207257600080fd5b85519450602080870151945060408701519350606080880151935060808089015167ffffffffffffffff808211156120a957600080fd5b818b0191508b601f8301126120bd57600080fd5b8151818111156120cf576120cf611fea565b6120dd868260051b01612029565b818152868101925060079190911b83018601908d8211156120fd57600080fd5b928601925b8184101561214f5784848f03121561211a5760008081fd5b612122612000565b84518152878501518882015260408086015190820152868501518782015283529284019291860191612102565b809750505050505050509295509295909350565b6020815260008251806020840152612182816040850160208701611ef9565b601f01601f19169190910160400192915050565b634e487b7160e01b600052605160045260246000fdfea2646970667358221220f3576942822bc6794ddb49f55d0413a820b5afd5a322c0c28ed08869ae30536c64736f6c634300080c0033",
  "devdoc": {
    "author": "Prime Devs",
    "kind": "dev",
    "methods": {
      "addAddressToWL(address,bool)": {
        "params": {
          "status": "for whitelist",
          "user": "address"
        }
      },
      "changeWL(bool)": {
        "params": {
          "status": "New whitelist status"
        }
      },
      "claim(address,uint256)": {
        "params": {
          "_actionType": "which of the 3 bounty types (above) to run.",
          "_user": "address can be a fixed amt (Base Bounty) or dynamic amt based on rewards removed from target user during execution (ineligible revenue, autocompound fee)"
        },
        "returns": {
          "_0": "bounty in PRNT to be paid to Hunter (via vesting)",
          "_1": "actionType which bounty ran"
        }
      },
      "executeBounty(address,bool,uint256)": {
        "params": {
          "_actionType": "which of the 3 bounty types (above) to run.",
          "_execute": "whether to execute this txn, or just quote what its execution would return can be a fixed amt (Base Bounty) or dynamic amt based on rewards removed from target user during execution (ineligible revenue, autocompound fee)",
          "_user": "address"
        },
        "returns": {
          "actionType": "which bounty ran",
          "bounty": "in PRNT to be paid to Hunter (via vesting)"
        }
      },
      "getBaseBounty()": {
        "returns": {
          "_0": "bounty in PRNT"
        }
      },
      "initialize(address,address,address,address,address,address,address,uint256,uint256,uint256)": {
        "params": {
          "_baseBountyUsdTarget": "Base Bounty is paid in PRNT, will scale to match this USD target value",
          "_chef": "CIC, to query bounties for ineligible emissions",
          "_compounder": "Compounder address",
          "_eligibilityDataProvider": "Eligibility data provider",
          "_hunterShare": "% of reclaimed rewards to send to Hunter",
          "_maxBaseBounty": "cap the scaling above",
          "_mfd": "MFD, to send bounties as vesting PRNT to Hunter (user calling bounty)",
          "_priceProvider": "PriceProvider service, to get PRNT price for bounty quotes",
          "_prnt": "PRNT address",
          "_weth": "WETH address"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "quote(address)": {
        "params": {
          "_user": "address"
        },
        "returns": {
          "actionType": "which of the 3 bounty types (above) to run. _getAvailableBounty returns this based on priority (expired locks first, then inelig emissions, then autocompound)",
          "bounty": "amount of PRNT Hunter will recieve. can be a fixed amt (Base Bounty) or dynamic amt based on rewards removed from target user during execution (ineligible revenue, autocompound fee)"
        }
      },
      "recoverERC20(address,uint256)": {
        "params": {
          "tokenAddress": "Token address to recover",
          "tokenAmount": "Amount to recover"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setBaseBountyUsdTarget(uint256)": {
        "details": "Only owner can call this function.",
        "params": {
          "_newVal": "New USD value"
        }
      },
      "setBounties()": {
        "details": "Only owner can call this function."
      },
      "setHunterShare(uint256)": {
        "details": "Only owner can call this function.",
        "params": {
          "_newVal": "New hunter share ratio"
        }
      },
      "setMaxBaseBounty(uint256)": {
        "details": "Only owner can call this function.",
        "params": {
          "_newVal": "Maximum base bounty"
        }
      },
      "setMinStakeAmount(uint256)": {
        "details": "Only owner can call this function.",
        "params": {
          "_minStakeAmount": "Minimum stake amount"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "BountyManager Contract",
    "version": 1
  },
  "userdoc": {
    "events": {
      "Recovered(address,uint256)": {
        "notice": "Emitted when ERC20 token is recovered"
      }
    },
    "kind": "user",
    "methods": {
      "RATIO_DIVISOR()": {
        "notice": "Ratio Divisor"
      },
      "addAddressToWL(address,bool)": {
        "notice": "Add new address to whitelist."
      },
      "changeWL(bool)": {
        "notice": "Update whitelist active status."
      },
      "claim(address,uint256)": {
        "notice": "Execute a bounty."
      },
      "executeBounty(address,bool,uint256)": {
        "notice": "Execute the most appropriate bounty on a user, check returned amount for slippage, calc amount going to Hunter, send to vesting."
      },
      "getBaseBounty()": {
        "notice": "Return PRNT amount for Base Bounty. Base Bounty used to incentivize operations that don't generate their own reward to pay to Hunter."
      },
      "initialize(address,address,address,address,address,address,address,uint256,uint256,uint256)": {
        "notice": "Initialize"
      },
      "minDLPBalance()": {
        "notice": "Minimum locked lp balance"
      },
      "pause()": {
        "notice": "Pause the bounty operations."
      },
      "quote(address)": {
        "notice": "Given a user, return their bounty amount. uses staticcall to run same bounty aglo, but without execution"
      },
      "recoverERC20(address,uint256)": {
        "notice": "Recover ERC20 tokens from the contract."
      },
      "setBaseBountyUsdTarget(uint256)": {
        "notice": "Sets target price of base bounty."
      },
      "setBounties()": {
        "notice": "Set bounty operations."
      },
      "setHunterShare(uint256)": {
        "notice": "Sets hunter's share ratio."
      },
      "setMaxBaseBounty(uint256)": {
        "notice": "Updates maximum base bounty."
      },
      "setMinStakeAmount(uint256)": {
        "notice": "Sets minimum stake amount."
      },
      "unpause()": {
        "notice": "Unpause the bounty operations."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3621,
        "contract": "contracts/prime/eligibility/BountyManager.sol:BountyManager",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 3624,
        "contract": "contracts/prime/eligibility/BountyManager.sol:BountyManager",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4291,
        "contract": "contracts/prime/eligibility/BountyManager.sol:BountyManager",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3493,
        "contract": "contracts/prime/eligibility/BountyManager.sol:BountyManager",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 3613,
        "contract": "contracts/prime/eligibility/BountyManager.sol:BountyManager",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3805,
        "contract": "contracts/prime/eligibility/BountyManager.sol:BountyManager",
        "label": "_paused",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 3910,
        "contract": "contracts/prime/eligibility/BountyManager.sol:BountyManager",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 41492,
        "contract": "contracts/prime/eligibility/BountyManager.sol:BountyManager",
        "label": "prnt",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 41494,
        "contract": "contracts/prime/eligibility/BountyManager.sol:BountyManager",
        "label": "weth",
        "offset": 0,
        "slot": "152",
        "type": "t_address"
      },
      {
        "astId": 41496,
        "contract": "contracts/prime/eligibility/BountyManager.sol:BountyManager",
        "label": "mfd",
        "offset": 0,
        "slot": "153",
        "type": "t_address"
      },
      {
        "astId": 41498,
        "contract": "contracts/prime/eligibility/BountyManager.sol:BountyManager",
        "label": "chef",
        "offset": 0,
        "slot": "154",
        "type": "t_address"
      },
      {
        "astId": 41500,
        "contract": "contracts/prime/eligibility/BountyManager.sol:BountyManager",
        "label": "priceProvider",
        "offset": 0,
        "slot": "155",
        "type": "t_address"
      },
      {
        "astId": 41502,
        "contract": "contracts/prime/eligibility/BountyManager.sol:BountyManager",
        "label": "eligibilityDataProvider",
        "offset": 0,
        "slot": "156",
        "type": "t_address"
      },
      {
        "astId": 41504,
        "contract": "contracts/prime/eligibility/BountyManager.sol:BountyManager",
        "label": "compounder",
        "offset": 0,
        "slot": "157",
        "type": "t_address"
      },
      {
        "astId": 41506,
        "contract": "contracts/prime/eligibility/BountyManager.sol:BountyManager",
        "label": "hunterShare",
        "offset": 0,
        "slot": "158",
        "type": "t_uint256"
      },
      {
        "astId": 41508,
        "contract": "contracts/prime/eligibility/BountyManager.sol:BountyManager",
        "label": "baseBountyUsdTarget",
        "offset": 0,
        "slot": "159",
        "type": "t_uint256"
      },
      {
        "astId": 41510,
        "contract": "contracts/prime/eligibility/BountyManager.sol:BountyManager",
        "label": "maxBaseBounty",
        "offset": 0,
        "slot": "160",
        "type": "t_uint256"
      },
      {
        "astId": 41512,
        "contract": "contracts/prime/eligibility/BountyManager.sol:BountyManager",
        "label": "bountyCount",
        "offset": 0,
        "slot": "161",
        "type": "t_uint256"
      },
      {
        "astId": 41514,
        "contract": "contracts/prime/eligibility/BountyManager.sol:BountyManager",
        "label": "minStakeAmount",
        "offset": 0,
        "slot": "162",
        "type": "t_uint256"
      },
      {
        "astId": 41538,
        "contract": "contracts/prime/eligibility/BountyManager.sol:BountyManager",
        "label": "bounties",
        "offset": 0,
        "slot": "163",
        "type": "t_mapping(t_uint256,t_function_internal_nonpayable(t_address,t_bool)returns(t_address,t_uint256,t_bool))"
      },
      {
        "astId": 41542,
        "contract": "contracts/prime/eligibility/BountyManager.sol:BountyManager",
        "label": "whitelist",
        "offset": 0,
        "slot": "164",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 41544,
        "contract": "contracts/prime/eligibility/BountyManager.sol:BountyManager",
        "label": "whitelistActive",
        "offset": 0,
        "slot": "165",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_function_internal_nonpayable(t_address,t_bool)returns(t_address,t_uint256,t_bool)": {
        "encoding": "inplace",
        "label": "function (address,bool) returns (address,uint256,bool)",
        "numberOfBytes": "8"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_function_internal_nonpayable(t_address,t_bool)returns(t_address,t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => function (address,bool) returns (address,uint256,bool))",
        "numberOfBytes": "32",
        "value": "t_function_internal_nonpayable(t_address,t_bool)returns(t_address,t_uint256,t_bool)"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}