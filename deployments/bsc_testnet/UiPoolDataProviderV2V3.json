{
  "address": "0x3e9BaeaC9C503487A248780e01F2c3323bcA4C71",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IChainlinkAggregator",
          "name": "_networkBaseTokenPriceInUsdProxyAggregator",
          "type": "address"
        },
        {
          "internalType": "contract IChainlinkAggregator",
          "name": "_marketReferenceCurrencyPriceInUsdProxyAggregator",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ETH_CURRENCY_UNIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MKRAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_bytes32",
          "type": "bytes32"
        }
      ],
      "name": "bytes32ToString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ILendingPoolAddressesProvider",
          "name": "provider",
          "type": "address"
        }
      ],
      "name": "getReservesData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "underlyingAsset",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "decimals",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "baseLTVasCollateral",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reserveLiquidationThreshold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reserveLiquidationBonus",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reserveFactor",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "usageAsCollateralEnabled",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "borrowingEnabled",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "stableBorrowRateEnabled",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isActive",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isFrozen",
              "type": "bool"
            },
            {
              "internalType": "uint128",
              "name": "liquidityIndex",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "variableBorrowIndex",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "liquidityRate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "variableBorrowRate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "stableBorrowRate",
              "type": "uint128"
            },
            {
              "internalType": "uint40",
              "name": "lastUpdateTimestamp",
              "type": "uint40"
            },
            {
              "internalType": "address",
              "name": "aTokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "stableDebtTokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "variableDebtTokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "interestRateStrategyAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "availableLiquidity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalPrincipalStableDebt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "averageStableRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stableDebtLastUpdateTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalScaledVariableDebt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "priceInMarketReferenceCurrency",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "variableRateSlope1",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "variableRateSlope2",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stableRateSlope1",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stableRateSlope2",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isPaused",
              "type": "bool"
            },
            {
              "internalType": "uint128",
              "name": "accruedToTreasury",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "unbacked",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "isolationModeTotalDebt",
              "type": "uint128"
            },
            {
              "internalType": "uint256",
              "name": "debtCeiling",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "debtCeilingDecimals",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "eModeCategoryId",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "borrowCap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "supplyCap",
              "type": "uint256"
            },
            {
              "internalType": "uint16",
              "name": "eModeLtv",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "eModeLiquidationThreshold",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "eModeLiquidationBonus",
              "type": "uint16"
            },
            {
              "internalType": "address",
              "name": "eModePriceSource",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "eModeLabel",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "borrowableInIsolation",
              "type": "bool"
            }
          ],
          "internalType": "struct IUiPoolDataProviderV3.AggregatedReserveData[]",
          "name": "",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "marketReferenceCurrencyUnit",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "marketReferenceCurrencyPriceInUsd",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "networkBaseTokenPriceInUsd",
              "type": "int256"
            },
            {
              "internalType": "uint8",
              "name": "networkBaseTokenPriceDecimals",
              "type": "uint8"
            }
          ],
          "internalType": "struct IUiPoolDataProviderV3.BaseCurrencyInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ILendingPoolAddressesProvider",
          "name": "provider",
          "type": "address"
        }
      ],
      "name": "getReservesList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ILendingPoolAddressesProvider",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserReservesData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "underlyingAsset",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "scaledATokenBalance",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "usageAsCollateralEnabledOnUser",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "stableBorrowRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "scaledVariableDebt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "principalStableDebt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stableBorrowLastUpdateTimestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct IUiPoolDataProviderV3.UserReserveData[]",
          "name": "",
          "type": "tuple[]"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketReferenceCurrencyPriceInUsdProxyAggregator",
      "outputs": [
        {
          "internalType": "contract IChainlinkAggregator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "networkBaseTokenPriceInUsdProxyAggregator",
      "outputs": [
        {
          "internalType": "contract IChainlinkAggregator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb78258455b8561560de29bb4c6a80f33d4e3c244f882f27bb0ea9971a1889786",
  "receipt": {
    "to": null,
    "from": "0xdE8023f05d831Fb7381486D041237ddEB06c1BA2",
    "contractAddress": "0x3e9BaeaC9C503487A248780e01F2c3323bcA4C71",
    "transactionIndex": 6,
    "gasUsed": "1976252",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x8c8f7781b598950a2bb4c50bc95259010c942e2c2f436dd24a605d5128f3b211",
    "transactionHash": "0xb78258455b8561560de29bb4c6a80f33d4e3c244f882f27bb0ea9971a1889786",
    "logs": [],
    "blockNumber": 43440186,
    "cumulativeGasUsed": "2526933",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2514895c72f50D8bd4B4F9b1110F0D6bD2c97526",
    "0x2514895c72f50D8bd4B4F9b1110F0D6bD2c97526"
  ],
  "numDeployments": 1,
  "solcInputHash": "1d544f96a00f94e7a887913a2bd4bf37",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IChainlinkAggregator\",\"name\":\"_networkBaseTokenPriceInUsdProxyAggregator\",\"type\":\"address\"},{\"internalType\":\"contract IChainlinkAggregator\",\"name\":\"_marketReferenceCurrencyPriceInUsdProxyAggregator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ETH_CURRENCY_UNIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MKRAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_bytes32\",\"type\":\"bytes32\"}],\"name\":\"bytes32ToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILendingPoolAddressesProvider\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"getReservesData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseLTVasCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveLiquidationThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveLiquidationBonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactor\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"usageAsCollateralEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"borrowingEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"stableBorrowRateEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isFrozen\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"liquidityIndex\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"variableBorrowIndex\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"liquidityRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"variableBorrowRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"stableBorrowRate\",\"type\":\"uint128\"},{\"internalType\":\"uint40\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint40\"},{\"internalType\":\"address\",\"name\":\"aTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stableDebtTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"variableDebtTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"interestRateStrategyAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"availableLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPrincipalStableDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"averageStableRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stableDebtLastUpdateTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalScaledVariableDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceInMarketReferenceCurrency\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"variableRateSlope1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"variableRateSlope2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stableRateSlope1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stableRateSlope2\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"},{\"internalType\":\"uint128\",\"name\":\"accruedToTreasury\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"unbacked\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"isolationModeTotalDebt\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"debtCeiling\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtCeilingDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"eModeCategoryId\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"borrowCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyCap\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"eModeLtv\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"eModeLiquidationThreshold\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"eModeLiquidationBonus\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"eModePriceSource\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"eModeLabel\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"borrowableInIsolation\",\"type\":\"bool\"}],\"internalType\":\"struct IUiPoolDataProviderV3.AggregatedReserveData[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"marketReferenceCurrencyUnit\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"marketReferenceCurrencyPriceInUsd\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"networkBaseTokenPriceInUsd\",\"type\":\"int256\"},{\"internalType\":\"uint8\",\"name\":\"networkBaseTokenPriceDecimals\",\"type\":\"uint8\"}],\"internalType\":\"struct IUiPoolDataProviderV3.BaseCurrencyInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILendingPoolAddressesProvider\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"getReservesList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILendingPoolAddressesProvider\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserReservesData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlyingAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"scaledATokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"usageAsCollateralEnabledOnUser\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"stableBorrowRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"scaledVariableDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"principalStableDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stableBorrowLastUpdateTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct IUiPoolDataProviderV3.UserReserveData[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketReferenceCurrencyPriceInUsdProxyAggregator\",\"outputs\":[{\"internalType\":\"contract IChainlinkAggregator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"networkBaseTokenPriceInUsdProxyAggregator\",\"outputs\":[{\"internalType\":\"contract IChainlinkAggregator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lending/UiPoolDataProviderV2V3.sol\":\"UiPoolDataProviderV2V3\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"contracts/interfaces/AggregatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\ninterface AggregatorInterface {\\n\\tfunction latestAnswer() external view returns (int256);\\n\\n\\tfunction latestTimestamp() external view returns (uint256);\\n\\n\\tfunction latestRound() external view returns (uint256);\\n\\n\\tfunction getAnswer(uint256 roundId) external view returns (int256);\\n\\n\\tfunction getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n\\tevent AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n\\n\\tevent NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\",\"keccak256\":\"0xb2938f7114988ee6a3a1e86310e06d38ac8aace76d344b60cb1da30de49fff16\",\"license\":\"MIT\"},\"contracts/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\ninterface AggregatorV3Interface {\\n\\tfunction decimals() external view returns (uint8);\\n\\n\\tfunction description() external view returns (string memory);\\n\\n\\tfunction version() external view returns (uint256);\\n\\n\\t// getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n\\t// if they do not have data to report, instead of returning unset values\\n\\t// which could be misinterpreted as actual reported values.\\n\\tfunction getRoundData(\\n\\t\\tuint80 _roundId\\n\\t)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n\\tfunction latestRoundData()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0x0a6cadd5e05492e74282965db755bc834bb468ee493ae44429c7f2cf38fb8d5f\",\"license\":\"MIT\"},\"contracts/interfaces/IAToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IScaledBalanceToken} from \\\"./IScaledBalanceToken.sol\\\";\\nimport {IInitializableAToken} from \\\"./IInitializableAToken.sol\\\";\\nimport {IAaveIncentivesController} from \\\"./IAaveIncentivesController.sol\\\";\\n\\ninterface IAToken is IERC20, IScaledBalanceToken, IInitializableAToken {\\n\\t/**\\n\\t * @dev Emitted after the mint action\\n\\t * @param from The address performing the mint\\n\\t * @param value The amount being\\n\\t * @param index The new liquidity index of the reserve\\n\\t **/\\n\\tevent Mint(address indexed from, uint256 value, uint256 index);\\n\\n\\t/**\\n\\t * @dev Mints `amount` aTokens to `user`\\n\\t * @param user The address receiving the minted tokens\\n\\t * @param amount The amount of tokens getting minted\\n\\t * @param index The new liquidity index of the reserve\\n\\t * @return `true` if the the previous balance of the user was 0\\n\\t */\\n\\tfunction mint(address user, uint256 amount, uint256 index) external returns (bool);\\n\\n\\t/**\\n\\t * @dev Emitted after aTokens are burned\\n\\t * @param from The owner of the aTokens, getting them burned\\n\\t * @param target The address that will receive the underlying\\n\\t * @param value The amount being burned\\n\\t * @param index The new liquidity index of the reserve\\n\\t **/\\n\\tevent Burn(address indexed from, address indexed target, uint256 value, uint256 index);\\n\\n\\t/**\\n\\t * @dev Emitted during the transfer action\\n\\t * @param from The user whose tokens are being transferred\\n\\t * @param to The recipient\\n\\t * @param value The amount being transferred\\n\\t * @param index The new liquidity index of the reserve\\n\\t **/\\n\\tevent BalanceTransfer(address indexed from, address indexed to, uint256 value, uint256 index);\\n\\n\\t/**\\n\\t * @dev Burns aTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\\n\\t * @param user The owner of the aTokens, getting them burned\\n\\t * @param receiverOfUnderlying The address that will receive the underlying\\n\\t * @param amount The amount being burned\\n\\t * @param index The new liquidity index of the reserve\\n\\t **/\\n\\tfunction burn(address user, address receiverOfUnderlying, uint256 amount, uint256 index) external;\\n\\n\\t/**\\n\\t * @dev Mints aTokens to the reserve treasury\\n\\t * @param amount The amount of tokens getting minted\\n\\t * @param index The new liquidity index of the reserve\\n\\t */\\n\\tfunction mintToTreasury(uint256 amount, uint256 index) external;\\n\\n\\t/**\\n\\t * @dev Transfers aTokens in the event of a borrow being liquidated, in case the liquidators reclaims the aToken\\n\\t * @param from The address getting liquidated, current owner of the aTokens\\n\\t * @param to The recipient\\n\\t * @param value The amount of tokens getting transferred\\n\\t **/\\n\\tfunction transferOnLiquidation(address from, address to, uint256 value) external;\\n\\n\\t/**\\n\\t * @dev Transfers the underlying asset to `target`. Used by the LendingPool to transfer\\n\\t * assets in borrow(), withdraw() and flashLoan()\\n\\t * @param user The recipient of the underlying\\n\\t * @param amount The amount getting transferred\\n\\t * @return The amount transferred\\n\\t **/\\n\\tfunction transferUnderlyingTo(address user, uint256 amount) external returns (uint256);\\n\\n\\t/**\\n\\t * @dev Invoked to execute actions on the aToken side after a repayment.\\n\\t * @param user The user executing the repayment\\n\\t * @param amount The amount getting repaid\\n\\t **/\\n\\tfunction handleRepayment(address user, uint256 amount) external;\\n\\n\\t/**\\n\\t * @dev Returns the address of the incentives controller contract\\n\\t **/\\n\\tfunction getIncentivesController() external view returns (IAaveIncentivesController);\\n\\n\\t/**\\n\\t * @dev Returns the address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n\\t **/\\n\\tfunction UNDERLYING_ASSET_ADDRESS() external view returns (address);\\n}\\n\",\"keccak256\":\"0x0d1f63164155227cf652eb565cda7320d95c1a1b17ee91d1ca4ee7cc8e389538\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IAaveIncentivesController.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface IAaveIncentivesController {\\n\\tevent RewardsAccrued(address indexed user, uint256 amount);\\n\\n\\tevent RewardsClaimed(address indexed user, address indexed to, uint256 amount);\\n\\n\\tevent RewardsClaimed(address indexed user, address indexed to, address indexed claimer, uint256 amount);\\n\\n\\tevent ClaimerSet(address indexed user, address indexed claimer);\\n\\n\\t/*\\n\\t * @dev Returns the configuration of the distribution for a certain asset\\n\\t * @param asset The address of the reference asset of the distribution\\n\\t * @return The asset index, the emission per second and the last updated timestamp\\n\\t **/\\n\\tfunction getAssetData(address asset) external view returns (uint256, uint256, uint256);\\n\\n\\t/**\\n\\t * @dev Whitelists an address to claim the rewards on behalf of another address\\n\\t * @param user The address of the user\\n\\t * @param claimer The address of the claimer\\n\\t */\\n\\tfunction setClaimer(address user, address claimer) external;\\n\\n\\t/**\\n\\t * @dev Returns the whitelisted claimer for a certain address (0x0 if not set)\\n\\t * @param user The address of the user\\n\\t * @return The claimer address\\n\\t */\\n\\tfunction getClaimer(address user) external view returns (address);\\n\\n\\t/**\\n\\t * @dev Configure assets for a certain rewards emission\\n\\t * @param assets The assets to incentivize\\n\\t * @param emissionsPerSecond The emission for each asset\\n\\t */\\n\\tfunction configureAssets(address[] calldata assets, uint256[] calldata emissionsPerSecond) external;\\n\\n\\t/**\\n\\t * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n\\t * @param user The address of the user\\n\\t **/\\n\\tfunction handleActionBefore(address user) external;\\n\\n\\t/**\\n\\t * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n\\t * @param user The address of the user\\n\\t * @param userBalance The balance of the user of the asset in the lending pool\\n\\t * @param totalSupply The total supply of the asset in the lending pool\\n\\t **/\\n\\tfunction handleActionAfter(address user, uint256 userBalance, uint256 totalSupply) external;\\n\\n\\t/**\\n\\t * @dev Returns the total of rewards of an user, already accrued + not yet accrued\\n\\t * @param user The address of the user\\n\\t * @return The rewards\\n\\t **/\\n\\tfunction getRewardsBalance(address[] calldata assets, address user) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Claims reward for an user, on all the assets of the lending pool, accumulating the pending rewards\\n\\t * @param amount Amount of rewards to claim\\n\\t * @param to Address that will be receiving the rewards\\n\\t * @return Rewards claimed\\n\\t **/\\n\\tfunction claimRewards(address[] calldata assets, uint256 amount, address to) external returns (uint256);\\n\\n\\t/**\\n\\t * @dev Claims reward for an user on behalf, on all the assets of the lending pool, accumulating the pending rewards. The caller must\\n\\t * be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\n\\t * @param amount Amount of rewards to claim\\n\\t * @param user Address to check and claim rewards\\n\\t * @param to Address that will be receiving the rewards\\n\\t * @return Rewards claimed\\n\\t **/\\n\\tfunction claimRewardsOnBehalf(\\n\\t\\taddress[] calldata assets,\\n\\t\\tuint256 amount,\\n\\t\\taddress user,\\n\\t\\taddress to\\n\\t) external returns (uint256);\\n\\n\\t/**\\n\\t * @dev returns the unclaimed rewards of the user\\n\\t * @param user the address of the user\\n\\t * @return the unclaimed user rewards\\n\\t */\\n\\tfunction getUserUnclaimedRewards(address user) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev returns the unclaimed rewards of the user\\n\\t * @param user the address of the user\\n\\t * @param asset The asset to incentivize\\n\\t * @return the user index for the asset\\n\\t */\\n\\tfunction getUserAssetData(address user, address asset) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev for backward compatibility with previous implementation of the Incentives controller\\n\\t */\\n\\tfunction REWARD_TOKEN() external view returns (address);\\n\\n\\t/**\\n\\t * @dev for backward compatibility with previous implementation of the Incentives controller\\n\\t */\\n\\tfunction PRECISION() external view returns (uint8);\\n\\n\\t/**\\n\\t * @dev Gets the distribution end timestamp of the emissions\\n\\t */\\n\\tfunction DISTRIBUTION_END() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x18649f6671a8ce274716b0c212186cae5f9c85e33872aa6a63b287154b982f2a\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IAaveOracle.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\n/**\\n * @title IAaveOracle interface\\n * @notice Interface for the Aave oracle.\\n **/\\n\\ninterface IAaveOracle {\\n\\tfunction BASE_CURRENCY() external view returns (address); // if usd returns 0x0, if eth returns weth address\\n\\n\\tfunction BASE_CURRENCY_UNIT() external view returns (uint256);\\n\\n\\t/***********\\n    @dev returns the asset price in ETH\\n     */\\n\\tfunction getAssetPrice(address asset) external view returns (uint256);\\n\\n\\tfunction getSourceOfAsset(address asset) external view returns (address);\\n}\\n\",\"keccak256\":\"0x829468b50cba8db2f65ec609801fec1847b87ba65f8a6feaa8d71e97acd065c3\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IChainlinkAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Code from https://github.com/smartcontractkit/chainlink/blob/master/evm-contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"./AggregatorInterface.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\ninterface IChainlinkAggregator is AggregatorInterface, AggregatorV3Interface {}\\n\",\"keccak256\":\"0xcfc3dbbd8052419569c2ba3cedde2193da530ca2e3e5b2e09ca79612f5860727\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20DetailedBytes.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20DetailedBytes is IERC20 {\\n\\tfunction name() external view returns (bytes32);\\n\\n\\tfunction symbol() external view returns (bytes32);\\n\\n\\tfunction decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8f7309af5a44f533e396ec07b69ee2f70e8833451b09152468859ee0a84466df\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IInitializableAToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport {ILendingPool} from \\\"./ILendingPool.sol\\\";\\nimport {IAaveIncentivesController} from \\\"./IAaveIncentivesController.sol\\\";\\n\\n/**\\n * @title IInitializableAToken\\n * @notice Interface for the initialize function on AToken\\n * @author Aave\\n **/\\ninterface IInitializableAToken {\\n\\t/**\\n\\t * @dev Emitted when an aToken is initialized\\n\\t * @param underlyingAsset The address of the underlying asset\\n\\t * @param pool The address of the associated lending pool\\n\\t * @param treasury The address of the treasury\\n\\t * @param incentivesController The address of the incentives controller for this aToken\\n\\t * @param aTokenDecimals the decimals of the underlying\\n\\t * @param aTokenName the name of the aToken\\n\\t * @param aTokenSymbol the symbol of the aToken\\n\\t * @param params A set of encoded parameters for additional initialization\\n\\t **/\\n\\tevent Initialized(\\n\\t\\taddress indexed underlyingAsset,\\n\\t\\taddress indexed pool,\\n\\t\\taddress treasury,\\n\\t\\taddress incentivesController,\\n\\t\\tuint8 aTokenDecimals,\\n\\t\\tstring aTokenName,\\n\\t\\tstring aTokenSymbol,\\n\\t\\tbytes params\\n\\t);\\n\\n\\t/**\\n\\t * @dev Initializes the aToken\\n\\t * @param pool The address of the lending pool where this aToken will be used\\n\\t * @param treasury The address of the Aave treasury, receiving the fees on this aToken\\n\\t * @param underlyingAsset The address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n\\t * @param incentivesController The smart contract managing potential incentives distribution\\n\\t * @param aTokenDecimals The decimals of the aToken, same as the underlying asset's\\n\\t * @param aTokenName The name of the aToken\\n\\t * @param aTokenSymbol The symbol of the aToken\\n\\t */\\n\\tfunction initialize(\\n\\t\\tILendingPool pool,\\n\\t\\taddress treasury,\\n\\t\\taddress underlyingAsset,\\n\\t\\tIAaveIncentivesController incentivesController,\\n\\t\\tuint8 aTokenDecimals,\\n\\t\\tstring calldata aTokenName,\\n\\t\\tstring calldata aTokenSymbol,\\n\\t\\tbytes calldata params\\n\\t) external;\\n}\\n\",\"keccak256\":\"0xd73daf8d329d2120da2c50492148c0500e34ede39e9fb0b1cca977b4168541da\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IInitializableDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport {ILendingPool} from \\\"./ILendingPool.sol\\\";\\nimport {IAaveIncentivesController} from \\\"./IAaveIncentivesController.sol\\\";\\n\\n/**\\n * @title IInitializableDebtToken\\n * @notice Interface for the initialize function common between debt tokens\\n * @author Aave\\n **/\\ninterface IInitializableDebtToken {\\n\\t/**\\n\\t * @dev Emitted when a debt token is initialized\\n\\t * @param underlyingAsset The address of the underlying asset\\n\\t * @param pool The address of the associated lending pool\\n\\t * @param incentivesController The address of the incentives controller for this aToken\\n\\t * @param debtTokenDecimals the decimals of the debt token\\n\\t * @param debtTokenName the name of the debt token\\n\\t * @param debtTokenSymbol the symbol of the debt token\\n\\t * @param params A set of encoded parameters for additional initialization\\n\\t **/\\n\\tevent Initialized(\\n\\t\\taddress indexed underlyingAsset,\\n\\t\\taddress indexed pool,\\n\\t\\taddress incentivesController,\\n\\t\\tuint8 debtTokenDecimals,\\n\\t\\tstring debtTokenName,\\n\\t\\tstring debtTokenSymbol,\\n\\t\\tbytes params\\n\\t);\\n\\n\\t/**\\n\\t * @dev Initializes the debt token.\\n\\t * @param pool The address of the lending pool where this aToken will be used\\n\\t * @param underlyingAsset The address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n\\t * @param incentivesController The smart contract managing potential incentives distribution\\n\\t * @param debtTokenDecimals The decimals of the debtToken, same as the underlying asset's\\n\\t * @param debtTokenName The name of the token\\n\\t * @param debtTokenSymbol The symbol of the token\\n\\t */\\n\\tfunction initialize(\\n\\t\\tILendingPool pool,\\n\\t\\taddress underlyingAsset,\\n\\t\\tIAaveIncentivesController incentivesController,\\n\\t\\tuint8 debtTokenDecimals,\\n\\t\\tstring memory debtTokenName,\\n\\t\\tstring memory debtTokenSymbol,\\n\\t\\tbytes calldata params\\n\\t) external;\\n}\\n\",\"keccak256\":\"0xbc2d79250445e87d578cefb23cd0876e1f29a7a4e611b2c18e082681985a7181\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/ILendingPool.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {ILendingPoolAddressesProvider} from \\\"./ILendingPoolAddressesProvider.sol\\\";\\nimport {DataTypes} from \\\"../lending/libraries/types/DataTypes.sol\\\";\\n\\ninterface ILendingPool {\\n\\t/**\\n\\t * @dev Emitted on deposit()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address initiating the deposit\\n\\t * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\\n\\t * @param amount The amount deposited\\n\\t * @param referral The referral code used\\n\\t **/\\n\\tevent Deposit(\\n\\t\\taddress indexed reserve,\\n\\t\\taddress user,\\n\\t\\taddress indexed onBehalfOf,\\n\\t\\tuint256 amount,\\n\\t\\tuint16 indexed referral\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted on withdraw()\\n\\t * @param reserve The address of the underlyng asset being withdrawn\\n\\t * @param user The address initiating the withdrawal, owner of aTokens\\n\\t * @param to Address that will receive the underlying\\n\\t * @param amount The amount to be withdrawn\\n\\t **/\\n\\tevent Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n\\t/**\\n\\t * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n\\t * @param reserve The address of the underlying asset being borrowed\\n\\t * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n\\t * initiator of the transaction on flashLoan()\\n\\t * @param onBehalfOf The address that will be getting the debt\\n\\t * @param amount The amount borrowed out\\n\\t * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\\n\\t * @param borrowRate The numeric rate at which the user has borrowed\\n\\t * @param referral The referral code used\\n\\t **/\\n\\tevent Borrow(\\n\\t\\taddress indexed reserve,\\n\\t\\taddress user,\\n\\t\\taddress indexed onBehalfOf,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 borrowRateMode,\\n\\t\\tuint256 borrowRate,\\n\\t\\tuint16 indexed referral\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted on repay()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The beneficiary of the repayment, getting his debt reduced\\n\\t * @param repayer The address of the user initiating the repay(), providing the funds\\n\\t * @param amount The amount repaid\\n\\t **/\\n\\tevent Repay(address indexed reserve, address indexed user, address indexed repayer, uint256 amount);\\n\\n\\t/**\\n\\t * @dev Emitted on swapBorrowRateMode()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address of the user swapping his rate mode\\n\\t * @param rateMode The rate mode that the user wants to swap to\\n\\t **/\\n\\tevent Swap(address indexed reserve, address indexed user, uint256 rateMode);\\n\\n\\t/**\\n\\t * @dev Emitted on setUserUseReserveAsCollateral()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address of the user enabling the usage as collateral\\n\\t **/\\n\\tevent ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n\\t/**\\n\\t * @dev Emitted on setUserUseReserveAsCollateral()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address of the user enabling the usage as collateral\\n\\t **/\\n\\tevent ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n\\t/**\\n\\t * @dev Emitted on rebalanceStableBorrowRate()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address of the user for which the rebalance has been executed\\n\\t **/\\n\\tevent RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n\\t/**\\n\\t * @dev Emitted on flashLoan()\\n\\t * @param target The address of the flash loan receiver contract\\n\\t * @param initiator The address initiating the flash loan\\n\\t * @param asset The address of the asset being flash borrowed\\n\\t * @param amount The amount flash borrowed\\n\\t * @param premium The fee flash borrowed\\n\\t * @param referralCode The referral code used\\n\\t **/\\n\\tevent FlashLoan(\\n\\t\\taddress indexed target,\\n\\t\\taddress indexed initiator,\\n\\t\\taddress indexed asset,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 premium,\\n\\t\\tuint16 referralCode\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted when the pause is triggered.\\n\\t */\\n\\tevent Paused();\\n\\n\\t/**\\n\\t * @dev Emitted when the pause is lifted.\\n\\t */\\n\\tevent Unpaused();\\n\\n\\t/**\\n\\t * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\\n\\t * LendingPoolCollateral manager using a DELEGATECALL\\n\\t * This allows to have the events in the generated ABI for LendingPool.\\n\\t * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n\\t * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n\\t * @param user The address of the borrower getting liquidated\\n\\t * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n\\t * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\\n\\t * @param liquidator The address of the liquidator\\n\\t * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n\\t * to receive the underlying collateral asset directly\\n\\t **/\\n\\tevent LiquidationCall(\\n\\t\\taddress indexed collateralAsset,\\n\\t\\taddress indexed debtAsset,\\n\\t\\taddress indexed user,\\n\\t\\tuint256 debtToCover,\\n\\t\\tuint256 liquidatedCollateralAmount,\\n\\t\\taddress liquidator,\\n\\t\\tbool receiveAToken\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\\n\\t * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\\n\\t * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\\n\\t * gets added to the LendingPool ABI\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param liquidityRate The new liquidity rate\\n\\t * @param stableBorrowRate The new stable borrow rate\\n\\t * @param variableBorrowRate The new variable borrow rate\\n\\t * @param liquidityIndex The new liquidity index\\n\\t * @param variableBorrowIndex The new variable borrow index\\n\\t **/\\n\\tevent ReserveDataUpdated(\\n\\t\\taddress indexed reserve,\\n\\t\\tuint256 liquidityRate,\\n\\t\\tuint256 stableBorrowRate,\\n\\t\\tuint256 variableBorrowRate,\\n\\t\\tuint256 liquidityIndex,\\n\\t\\tuint256 variableBorrowIndex\\n\\t);\\n\\n\\tfunction initialize(ILendingPoolAddressesProvider provider) external;\\n\\n\\t/**\\n\\t * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n\\t * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\n\\t * @param asset The address of the underlying asset to deposit\\n\\t * @param amount The amount to be deposited\\n\\t * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n\\t *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n\\t *   is a different wallet\\n\\t * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n\\t *   0 if the action is executed directly by the user, without any middle-man\\n\\t **/\\n\\tfunction deposit(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\\n\\n\\tfunction depositWithAutoDLP(\\n\\t\\taddress asset,\\n\\t\\tuint256 amount,\\n\\t\\taddress onBehalfOf,\\n\\t\\tuint16 referralCode\\n\\t) external;\\n\\n\\t/**\\n\\t * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n\\t * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n\\t * @param asset The address of the underlying asset to withdraw\\n\\t * @param amount The underlying amount to be withdrawn\\n\\t *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n\\t * @param to Address that will receive the underlying, same as msg.sender if the user\\n\\t *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n\\t *   different wallet\\n\\t * @return The final amount withdrawn\\n\\t **/\\n\\tfunction withdraw(address asset, uint256 amount, address to) external returns (uint256);\\n\\n\\t/**\\n\\t * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n\\t * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\\n\\t * corresponding debt token (StableDebtToken or VariableDebtToken)\\n\\t * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n\\t *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n\\t * @param asset The address of the underlying asset to borrow\\n\\t * @param amount The amount to be borrowed\\n\\t * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n\\t * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n\\t *   0 if the action is executed directly by the user, without any middle-man\\n\\t * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\\n\\t * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n\\t * if he has been given credit delegation allowance\\n\\t **/\\n\\tfunction borrow(\\n\\t\\taddress asset,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 interestRateMode,\\n\\t\\tuint16 referralCode,\\n\\t\\taddress onBehalfOf\\n\\t) external;\\n\\n\\t/**\\n\\t * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n\\t * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n\\t * @param asset The address of the borrowed underlying asset previously borrowed\\n\\t * @param amount The amount to repay\\n\\t * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n\\t * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n\\t * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n\\t * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n\\t * other borrower whose debt should be removed\\n\\t * @return The final amount repaid\\n\\t **/\\n\\tfunction repay(address asset, uint256 amount, uint256 rateMode, address onBehalfOf) external returns (uint256);\\n\\n\\t/**\\n\\t * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\\n\\t * @param asset The address of the underlying asset borrowed\\n\\t * @param rateMode The rate mode that the user wants to swap to\\n\\t **/\\n\\tfunction swapBorrowRateMode(address asset, uint256 rateMode) external;\\n\\n\\t/**\\n\\t * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n\\t * - Users can be rebalanced if the following conditions are satisfied:\\n\\t *     1. Usage ratio is above 95%\\n\\t *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\\n\\t *        borrowed at a stable rate and depositors are not earning enough\\n\\t * @param asset The address of the underlying asset borrowed\\n\\t * @param user The address of the user to be rebalanced\\n\\t **/\\n\\tfunction rebalanceStableBorrowRate(address asset, address user) external;\\n\\n\\t/**\\n\\t * @dev Allows depositors to enable/disable a specific deposited asset as collateral\\n\\t * @param asset The address of the underlying asset deposited\\n\\t * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\\n\\t **/\\n\\tfunction setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n\\t/**\\n\\t * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n\\t * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n\\t *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n\\t * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n\\t * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n\\t * @param user The address of the borrower getting liquidated\\n\\t * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n\\t * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n\\t * to receive the underlying collateral asset directly\\n\\t **/\\n\\tfunction liquidationCall(\\n\\t\\taddress collateralAsset,\\n\\t\\taddress debtAsset,\\n\\t\\taddress user,\\n\\t\\tuint256 debtToCover,\\n\\t\\tbool receiveAToken\\n\\t) external;\\n\\n\\t/**\\n\\t * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\\n\\t * as long as the amount taken plus a fee is returned.\\n\\t * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\\n\\t * For further details please visit https://developers.aave.com\\n\\t * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\\n\\t * @param assets The addresses of the assets being flash-borrowed\\n\\t * @param amounts The amounts amounts being flash-borrowed\\n\\t * @param modes Types of the debt to open if the flash loan is not returned:\\n\\t *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n\\t *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n\\t *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n\\t * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n\\t * @param params Variadic packed params to pass to the receiver as extra information\\n\\t * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n\\t *   0 if the action is executed directly by the user, without any middle-man\\n\\t **/\\n\\tfunction flashLoan(\\n\\t\\taddress receiverAddress,\\n\\t\\taddress[] calldata assets,\\n\\t\\tuint256[] calldata amounts,\\n\\t\\tuint256[] calldata modes,\\n\\t\\taddress onBehalfOf,\\n\\t\\tbytes calldata params,\\n\\t\\tuint16 referralCode\\n\\t) external;\\n\\n\\t/**\\n\\t * @dev Returns the user account data across all the reserves\\n\\t * @param user The address of the user\\n\\t * @return totalCollateralETH the total collateral in ETH of the user\\n\\t * @return totalDebtETH the total debt in ETH of the user\\n\\t * @return availableBorrowsETH the borrowing power left of the user\\n\\t * @return currentLiquidationThreshold the liquidation threshold of the user\\n\\t * @return ltv the loan to value of the user\\n\\t * @return healthFactor the current health factor of the user\\n\\t **/\\n\\tfunction getUserAccountData(\\n\\t\\taddress user\\n\\t)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256 totalCollateralETH,\\n\\t\\t\\tuint256 totalDebtETH,\\n\\t\\t\\tuint256 availableBorrowsETH,\\n\\t\\t\\tuint256 currentLiquidationThreshold,\\n\\t\\t\\tuint256 ltv,\\n\\t\\t\\tuint256 healthFactor\\n\\t\\t);\\n\\n\\tfunction initReserve(\\n\\t\\taddress reserve,\\n\\t\\taddress aTokenAddress,\\n\\t\\taddress stableDebtAddress,\\n\\t\\taddress variableDebtAddress,\\n\\t\\taddress interestRateStrategyAddress\\n\\t) external;\\n\\n\\tfunction setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress) external;\\n\\n\\tfunction setConfiguration(address reserve, uint256 configuration) external;\\n\\n\\t/**\\n\\t * @dev Returns the configuration of the reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The configuration of the reserve\\n\\t **/\\n\\tfunction getConfiguration(address asset) external view returns (DataTypes.ReserveConfigurationMap memory);\\n\\n\\t/**\\n\\t * @dev Returns the configuration of the user across all the reserves\\n\\t * @param user The user address\\n\\t * @return The configuration of the user\\n\\t **/\\n\\tfunction getUserConfiguration(address user) external view returns (DataTypes.UserConfigurationMap memory);\\n\\n\\t/**\\n\\t * @dev Returns the normalized income normalized income of the reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The reserve's normalized income\\n\\t */\\n\\tfunction getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns the normalized variable debt per unit of asset\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The reserve normalized variable debt\\n\\t */\\n\\tfunction getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns the state and configuration of the reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The state of the reserve\\n\\t **/\\n\\tfunction getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n\\tfunction finalizeTransfer(\\n\\t\\taddress asset,\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 balanceFromAfter,\\n\\t\\tuint256 balanceToBefore\\n\\t) external;\\n\\n\\tfunction getReservesList() external view returns (address[] memory);\\n\\n\\tfunction getAddressesProvider() external view returns (ILendingPoolAddressesProvider);\\n\\n\\tfunction setPause(bool val) external;\\n\\n\\tfunction paused() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd7d7999d232a7a01206cfce2bb140ecb46778decac322d9b12a72976b5b34d5c\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/ILendingPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\n/**\\n * @title LendingPoolAddressesProvider contract\\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\\n * - Owned by the Aave Governance\\n * @author Aave\\n **/\\ninterface ILendingPoolAddressesProvider {\\n\\tevent MarketIdSet(string newMarketId);\\n\\tevent LendingPoolUpdated(address indexed newAddress);\\n\\tevent ConfigurationAdminUpdated(address indexed newAddress);\\n\\tevent EmergencyAdminUpdated(address indexed newAddress);\\n\\tevent LendingPoolConfiguratorUpdated(address indexed newAddress);\\n\\tevent LendingPoolCollateralManagerUpdated(address indexed newAddress);\\n\\tevent PriceOracleUpdated(address indexed newAddress);\\n\\tevent LendingRateOracleUpdated(address indexed newAddress);\\n\\tevent ProxyCreated(bytes32 id, address indexed newAddress);\\n\\tevent AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\\n\\n\\tfunction getMarketId() external view returns (string memory);\\n\\n\\tfunction setMarketId(string calldata marketId) external;\\n\\n\\tfunction setAddress(bytes32 id, address newAddress) external;\\n\\n\\tfunction setAddressAsProxy(bytes32 id, address impl) external;\\n\\n\\tfunction getAddress(bytes32 id) external view returns (address);\\n\\n\\tfunction getLendingPool() external view returns (address);\\n\\n\\tfunction setLendingPoolImpl(address pool) external;\\n\\n\\tfunction getLendingPoolConfigurator() external view returns (address);\\n\\n\\tfunction setLendingPoolConfiguratorImpl(address configurator) external;\\n\\n\\tfunction getLendingPoolCollateralManager() external view returns (address);\\n\\n\\tfunction setLendingPoolCollateralManager(address manager) external;\\n\\n\\tfunction getPoolAdmin() external view returns (address);\\n\\n\\tfunction setPoolAdmin(address admin) external;\\n\\n\\tfunction getEmergencyAdmin() external view returns (address);\\n\\n\\tfunction setEmergencyAdmin(address admin) external;\\n\\n\\tfunction getPriceOracle() external view returns (address);\\n\\n\\tfunction setPriceOracle(address priceOracle) external;\\n\\n\\tfunction getLendingRateOracle() external view returns (address);\\n\\n\\tfunction setLendingRateOracle(address lendingRateOracle) external;\\n\\n\\tfunction getLiquidationFeeTo() external view returns (address);\\n\\n\\tfunction setLiquidationFeeTo(address liquidationFeeTo) external;\\n}\\n\",\"keccak256\":\"0x79e182f661632c6cd8cd15b460c7835f1eda952dd14bc28cf4966f37d4cb2e40\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/ILendingRateOracle.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\n/**\\n * @title ILendingRateOracle interface\\n * @notice Interface for the Aave borrow rate oracle. Provides the average market borrow rate to be used as a base for the stable borrow rate calculations\\n **/\\n\\ninterface ILendingRateOracle {\\n\\t/**\\n    @dev returns the market borrow rate in ray\\n    **/\\n\\tfunction getMarketBorrowRate(address asset) external view returns (uint256);\\n\\n\\t/**\\n    @dev sets the market borrow rate. Rate value must be in ray\\n    **/\\n\\tfunction setMarketBorrowRate(address asset, uint256 rate) external;\\n}\\n\",\"keccak256\":\"0x7b83336fd8eadbfc0eed4d899ebbb2a0603a4ea2d6a24e7aab4a7b7c048bfaa1\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IReserveInterestRateStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\n/**\\n * @title IReserveInterestRateStrategyInterface interface\\n * @dev Interface for the calculation of the interest rates\\n * @author Aave\\n */\\ninterface IReserveInterestRateStrategy {\\n\\tfunction baseVariableBorrowRate() external view returns (uint256);\\n\\n\\tfunction getMaxVariableBorrowRate() external view returns (uint256);\\n\\n\\tfunction calculateInterestRates(\\n\\t\\taddress reserve,\\n\\t\\tuint256 availableLiquidity,\\n\\t\\tuint256 totalStableDebt,\\n\\t\\tuint256 totalVariableDebt,\\n\\t\\tuint256 averageStableBorrowRate,\\n\\t\\tuint256 reserveFactor\\n\\t) external view returns (uint256, uint256, uint256);\\n\\n\\tfunction calculateInterestRates(\\n\\t\\taddress reserve,\\n\\t\\taddress aToken,\\n\\t\\tuint256 liquidityAdded,\\n\\t\\tuint256 liquidityTaken,\\n\\t\\tuint256 totalStableDebt,\\n\\t\\tuint256 totalVariableDebt,\\n\\t\\tuint256 averageStableBorrowRate,\\n\\t\\tuint256 reserveFactor\\n\\t) external view returns (uint256 liquidityRate, uint256 stableBorrowRate, uint256 variableBorrowRate);\\n}\\n\",\"keccak256\":\"0xc1fa4a5530a2f754ddba46205980b70dcea67c2144eb3acb237dc82ce44378e7\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IScaledBalanceToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\ninterface IScaledBalanceToken {\\n\\t/**\\n\\t * @dev Returns the scaled balance of the user. The scaled balance is the sum of all the\\n\\t * updated stored balance divided by the reserve's liquidity index at the moment of the update\\n\\t * @param user The user whose balance is calculated\\n\\t * @return The scaled balance of the user\\n\\t **/\\n\\tfunction scaledBalanceOf(address user) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns the scaled balance of the user and the scaled total supply.\\n\\t * @param user The address of the user\\n\\t * @return The scaled balance of the user\\n\\t * @return The scaled balance and the scaled total supply\\n\\t **/\\n\\tfunction getScaledUserBalanceAndSupply(address user) external view returns (uint256, uint256);\\n\\n\\t/**\\n\\t * @dev Returns the scaled total supply of the variable debt token. Represents sum(debt/index)\\n\\t * @return The scaled total supply\\n\\t **/\\n\\tfunction scaledTotalSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x20a9147e059d362660996b4922825860e759019f4cbbf293d3f4f2ccc7dadc57\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IStableDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport {IInitializableDebtToken} from \\\"./IInitializableDebtToken.sol\\\";\\nimport {IAaveIncentivesController} from \\\"./IAaveIncentivesController.sol\\\";\\n\\n/**\\n * @title IStableDebtToken\\n * @notice Defines the interface for the stable debt token\\n * @dev It does not inherit from IERC20 to save in code size\\n * @author Aave\\n **/\\n\\ninterface IStableDebtToken is IInitializableDebtToken {\\n\\t/**\\n\\t * @dev Emitted when new stable debt is minted\\n\\t * @param user The address of the user who triggered the minting\\n\\t * @param onBehalfOf The recipient of stable debt tokens\\n\\t * @param amount The amount minted\\n\\t * @param currentBalance The current balance of the user\\n\\t * @param balanceIncrease The increase in balance since the last action of the user\\n\\t * @param newRate The rate of the debt after the minting\\n\\t * @param avgStableRate The new average stable rate after the minting\\n\\t * @param newTotalSupply The new total supply of the stable debt token after the action\\n\\t **/\\n\\tevent Mint(\\n\\t\\taddress indexed user,\\n\\t\\taddress indexed onBehalfOf,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 currentBalance,\\n\\t\\tuint256 balanceIncrease,\\n\\t\\tuint256 newRate,\\n\\t\\tuint256 avgStableRate,\\n\\t\\tuint256 newTotalSupply\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted when new stable debt is burned\\n\\t * @param user The address of the user\\n\\t * @param amount The amount being burned\\n\\t * @param currentBalance The current balance of the user\\n\\t * @param balanceIncrease The the increase in balance since the last action of the user\\n\\t * @param avgStableRate The new average stable rate after the burning\\n\\t * @param newTotalSupply The new total supply of the stable debt token after the action\\n\\t **/\\n\\tevent Burn(\\n\\t\\taddress indexed user,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 currentBalance,\\n\\t\\tuint256 balanceIncrease,\\n\\t\\tuint256 avgStableRate,\\n\\t\\tuint256 newTotalSupply\\n\\t);\\n\\n\\t/**\\n\\t * @dev Mints debt token to the `onBehalfOf` address.\\n\\t * - The resulting rate is the weighted average between the rate of the new debt\\n\\t * and the rate of the previous debt\\n\\t * @param user The address receiving the borrowed underlying, being the delegatee in case\\n\\t * of credit delegate, or same as `onBehalfOf` otherwise\\n\\t * @param onBehalfOf The address receiving the debt tokens\\n\\t * @param amount The amount of debt tokens to mint\\n\\t * @param rate The rate of the debt being minted\\n\\t **/\\n\\tfunction mint(address user, address onBehalfOf, uint256 amount, uint256 rate) external returns (bool);\\n\\n\\t/**\\n\\t * @dev Burns debt of `user`\\n\\t * - The resulting rate is the weighted average between the rate of the new debt\\n\\t * and the rate of the previous debt\\n\\t * @param user The address of the user getting his debt burned\\n\\t * @param amount The amount of debt tokens getting burned\\n\\t **/\\n\\tfunction burn(address user, uint256 amount) external;\\n\\n\\t/**\\n\\t * @dev Returns the average rate of all the stable rate loans.\\n\\t * @return The average stable rate\\n\\t **/\\n\\tfunction getAverageStableRate() external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns the stable rate of the user debt\\n\\t * @return The stable rate of the user\\n\\t **/\\n\\tfunction getUserStableRate(address user) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns the timestamp of the last update of the user\\n\\t * @return The timestamp\\n\\t **/\\n\\tfunction getUserLastUpdated(address user) external view returns (uint40);\\n\\n\\t/**\\n\\t * @dev Returns the principal, the total supply and the average stable rate\\n\\t **/\\n\\tfunction getSupplyData() external view returns (uint256, uint256, uint256, uint40);\\n\\n\\t/**\\n\\t * @dev Returns the timestamp of the last update of the total supply\\n\\t * @return The timestamp\\n\\t **/\\n\\tfunction getTotalSupplyLastUpdated() external view returns (uint40);\\n\\n\\t/**\\n\\t * @dev Returns the total supply and the average stable rate\\n\\t **/\\n\\tfunction getTotalSupplyAndAvgRate() external view returns (uint256, uint256);\\n\\n\\t/**\\n\\t * @dev Returns the principal debt balance of the user\\n\\t * @return The debt balance of the user since the last burn/mint action\\n\\t **/\\n\\tfunction principalBalanceOf(address user) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns the address of the incentives controller contract\\n\\t **/\\n\\tfunction getIncentivesController() external view returns (IAaveIncentivesController);\\n}\\n\",\"keccak256\":\"0xed20abf39da70863a5fd49d173c907cea1acc2fd09c255c4903990c82fc302e0\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IUiPoolDataProviderV3.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {ILendingPoolAddressesProvider} from \\\"./ILendingPoolAddressesProvider.sol\\\";\\n\\ninterface IUiPoolDataProviderV3 {\\n\\tstruct AggregatedReserveData {\\n\\t\\taddress underlyingAsset;\\n\\t\\tstring name;\\n\\t\\tstring symbol;\\n\\t\\tuint256 decimals;\\n\\t\\tuint256 baseLTVasCollateral;\\n\\t\\tuint256 reserveLiquidationThreshold;\\n\\t\\tuint256 reserveLiquidationBonus;\\n\\t\\tuint256 reserveFactor;\\n\\t\\tbool usageAsCollateralEnabled;\\n\\t\\tbool borrowingEnabled;\\n\\t\\tbool stableBorrowRateEnabled;\\n\\t\\tbool isActive;\\n\\t\\tbool isFrozen;\\n\\t\\t// base data\\n\\t\\tuint128 liquidityIndex;\\n\\t\\tuint128 variableBorrowIndex;\\n\\t\\tuint128 liquidityRate;\\n\\t\\tuint128 variableBorrowRate;\\n\\t\\tuint128 stableBorrowRate;\\n\\t\\tuint40 lastUpdateTimestamp;\\n\\t\\taddress aTokenAddress;\\n\\t\\taddress stableDebtTokenAddress;\\n\\t\\taddress variableDebtTokenAddress;\\n\\t\\taddress interestRateStrategyAddress;\\n\\t\\t//\\n\\t\\tuint256 availableLiquidity;\\n\\t\\tuint256 totalPrincipalStableDebt;\\n\\t\\tuint256 averageStableRate;\\n\\t\\tuint256 stableDebtLastUpdateTimestamp;\\n\\t\\tuint256 totalScaledVariableDebt;\\n\\t\\tuint256 priceInMarketReferenceCurrency;\\n\\t\\tuint256 variableRateSlope1;\\n\\t\\tuint256 variableRateSlope2;\\n\\t\\tuint256 stableRateSlope1;\\n\\t\\tuint256 stableRateSlope2;\\n\\t\\t// v3\\n\\t\\tbool isPaused;\\n\\t\\tuint128 accruedToTreasury;\\n\\t\\tuint128 unbacked;\\n\\t\\tuint128 isolationModeTotalDebt;\\n\\t\\t//\\n\\t\\tuint256 debtCeiling;\\n\\t\\tuint256 debtCeilingDecimals;\\n\\t\\tuint8 eModeCategoryId;\\n\\t\\tuint256 borrowCap;\\n\\t\\tuint256 supplyCap;\\n\\t\\t// eMode\\n\\t\\tuint16 eModeLtv;\\n\\t\\tuint16 eModeLiquidationThreshold;\\n\\t\\tuint16 eModeLiquidationBonus;\\n\\t\\taddress eModePriceSource;\\n\\t\\tstring eModeLabel;\\n\\t\\tbool borrowableInIsolation;\\n\\t}\\n\\n\\tstruct UserReserveData {\\n\\t\\taddress underlyingAsset;\\n\\t\\tuint256 scaledATokenBalance;\\n\\t\\tbool usageAsCollateralEnabledOnUser;\\n\\t\\tuint256 stableBorrowRate;\\n\\t\\tuint256 scaledVariableDebt;\\n\\t\\tuint256 principalStableDebt;\\n\\t\\tuint256 stableBorrowLastUpdateTimestamp;\\n\\t}\\n\\n\\tstruct BaseCurrencyInfo {\\n\\t\\tuint256 marketReferenceCurrencyUnit;\\n\\t\\tint256 marketReferenceCurrencyPriceInUsd;\\n\\t\\tint256 networkBaseTokenPriceInUsd;\\n\\t\\tuint8 networkBaseTokenPriceDecimals;\\n\\t}\\n\\n\\tfunction getReservesList(ILendingPoolAddressesProvider provider) external view returns (address[] memory);\\n\\n\\tfunction getReservesData(\\n\\t\\tILendingPoolAddressesProvider provider\\n\\t) external view returns (AggregatedReserveData[] memory, BaseCurrencyInfo memory);\\n\\n\\tfunction getUserReservesData(\\n\\t\\tILendingPoolAddressesProvider provider,\\n\\t\\taddress user\\n\\t) external view returns (UserReserveData[] memory, uint8);\\n}\\n\",\"keccak256\":\"0x774e45f0f7d8cceec6dd90939a1e6058514b90d4f2f46f1c8dcd481f8eed4d0f\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IVariableDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport {IScaledBalanceToken} from \\\"./IScaledBalanceToken.sol\\\";\\nimport {IInitializableDebtToken} from \\\"./IInitializableDebtToken.sol\\\";\\nimport {IAaveIncentivesController} from \\\"./IAaveIncentivesController.sol\\\";\\n\\n/**\\n * @title IVariableDebtToken\\n * @author Aave\\n * @notice Defines the basic interface for a variable debt token.\\n **/\\ninterface IVariableDebtToken is IScaledBalanceToken, IInitializableDebtToken {\\n\\t/**\\n\\t * @dev Emitted after the mint action\\n\\t * @param from The address performing the mint\\n\\t * @param onBehalfOf The address of the user on which behalf minting has been performed\\n\\t * @param value The amount to be minted\\n\\t * @param index The last index of the reserve\\n\\t **/\\n\\tevent Mint(address indexed from, address indexed onBehalfOf, uint256 value, uint256 index);\\n\\n\\t/**\\n\\t * @dev Mints debt token to the `onBehalfOf` address\\n\\t * @param user The address receiving the borrowed underlying, being the delegatee in case\\n\\t * of credit delegate, or same as `onBehalfOf` otherwise\\n\\t * @param onBehalfOf The address receiving the debt tokens\\n\\t * @param amount The amount of debt being minted\\n\\t * @param index The variable debt index of the reserve\\n\\t * @return `true` if the the previous balance of the user is 0\\n\\t **/\\n\\tfunction mint(address user, address onBehalfOf, uint256 amount, uint256 index) external returns (bool);\\n\\n\\t/**\\n\\t * @dev Emitted when variable debt is burnt\\n\\t * @param user The user which debt has been burned\\n\\t * @param amount The amount of debt being burned\\n\\t * @param index The index of the user\\n\\t **/\\n\\tevent Burn(address indexed user, uint256 amount, uint256 index);\\n\\n\\t/**\\n\\t * @dev Burns user variable debt\\n\\t * @param user The user which debt is burnt\\n\\t * @param index The variable debt index of the reserve\\n\\t **/\\n\\tfunction burn(address user, uint256 amount, uint256 index) external;\\n\\n\\t/**\\n\\t * @dev Returns the address of the incentives controller contract\\n\\t **/\\n\\tfunction getIncentivesController() external view returns (IAaveIncentivesController);\\n}\\n\",\"keccak256\":\"0x45c38c0244862161745e30c52156a7d37ccce31d20eded4ee6538696ccec7aab\",\"license\":\"agpl-3.0\"},\"contracts/lending/UiPoolDataProviderV2V3.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {ILendingPoolAddressesProvider} from \\\"../interfaces/ILendingPoolAddressesProvider.sol\\\";\\nimport {IUiPoolDataProviderV3} from \\\"../interfaces/IUiPoolDataProviderV3.sol\\\";\\nimport {ILendingPool} from \\\"../interfaces/ILendingPool.sol\\\";\\nimport {IAaveOracle} from \\\"../interfaces/IAaveOracle.sol\\\";\\nimport {IAToken} from \\\"../interfaces/IAToken.sol\\\";\\nimport {IVariableDebtToken} from \\\"../interfaces/IVariableDebtToken.sol\\\";\\nimport {IStableDebtToken} from \\\"../interfaces/IStableDebtToken.sol\\\";\\nimport {WadRayMath} from \\\"./libraries/math/WadRayMath.sol\\\";\\nimport {ReserveConfiguration} from \\\"./libraries/configuration/ReserveConfiguration.sol\\\";\\nimport {UserConfiguration} from \\\"./libraries/configuration/UserConfiguration.sol\\\";\\nimport {DataTypes} from \\\"./libraries/types/DataTypes.sol\\\";\\nimport {IChainlinkAggregator} from \\\"../interfaces/IChainlinkAggregator.sol\\\";\\nimport {DefaultReserveInterestRateStrategy} from \\\"./lendingpool/DefaultReserveInterestRateStrategy.sol\\\";\\nimport {IERC20DetailedBytes} from \\\"../interfaces/IERC20DetailedBytes.sol\\\";\\n\\ncontract UiPoolDataProviderV2V3 is IUiPoolDataProviderV3 {\\n\\tusing WadRayMath for uint256;\\n\\tusing ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\n\\tusing UserConfiguration for DataTypes.UserConfigurationMap;\\n\\n\\tIChainlinkAggregator public immutable networkBaseTokenPriceInUsdProxyAggregator;\\n\\tIChainlinkAggregator public immutable marketReferenceCurrencyPriceInUsdProxyAggregator;\\n\\tuint256 public constant ETH_CURRENCY_UNIT = 1 ether;\\n\\taddress public constant MKRAddress = 0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2;\\n\\n\\tconstructor(\\n\\t\\tIChainlinkAggregator _networkBaseTokenPriceInUsdProxyAggregator,\\n\\t\\tIChainlinkAggregator _marketReferenceCurrencyPriceInUsdProxyAggregator\\n\\t) {\\n\\t\\tnetworkBaseTokenPriceInUsdProxyAggregator = _networkBaseTokenPriceInUsdProxyAggregator;\\n\\t\\tmarketReferenceCurrencyPriceInUsdProxyAggregator = _marketReferenceCurrencyPriceInUsdProxyAggregator;\\n\\t}\\n\\n\\tfunction getInterestRateStrategySlopes(\\n\\t\\tDefaultReserveInterestRateStrategy interestRateStrategy\\n\\t) internal view returns (uint256, uint256, uint256, uint256) {\\n\\t\\treturn (\\n\\t\\t\\tinterestRateStrategy.variableRateSlope1(),\\n\\t\\t\\tinterestRateStrategy.variableRateSlope2(),\\n\\t\\t\\tinterestRateStrategy.stableRateSlope1(),\\n\\t\\t\\tinterestRateStrategy.stableRateSlope2()\\n\\t\\t);\\n\\t}\\n\\n\\tfunction getReservesList(ILendingPoolAddressesProvider provider) public view returns (address[] memory) {\\n\\t\\tILendingPool lendingPool = ILendingPool(provider.getLendingPool());\\n\\t\\treturn lendingPool.getReservesList();\\n\\t}\\n\\n\\tfunction getReservesData(\\n\\t\\tILendingPoolAddressesProvider provider\\n\\t) public view returns (AggregatedReserveData[] memory, BaseCurrencyInfo memory) {\\n\\t\\tIAaveOracle oracle = IAaveOracle(provider.getPriceOracle());\\n\\t\\tILendingPool lendingPool = ILendingPool(provider.getLendingPool());\\n\\t\\taddress[] memory reserves = lendingPool.getReservesList();\\n\\t\\tAggregatedReserveData[] memory reservesData = new AggregatedReserveData[](reserves.length);\\n\\n\\t\\tfor (uint256 i = 0; i < reserves.length; ) {\\n\\t\\t\\tAggregatedReserveData memory reserveData = reservesData[i];\\n\\t\\t\\treserveData.underlyingAsset = reserves[i];\\n\\n\\t\\t\\t// reserve current state\\n\\t\\t\\tDataTypes.ReserveData memory baseData = lendingPool.getReserveData(reserveData.underlyingAsset);\\n\\t\\t\\treserveData.liquidityIndex = baseData.liquidityIndex;\\n\\t\\t\\treserveData.variableBorrowIndex = baseData.variableBorrowIndex;\\n\\t\\t\\treserveData.liquidityRate = baseData.currentLiquidityRate;\\n\\t\\t\\treserveData.variableBorrowRate = baseData.currentVariableBorrowRate;\\n\\t\\t\\treserveData.stableBorrowRate = baseData.currentStableBorrowRate;\\n\\t\\t\\treserveData.lastUpdateTimestamp = baseData.lastUpdateTimestamp;\\n\\t\\t\\treserveData.aTokenAddress = baseData.aTokenAddress;\\n\\t\\t\\treserveData.stableDebtTokenAddress = baseData.stableDebtTokenAddress;\\n\\t\\t\\treserveData.variableDebtTokenAddress = baseData.variableDebtTokenAddress;\\n\\t\\t\\treserveData.interestRateStrategyAddress = baseData.interestRateStrategyAddress;\\n\\t\\t\\treserveData.priceInMarketReferenceCurrency = oracle.getAssetPrice(reserveData.underlyingAsset);\\n\\n\\t\\t\\treserveData.availableLiquidity = IERC20Metadata(reserveData.underlyingAsset).balanceOf(\\n\\t\\t\\t\\treserveData.aTokenAddress\\n\\t\\t\\t);\\n\\t\\t\\t(\\n\\t\\t\\t\\treserveData.totalPrincipalStableDebt,\\n\\t\\t\\t\\t,\\n\\t\\t\\t\\treserveData.averageStableRate,\\n\\t\\t\\t\\treserveData.stableDebtLastUpdateTimestamp\\n\\t\\t\\t) = IStableDebtToken(reserveData.stableDebtTokenAddress).getSupplyData();\\n\\t\\t\\treserveData.totalScaledVariableDebt = IVariableDebtToken(reserveData.variableDebtTokenAddress)\\n\\t\\t\\t\\t.scaledTotalSupply();\\n\\n\\t\\t\\tif (address(reserveData.underlyingAsset) == address(MKRAddress)) {\\n\\t\\t\\t\\tbytes32 symbol = IERC20DetailedBytes(reserveData.underlyingAsset).symbol();\\n\\t\\t\\t\\treserveData.symbol = bytes32ToString(symbol);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\treserveData.symbol = IERC20Metadata(reserveData.underlyingAsset).symbol();\\n\\t\\t\\t}\\n\\n\\t\\t\\t(\\n\\t\\t\\t\\treserveData.baseLTVasCollateral,\\n\\t\\t\\t\\treserveData.reserveLiquidationThreshold,\\n\\t\\t\\t\\treserveData.reserveLiquidationBonus,\\n\\t\\t\\t\\treserveData.decimals,\\n\\t\\t\\t\\treserveData.reserveFactor\\n\\t\\t\\t) = baseData.configuration.getParamsMemory();\\n\\t\\t\\t(\\n\\t\\t\\t\\treserveData.isActive,\\n\\t\\t\\t\\treserveData.isFrozen,\\n\\t\\t\\t\\treserveData.borrowingEnabled,\\n\\t\\t\\t\\treserveData.stableBorrowRateEnabled\\n\\t\\t\\t) = baseData.configuration.getFlagsMemory();\\n\\t\\t\\treserveData.usageAsCollateralEnabled = reserveData.baseLTVasCollateral != 0;\\n\\t\\t\\t(\\n\\t\\t\\t\\treserveData.variableRateSlope1,\\n\\t\\t\\t\\treserveData.variableRateSlope2,\\n\\t\\t\\t\\treserveData.stableRateSlope1,\\n\\t\\t\\t\\treserveData.stableRateSlope2\\n\\t\\t\\t) = getInterestRateStrategySlopes(\\n\\t\\t\\t\\tDefaultReserveInterestRateStrategy(reserveData.interestRateStrategyAddress)\\n\\t\\t\\t);\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tBaseCurrencyInfo memory baseCurrencyInfo;\\n\\t\\tbaseCurrencyInfo.networkBaseTokenPriceInUsd = networkBaseTokenPriceInUsdProxyAggregator.latestAnswer();\\n\\t\\tbaseCurrencyInfo.networkBaseTokenPriceDecimals = networkBaseTokenPriceInUsdProxyAggregator.decimals();\\n\\n\\t\\ttry oracle.BASE_CURRENCY_UNIT() returns (uint256 baseCurrencyUnit) {\\n\\t\\t\\tif (ETH_CURRENCY_UNIT == baseCurrencyUnit) {\\n\\t\\t\\t\\tbaseCurrencyInfo.marketReferenceCurrencyUnit = ETH_CURRENCY_UNIT;\\n\\t\\t\\t\\tbaseCurrencyInfo.marketReferenceCurrencyPriceInUsd = marketReferenceCurrencyPriceInUsdProxyAggregator\\n\\t\\t\\t\\t\\t.latestAnswer();\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tbaseCurrencyInfo.marketReferenceCurrencyUnit = baseCurrencyUnit;\\n\\t\\t\\t\\tbaseCurrencyInfo.marketReferenceCurrencyPriceInUsd = int256(baseCurrencyUnit);\\n\\t\\t\\t}\\n\\t\\t} catch (bytes memory /*lowLevelData*/) {\\n\\t\\t\\tbaseCurrencyInfo.marketReferenceCurrencyUnit = ETH_CURRENCY_UNIT;\\n\\t\\t\\tbaseCurrencyInfo.marketReferenceCurrencyPriceInUsd = marketReferenceCurrencyPriceInUsdProxyAggregator\\n\\t\\t\\t\\t.latestAnswer();\\n\\t\\t}\\n\\n\\t\\treturn (reservesData, baseCurrencyInfo);\\n\\t}\\n\\n\\tfunction getUserReservesData(\\n\\t\\tILendingPoolAddressesProvider provider,\\n\\t\\taddress user\\n\\t) external view returns (UserReserveData[] memory, uint8) {\\n\\t\\tILendingPool lendingPool = ILendingPool(provider.getLendingPool());\\n\\t\\taddress[] memory reserves = lendingPool.getReservesList();\\n\\t\\tDataTypes.UserConfigurationMap memory userConfig = lendingPool.getUserConfiguration(user);\\n\\n\\t\\tUserReserveData[] memory userReservesData = new UserReserveData[](user != address(0) ? reserves.length : 0);\\n\\n\\t\\tfor (uint256 i = 0; i < reserves.length; ) {\\n\\t\\t\\tDataTypes.ReserveData memory baseData = lendingPool.getReserveData(reserves[i]);\\n\\n\\t\\t\\t// user reserve data\\n\\t\\t\\tuserReservesData[i].underlyingAsset = reserves[i];\\n\\t\\t\\tuserReservesData[i].scaledATokenBalance = IAToken(baseData.aTokenAddress).scaledBalanceOf(user);\\n\\t\\t\\tuserReservesData[i].usageAsCollateralEnabledOnUser = userConfig.isUsingAsCollateral(i);\\n\\n\\t\\t\\tif (userConfig.isBorrowing(i)) {\\n\\t\\t\\t\\tuserReservesData[i].scaledVariableDebt = IVariableDebtToken(baseData.variableDebtTokenAddress)\\n\\t\\t\\t\\t\\t.scaledBalanceOf(user);\\n\\t\\t\\t\\tuserReservesData[i].principalStableDebt = IStableDebtToken(baseData.stableDebtTokenAddress)\\n\\t\\t\\t\\t\\t.principalBalanceOf(user);\\n\\t\\t\\t\\tif (userReservesData[i].principalStableDebt != 0) {\\n\\t\\t\\t\\t\\tuserReservesData[i].stableBorrowRate = IStableDebtToken(baseData.stableDebtTokenAddress)\\n\\t\\t\\t\\t\\t\\t.getUserStableRate(user);\\n\\t\\t\\t\\t\\tuserReservesData[i].stableBorrowLastUpdateTimestamp = IStableDebtToken(\\n\\t\\t\\t\\t\\t\\tbaseData.stableDebtTokenAddress\\n\\t\\t\\t\\t\\t).getUserLastUpdated(user);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t// Return 0 to be compatible with v3 userEmodeCategoryId return\\n\\t\\treturn (userReservesData, 0);\\n\\t}\\n\\n\\tfunction bytes32ToString(bytes32 _bytes32) public pure returns (string memory) {\\n\\t\\tuint8 i = 0;\\n\\t\\twhile (i < 32 && _bytes32[i] != 0) {\\n\\t\\t\\ti++;\\n\\t\\t}\\n\\t\\tbytes memory bytesArray = new bytes(i);\\n\\t\\tfor (i = 0; i < 32 && _bytes32[i] != 0; ) {\\n\\t\\t\\tbytesArray[i] = _bytes32[i];\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn string(bytesArray);\\n\\t}\\n}\\n\",\"keccak256\":\"0x9f07a993d8a453bbdc16b737d9661040334e059fbeb704f35c9c4f25cdecb59a\",\"license\":\"agpl-3.0\"},\"contracts/lending/lendingpool/DefaultReserveInterestRateStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {IReserveInterestRateStrategy} from \\\"../../interfaces/IReserveInterestRateStrategy.sol\\\";\\nimport {WadRayMath} from \\\"../libraries/math/WadRayMath.sol\\\";\\nimport {PercentageMath} from \\\"../libraries/math/PercentageMath.sol\\\";\\nimport {ILendingPoolAddressesProvider} from \\\"../../interfaces/ILendingPoolAddressesProvider.sol\\\";\\nimport {ILendingRateOracle} from \\\"../../interfaces/ILendingRateOracle.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title DefaultReserveInterestRateStrategy contract\\n * @notice Implements the calculation of the interest rates depending on the reserve state\\n * @dev The model of interest rate is based on 2 slopes, one before the `OPTIMAL_UTILIZATION_RATE`\\n * point of utilization and another from that one to 100%\\n * - An instance of this same contract, can't be used across different Aave markets, due to the caching\\n *   of the LendingPoolAddressesProvider\\n * @author Aave\\n **/\\ncontract DefaultReserveInterestRateStrategy is IReserveInterestRateStrategy {\\n\\tusing WadRayMath for uint256;\\n\\tusing SafeMath for uint256;\\n\\tusing PercentageMath for uint256;\\n\\n\\t/**\\n\\t * @dev this constant represents the utilization rate at which the pool aims to obtain most competitive borrow rates.\\n\\t * Expressed in ray\\n\\t **/\\n\\tuint256 public immutable OPTIMAL_UTILIZATION_RATE;\\n\\n\\t/**\\n\\t * @dev This constant represents the excess utilization rate above the optimal. It's always equal to\\n\\t * 1-optimal utilization rate. Added as a constant here for gas optimizations.\\n\\t * Expressed in ray\\n\\t **/\\n\\n\\tuint256 public immutable EXCESS_UTILIZATION_RATE;\\n\\n\\tILendingPoolAddressesProvider public immutable addressesProvider;\\n\\n\\t// Base variable borrow rate when Utilization rate = 0. Expressed in ray\\n\\tuint256 internal immutable _baseVariableBorrowRate;\\n\\n\\t// Slope of the variable interest curve when utilization rate > 0 and <= OPTIMAL_UTILIZATION_RATE. Expressed in ray\\n\\tuint256 internal immutable _variableRateSlope1;\\n\\n\\t// Slope of the variable interest curve when utilization rate > OPTIMAL_UTILIZATION_RATE. Expressed in ray\\n\\tuint256 internal immutable _variableRateSlope2;\\n\\n\\t// Slope of the stable interest curve when utilization rate > 0 and <= OPTIMAL_UTILIZATION_RATE. Expressed in ray\\n\\tuint256 internal immutable _stableRateSlope1;\\n\\n\\t// Slope of the stable interest curve when utilization rate > OPTIMAL_UTILIZATION_RATE. Expressed in ray\\n\\tuint256 internal immutable _stableRateSlope2;\\n\\n\\tconstructor(\\n\\t\\tILendingPoolAddressesProvider provider,\\n\\t\\tuint256 optimalUtilizationRate_,\\n\\t\\tuint256 baseVariableBorrowRate_,\\n\\t\\tuint256 variableRateSlope1_,\\n\\t\\tuint256 variableRateSlope2_,\\n\\t\\tuint256 stableRateSlope1_,\\n\\t\\tuint256 stableRateSlope2_\\n\\t) {\\n\\t\\tOPTIMAL_UTILIZATION_RATE = optimalUtilizationRate_;\\n\\t\\tEXCESS_UTILIZATION_RATE = WadRayMath.ray().sub(optimalUtilizationRate_);\\n\\t\\taddressesProvider = provider;\\n\\t\\t_baseVariableBorrowRate = baseVariableBorrowRate_;\\n\\t\\t_variableRateSlope1 = variableRateSlope1_;\\n\\t\\t_variableRateSlope2 = variableRateSlope2_;\\n\\t\\t_stableRateSlope1 = stableRateSlope1_;\\n\\t\\t_stableRateSlope2 = stableRateSlope2_;\\n\\t}\\n\\n\\tfunction variableRateSlope1() external view returns (uint256) {\\n\\t\\treturn _variableRateSlope1;\\n\\t}\\n\\n\\tfunction variableRateSlope2() external view returns (uint256) {\\n\\t\\treturn _variableRateSlope2;\\n\\t}\\n\\n\\tfunction stableRateSlope1() external view returns (uint256) {\\n\\t\\treturn _stableRateSlope1;\\n\\t}\\n\\n\\tfunction stableRateSlope2() external view returns (uint256) {\\n\\t\\treturn _stableRateSlope2;\\n\\t}\\n\\n\\tfunction baseVariableBorrowRate() external view returns (uint256) {\\n\\t\\treturn _baseVariableBorrowRate;\\n\\t}\\n\\n\\tfunction getMaxVariableBorrowRate() external view returns (uint256) {\\n\\t\\treturn _baseVariableBorrowRate.add(_variableRateSlope1).add(_variableRateSlope2);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Calculates the interest rates depending on the reserve's state and configurations\\n\\t * @param reserve The address of the reserve\\n\\t * @param liquidityAdded The liquidity added during the operation\\n\\t * @param liquidityTaken The liquidity taken during the operation\\n\\t * @param totalStableDebt The total borrowed from the reserve a stable rate\\n\\t * @param totalVariableDebt The total borrowed from the reserve at a variable rate\\n\\t * @param averageStableBorrowRate The weighted average of all the stable rate loans\\n\\t * @param reserveFactor The reserve portion of the interest that goes to the treasury of the market\\n\\t * @return The liquidity rate, the stable borrow rate and the variable borrow rate\\n\\t **/\\n\\tfunction calculateInterestRates(\\n\\t\\taddress reserve,\\n\\t\\taddress aToken,\\n\\t\\tuint256 liquidityAdded,\\n\\t\\tuint256 liquidityTaken,\\n\\t\\tuint256 totalStableDebt,\\n\\t\\tuint256 totalVariableDebt,\\n\\t\\tuint256 averageStableBorrowRate,\\n\\t\\tuint256 reserveFactor\\n\\t) external view returns (uint256, uint256, uint256) {\\n\\t\\tuint256 availableLiquidity = IERC20(reserve).balanceOf(aToken);\\n\\t\\t//avoid stack too deep\\n\\t\\tavailableLiquidity = availableLiquidity.add(liquidityAdded).sub(liquidityTaken);\\n\\n\\t\\treturn\\n\\t\\t\\tcalculateInterestRates(\\n\\t\\t\\t\\treserve,\\n\\t\\t\\t\\tavailableLiquidity,\\n\\t\\t\\t\\ttotalStableDebt,\\n\\t\\t\\t\\ttotalVariableDebt,\\n\\t\\t\\t\\taverageStableBorrowRate,\\n\\t\\t\\t\\treserveFactor\\n\\t\\t\\t);\\n\\t}\\n\\n\\tstruct CalcInterestRatesLocalVars {\\n\\t\\tuint256 totalDebt;\\n\\t\\tuint256 currentVariableBorrowRate;\\n\\t\\tuint256 currentStableBorrowRate;\\n\\t\\tuint256 currentLiquidityRate;\\n\\t\\tuint256 utilizationRate;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Calculates the interest rates depending on the reserve's state and configurations.\\n\\t * NOTE This function is kept for compatibility with the previous DefaultInterestRateStrategy interface.\\n\\t * New protocol implementation uses the new calculateInterestRates() interface\\n\\t * @param reserve The address of the reserve\\n\\t * @param availableLiquidity The liquidity available in the corresponding aToken\\n\\t * @param totalStableDebt The total borrowed from the reserve a stable rate\\n\\t * @param totalVariableDebt The total borrowed from the reserve at a variable rate\\n\\t * @param averageStableBorrowRate The weighted average of all the stable rate loans\\n\\t * @param reserveFactor The reserve portion of the interest that goes to the treasury of the market\\n\\t * @return The liquidity rate, the stable borrow rate and the variable borrow rate\\n\\t **/\\n\\tfunction calculateInterestRates(\\n\\t\\taddress reserve,\\n\\t\\tuint256 availableLiquidity,\\n\\t\\tuint256 totalStableDebt,\\n\\t\\tuint256 totalVariableDebt,\\n\\t\\tuint256 averageStableBorrowRate,\\n\\t\\tuint256 reserveFactor\\n\\t) public view returns (uint256, uint256, uint256) {\\n\\t\\tCalcInterestRatesLocalVars memory vars;\\n\\n\\t\\tvars.totalDebt = totalStableDebt.add(totalVariableDebt);\\n\\t\\tvars.currentVariableBorrowRate = 0;\\n\\t\\tvars.currentStableBorrowRate = 0;\\n\\t\\tvars.currentLiquidityRate = 0;\\n\\n\\t\\tvars.utilizationRate = vars.totalDebt == 0 ? 0 : vars.totalDebt.rayDiv(availableLiquidity.add(vars.totalDebt));\\n\\n\\t\\tvars.currentStableBorrowRate = ILendingRateOracle(addressesProvider.getLendingRateOracle()).getMarketBorrowRate(\\n\\t\\t\\treserve\\n\\t\\t);\\n\\n\\t\\tif (vars.utilizationRate > OPTIMAL_UTILIZATION_RATE) {\\n\\t\\t\\tuint256 excessUtilizationRateRatio = vars.utilizationRate.sub(OPTIMAL_UTILIZATION_RATE).rayDiv(\\n\\t\\t\\t\\tEXCESS_UTILIZATION_RATE\\n\\t\\t\\t);\\n\\n\\t\\t\\tvars.currentStableBorrowRate = vars.currentStableBorrowRate.add(_stableRateSlope1).add(\\n\\t\\t\\t\\t_stableRateSlope2.rayMul(excessUtilizationRateRatio)\\n\\t\\t\\t);\\n\\n\\t\\t\\tvars.currentVariableBorrowRate = _baseVariableBorrowRate.add(_variableRateSlope1).add(\\n\\t\\t\\t\\t_variableRateSlope2.rayMul(excessUtilizationRateRatio)\\n\\t\\t\\t);\\n\\t\\t} else {\\n\\t\\t\\tvars.currentStableBorrowRate = vars.currentStableBorrowRate.add(\\n\\t\\t\\t\\t_stableRateSlope1.rayMul(vars.utilizationRate.rayDiv(OPTIMAL_UTILIZATION_RATE))\\n\\t\\t\\t);\\n\\t\\t\\tvars.currentVariableBorrowRate = _baseVariableBorrowRate.add(\\n\\t\\t\\t\\tvars.utilizationRate.rayMul(_variableRateSlope1).rayDiv(OPTIMAL_UTILIZATION_RATE)\\n\\t\\t\\t);\\n\\t\\t}\\n\\n\\t\\tvars.currentLiquidityRate = _getOverallBorrowRate(\\n\\t\\t\\ttotalStableDebt,\\n\\t\\t\\ttotalVariableDebt,\\n\\t\\t\\tvars.currentVariableBorrowRate,\\n\\t\\t\\taverageStableBorrowRate\\n\\t\\t).rayMul(vars.utilizationRate).percentMul(PercentageMath.PERCENTAGE_FACTOR.sub(reserveFactor));\\n\\n\\t\\treturn (vars.currentLiquidityRate, vars.currentStableBorrowRate, vars.currentVariableBorrowRate);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Calculates the overall borrow rate as the weighted average between the total variable debt and total stable debt\\n\\t * @param totalStableDebt The total borrowed from the reserve a stable rate\\n\\t * @param totalVariableDebt The total borrowed from the reserve at a variable rate\\n\\t * @param currentVariableBorrowRate The current variable borrow rate of the reserve\\n\\t * @param currentAverageStableBorrowRate The current weighted average of all the stable rate loans\\n\\t * @return The weighted averaged borrow rate\\n\\t **/\\n\\tfunction _getOverallBorrowRate(\\n\\t\\tuint256 totalStableDebt,\\n\\t\\tuint256 totalVariableDebt,\\n\\t\\tuint256 currentVariableBorrowRate,\\n\\t\\tuint256 currentAverageStableBorrowRate\\n\\t) internal pure returns (uint256) {\\n\\t\\tuint256 totalDebt = totalStableDebt.add(totalVariableDebt);\\n\\n\\t\\tif (totalDebt == 0) return 0;\\n\\n\\t\\tuint256 weightedVariableRate = totalVariableDebt.wadToRay().rayMul(currentVariableBorrowRate);\\n\\n\\t\\tuint256 weightedStableRate = totalStableDebt.wadToRay().rayMul(currentAverageStableBorrowRate);\\n\\n\\t\\tuint256 overallBorrowRate = weightedVariableRate.add(weightedStableRate).rayDiv(totalDebt.wadToRay());\\n\\n\\t\\treturn overallBorrowRate;\\n\\t}\\n}\\n\",\"keccak256\":\"0xfd8739581b2e012503f034cf1259bb68ea541cc11aa8081645ab87bec8e058b9\",\"license\":\"agpl-3.0\"},\"contracts/lending/libraries/configuration/ReserveConfiguration.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\n\\n/**\\n * @title ReserveConfiguration library\\n * @author Aave\\n * @notice Implements the bitmap logic to handle the reserve configuration\\n */\\nlibrary ReserveConfiguration {\\n\\tuint256 constant LTV_MASK =                   0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000; // prettier-ignore\\n\\tuint256 constant LIQUIDATION_THRESHOLD_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFF; // prettier-ignore\\n\\tuint256 constant LIQUIDATION_BONUS_MASK =     0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFF; // prettier-ignore\\n\\tuint256 constant DECIMALS_MASK =              0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFF; // prettier-ignore\\n\\tuint256 constant ACTIVE_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFF; // prettier-ignore\\n\\tuint256 constant FROZEN_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFF; // prettier-ignore\\n\\tuint256 constant BORROWING_MASK =             0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFF; // prettier-ignore\\n\\tuint256 constant STABLE_BORROWING_MASK =      0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFF; // prettier-ignore\\n\\tuint256 constant RESERVE_FACTOR_MASK =        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFF; // prettier-ignore\\n\\n\\t/// @dev For the LTV, the start bit is 0 (up to 15), hence no bitshifting is needed\\n\\tuint256 constant LIQUIDATION_THRESHOLD_START_BIT_POSITION = 16;\\n\\tuint256 constant LIQUIDATION_BONUS_START_BIT_POSITION = 32;\\n\\tuint256 constant RESERVE_DECIMALS_START_BIT_POSITION = 48;\\n\\tuint256 constant IS_ACTIVE_START_BIT_POSITION = 56;\\n\\tuint256 constant IS_FROZEN_START_BIT_POSITION = 57;\\n\\tuint256 constant BORROWING_ENABLED_START_BIT_POSITION = 58;\\n\\tuint256 constant STABLE_BORROWING_ENABLED_START_BIT_POSITION = 59;\\n\\tuint256 constant RESERVE_FACTOR_START_BIT_POSITION = 64;\\n\\n\\tuint256 constant MAX_VALID_LTV = 65535;\\n\\tuint256 constant MAX_VALID_LIQUIDATION_THRESHOLD = 65535;\\n\\tuint256 constant MAX_VALID_LIQUIDATION_BONUS = 65535;\\n\\tuint256 constant MAX_VALID_DECIMALS = 255;\\n\\tuint256 constant MAX_VALID_RESERVE_FACTOR = 65535;\\n\\n\\t/**\\n\\t * @dev Sets the Loan to Value of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @param ltv the new ltv\\n\\t **/\\n\\tfunction setLtv(DataTypes.ReserveConfigurationMap memory self, uint256 ltv) internal pure {\\n\\t\\trequire(ltv <= MAX_VALID_LTV, Errors.RC_INVALID_LTV);\\n\\n\\t\\tself.data = (self.data & LTV_MASK) | ltv;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the Loan to Value of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @return The loan to value\\n\\t **/\\n\\tfunction getLtv(DataTypes.ReserveConfigurationMap storage self) internal view returns (uint256) {\\n\\t\\treturn self.data & ~LTV_MASK;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sets the liquidation threshold of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @param threshold The new liquidation threshold\\n\\t **/\\n\\tfunction setLiquidationThreshold(DataTypes.ReserveConfigurationMap memory self, uint256 threshold) internal pure {\\n\\t\\trequire(threshold <= MAX_VALID_LIQUIDATION_THRESHOLD, Errors.RC_INVALID_LIQ_THRESHOLD);\\n\\n\\t\\tself.data = (self.data & LIQUIDATION_THRESHOLD_MASK) | (threshold << LIQUIDATION_THRESHOLD_START_BIT_POSITION);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the liquidation threshold of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @return The liquidation threshold\\n\\t **/\\n\\tfunction getLiquidationThreshold(DataTypes.ReserveConfigurationMap storage self) internal view returns (uint256) {\\n\\t\\treturn (self.data & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sets the liquidation bonus of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @param bonus The new liquidation bonus\\n\\t **/\\n\\tfunction setLiquidationBonus(DataTypes.ReserveConfigurationMap memory self, uint256 bonus) internal pure {\\n\\t\\trequire(bonus <= MAX_VALID_LIQUIDATION_BONUS, Errors.RC_INVALID_LIQ_BONUS);\\n\\n\\t\\tself.data = (self.data & LIQUIDATION_BONUS_MASK) | (bonus << LIQUIDATION_BONUS_START_BIT_POSITION);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the liquidation bonus of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @return The liquidation bonus\\n\\t **/\\n\\tfunction getLiquidationBonus(DataTypes.ReserveConfigurationMap storage self) internal view returns (uint256) {\\n\\t\\treturn (self.data & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sets the decimals of the underlying asset of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @param decimals The decimals\\n\\t **/\\n\\tfunction setDecimals(DataTypes.ReserveConfigurationMap memory self, uint256 decimals) internal pure {\\n\\t\\trequire(decimals <= MAX_VALID_DECIMALS, Errors.RC_INVALID_DECIMALS);\\n\\n\\t\\tself.data = (self.data & DECIMALS_MASK) | (decimals << RESERVE_DECIMALS_START_BIT_POSITION);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the decimals of the underlying asset of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @return The decimals of the asset\\n\\t **/\\n\\tfunction getDecimals(DataTypes.ReserveConfigurationMap storage self) internal view returns (uint256) {\\n\\t\\treturn (self.data & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sets the active state of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @param active The active state\\n\\t **/\\n\\tfunction setActive(DataTypes.ReserveConfigurationMap memory self, bool active) internal pure {\\n\\t\\tself.data = (self.data & ACTIVE_MASK) | (uint256(active ? 1 : 0) << IS_ACTIVE_START_BIT_POSITION);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the active state of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @return The active state\\n\\t **/\\n\\tfunction getActive(DataTypes.ReserveConfigurationMap storage self) internal view returns (bool) {\\n\\t\\treturn (self.data & ~ACTIVE_MASK) != 0;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sets the frozen state of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @param frozen The frozen state\\n\\t **/\\n\\tfunction setFrozen(DataTypes.ReserveConfigurationMap memory self, bool frozen) internal pure {\\n\\t\\tself.data = (self.data & FROZEN_MASK) | (uint256(frozen ? 1 : 0) << IS_FROZEN_START_BIT_POSITION);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the frozen state of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @return The frozen state\\n\\t **/\\n\\tfunction getFrozen(DataTypes.ReserveConfigurationMap storage self) internal view returns (bool) {\\n\\t\\treturn (self.data & ~FROZEN_MASK) != 0;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Enables or disables borrowing on the reserve\\n\\t * @param self The reserve configuration\\n\\t * @param enabled True if the borrowing needs to be enabled, false otherwise\\n\\t **/\\n\\tfunction setBorrowingEnabled(DataTypes.ReserveConfigurationMap memory self, bool enabled) internal pure {\\n\\t\\tself.data = (self.data & BORROWING_MASK) | (uint256(enabled ? 1 : 0) << BORROWING_ENABLED_START_BIT_POSITION);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the borrowing state of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @return The borrowing state\\n\\t **/\\n\\tfunction getBorrowingEnabled(DataTypes.ReserveConfigurationMap storage self) internal view returns (bool) {\\n\\t\\treturn (self.data & ~BORROWING_MASK) != 0;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Enables or disables stable rate borrowing on the reserve\\n\\t * @param self The reserve configuration\\n\\t * @param enabled True if the stable rate borrowing needs to be enabled, false otherwise\\n\\t **/\\n\\tfunction setStableRateBorrowingEnabled(DataTypes.ReserveConfigurationMap memory self, bool enabled) internal pure {\\n\\t\\tself.data =\\n\\t\\t\\t(self.data & STABLE_BORROWING_MASK) |\\n\\t\\t\\t(uint256(enabled ? 1 : 0) << STABLE_BORROWING_ENABLED_START_BIT_POSITION);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the stable rate borrowing state of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @return The stable rate borrowing state\\n\\t **/\\n\\tfunction getStableRateBorrowingEnabled(\\n\\t\\tDataTypes.ReserveConfigurationMap storage self\\n\\t) internal view returns (bool) {\\n\\t\\treturn (self.data & ~STABLE_BORROWING_MASK) != 0;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sets the reserve factor of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @param reserveFactor The reserve factor\\n\\t **/\\n\\tfunction setReserveFactor(DataTypes.ReserveConfigurationMap memory self, uint256 reserveFactor) internal pure {\\n\\t\\trequire(reserveFactor <= MAX_VALID_RESERVE_FACTOR, Errors.RC_INVALID_RESERVE_FACTOR);\\n\\n\\t\\tself.data = (self.data & RESERVE_FACTOR_MASK) | (reserveFactor << RESERVE_FACTOR_START_BIT_POSITION);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the reserve factor of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @return The reserve factor\\n\\t **/\\n\\tfunction getReserveFactor(DataTypes.ReserveConfigurationMap storage self) internal view returns (uint256) {\\n\\t\\treturn (self.data & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the configuration flags of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @return The state flags representing active, frozen, borrowing enabled, stableRateBorrowing enabled\\n\\t **/\\n\\tfunction getFlags(DataTypes.ReserveConfigurationMap storage self) internal view returns (bool, bool, bool, bool) {\\n\\t\\tuint256 dataLocal = self.data;\\n\\n\\t\\treturn (\\n\\t\\t\\t(dataLocal & ~ACTIVE_MASK) != 0,\\n\\t\\t\\t(dataLocal & ~FROZEN_MASK) != 0,\\n\\t\\t\\t(dataLocal & ~BORROWING_MASK) != 0,\\n\\t\\t\\t(dataLocal & ~STABLE_BORROWING_MASK) != 0\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the configuration paramters of the reserve\\n\\t * @param self The reserve configuration\\n\\t * @return The state params representing ltv, liquidation threshold, liquidation bonus, the reserve decimals\\n\\t **/\\n\\tfunction getParams(\\n\\t\\tDataTypes.ReserveConfigurationMap storage self\\n\\t) internal view returns (uint256, uint256, uint256, uint256, uint256) {\\n\\t\\tuint256 dataLocal = self.data;\\n\\n\\t\\treturn (\\n\\t\\t\\tdataLocal & ~LTV_MASK,\\n\\t\\t\\t(dataLocal & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION,\\n\\t\\t\\t(dataLocal & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION,\\n\\t\\t\\t(dataLocal & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION,\\n\\t\\t\\t(dataLocal & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the configuration paramters of the reserve from a memory object\\n\\t * @param self The reserve configuration\\n\\t * @return The state params representing ltv, liquidation threshold, liquidation bonus, the reserve decimals\\n\\t **/\\n\\tfunction getParamsMemory(\\n\\t\\tDataTypes.ReserveConfigurationMap memory self\\n\\t) internal pure returns (uint256, uint256, uint256, uint256, uint256) {\\n\\t\\treturn (\\n\\t\\t\\tself.data & ~LTV_MASK,\\n\\t\\t\\t(self.data & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION,\\n\\t\\t\\t(self.data & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION,\\n\\t\\t\\t(self.data & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION,\\n\\t\\t\\t(self.data & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Gets the configuration flags of the reserve from a memory object\\n\\t * @param self The reserve configuration\\n\\t * @return The state flags representing active, frozen, borrowing enabled, stableRateBorrowing enabled\\n\\t **/\\n\\tfunction getFlagsMemory(\\n\\t\\tDataTypes.ReserveConfigurationMap memory self\\n\\t) internal pure returns (bool, bool, bool, bool) {\\n\\t\\treturn (\\n\\t\\t\\t(self.data & ~ACTIVE_MASK) != 0,\\n\\t\\t\\t(self.data & ~FROZEN_MASK) != 0,\\n\\t\\t\\t(self.data & ~BORROWING_MASK) != 0,\\n\\t\\t\\t(self.data & ~STABLE_BORROWING_MASK) != 0\\n\\t\\t);\\n\\t}\\n}\\n\",\"keccak256\":\"0xa9757f5232d9c4b5a932277d13c10e6dd3f5885473f1e33911238adc52582d99\",\"license\":\"agpl-3.0\"},\"contracts/lending/libraries/configuration/UserConfiguration.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\nimport {DataTypes} from \\\"../types/DataTypes.sol\\\";\\n\\n/**\\n * @title UserConfiguration library\\n * @author Aave\\n * @notice Implements the bitmap logic to handle the user configuration\\n */\\nlibrary UserConfiguration {\\n\\tuint256 internal constant BORROWING_MASK = 0x5555555555555555555555555555555555555555555555555555555555555555;\\n\\n\\t/**\\n\\t * @dev Sets if the user is borrowing the reserve identified by reserveIndex\\n\\t * @param self The configuration object\\n\\t * @param reserveIndex The index of the reserve in the bitmap\\n\\t * @param borrowing True if the user is borrowing the reserve, false otherwise\\n\\t **/\\n\\tfunction setBorrowing(DataTypes.UserConfigurationMap storage self, uint256 reserveIndex, bool borrowing) internal {\\n\\t\\trequire(reserveIndex < 128, Errors.UL_INVALID_INDEX);\\n\\t\\tself.data = (self.data & ~(1 << (reserveIndex * 2))) | (uint256(borrowing ? 1 : 0) << (reserveIndex * 2));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sets if the user is using as collateral the reserve identified by reserveIndex\\n\\t * @param self The configuration object\\n\\t * @param reserveIndex The index of the reserve in the bitmap\\n\\t * @param usingAsCollateral True if the user is usin the reserve as collateral, false otherwise\\n\\t **/\\n\\tfunction setUsingAsCollateral(\\n\\t\\tDataTypes.UserConfigurationMap storage self,\\n\\t\\tuint256 reserveIndex,\\n\\t\\tbool usingAsCollateral\\n\\t) internal {\\n\\t\\trequire(reserveIndex < 128, Errors.UL_INVALID_INDEX);\\n\\t\\tself.data =\\n\\t\\t\\t(self.data & ~(1 << (reserveIndex * 2 + 1))) |\\n\\t\\t\\t(uint256(usingAsCollateral ? 1 : 0) << (reserveIndex * 2 + 1));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Used to validate if a user has been using the reserve for borrowing or as collateral\\n\\t * @param self The configuration object\\n\\t * @param reserveIndex The index of the reserve in the bitmap\\n\\t * @return True if the user has been using a reserve for borrowing or as collateral, false otherwise\\n\\t **/\\n\\tfunction isUsingAsCollateralOrBorrowing(\\n\\t\\tDataTypes.UserConfigurationMap memory self,\\n\\t\\tuint256 reserveIndex\\n\\t) internal pure returns (bool) {\\n\\t\\trequire(reserveIndex < 128, Errors.UL_INVALID_INDEX);\\n\\t\\treturn (self.data >> (reserveIndex * 2)) & 3 != 0;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Used to validate if a user has been using the reserve for borrowing\\n\\t * @param self The configuration object\\n\\t * @param reserveIndex The index of the reserve in the bitmap\\n\\t * @return True if the user has been using a reserve for borrowing, false otherwise\\n\\t **/\\n\\tfunction isBorrowing(\\n\\t\\tDataTypes.UserConfigurationMap memory self,\\n\\t\\tuint256 reserveIndex\\n\\t) internal pure returns (bool) {\\n\\t\\trequire(reserveIndex < 128, Errors.UL_INVALID_INDEX);\\n\\t\\treturn (self.data >> (reserveIndex * 2)) & 1 != 0;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Used to validate if a user has been using the reserve as collateral\\n\\t * @param self The configuration object\\n\\t * @param reserveIndex The index of the reserve in the bitmap\\n\\t * @return True if the user has been using a reserve as collateral, false otherwise\\n\\t **/\\n\\tfunction isUsingAsCollateral(\\n\\t\\tDataTypes.UserConfigurationMap memory self,\\n\\t\\tuint256 reserveIndex\\n\\t) internal pure returns (bool) {\\n\\t\\trequire(reserveIndex < 128, Errors.UL_INVALID_INDEX);\\n\\t\\treturn (self.data >> (reserveIndex * 2 + 1)) & 1 != 0;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Used to validate if a user has been borrowing from any reserve\\n\\t * @param self The configuration object\\n\\t * @return True if the user has been borrowing any reserve, false otherwise\\n\\t **/\\n\\tfunction isBorrowingAny(DataTypes.UserConfigurationMap memory self) internal pure returns (bool) {\\n\\t\\treturn self.data & BORROWING_MASK != 0;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Used to validate if a user has not been using any reserve\\n\\t * @param self The configuration object\\n\\t * @return True if the user has been borrowing any reserve, false otherwise\\n\\t **/\\n\\tfunction isEmpty(DataTypes.UserConfigurationMap memory self) internal pure returns (bool) {\\n\\t\\treturn self.data == 0;\\n\\t}\\n}\\n\",\"keccak256\":\"0x15a442ed09ad3b43a96c1a6d14c72f3c7dc94e46f1157e34ce5f5f0ce22726e4\",\"license\":\"agpl-3.0\"},\"contracts/lending/libraries/helpers/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\n/**\\n * @title Errors library\\n * @author Aave\\n * @notice Defines the error messages emitted by the different contracts of the Aave protocol\\n * @dev Error messages prefix glossary:\\n *  - VL = ValidationLogic\\n *  - MATH = Math libraries\\n *  - CT = Common errors between tokens (AToken, VariableDebtToken and StableDebtToken)\\n *  - AT = AToken\\n *  - SDT = StableDebtToken\\n *  - VDT = VariableDebtToken\\n *  - LP = LendingPool\\n *  - LPAPR = LendingPoolAddressesProviderRegistry\\n *  - LPC = LendingPoolConfiguration\\n *  - RL = ReserveLogic\\n *  - LPCM = LendingPoolCollateralManager\\n *  - P = Pausable\\n */\\nlibrary Errors {\\n\\t//common errors\\n\\tstring public constant CALLER_NOT_POOL_ADMIN = \\\"33\\\"; // 'The caller must be the pool admin'\\n\\tstring public constant BORROW_ALLOWANCE_NOT_ENOUGH = \\\"59\\\"; // User borrows on behalf, but allowance are too small\\n\\n\\t//contract specific errors\\n\\tstring public constant VL_INVALID_AMOUNT = \\\"1\\\"; // 'Amount must be greater than 0'\\n\\tstring public constant VL_NO_ACTIVE_RESERVE = \\\"2\\\"; // 'Action requires an active reserve'\\n\\tstring public constant VL_RESERVE_FROZEN = \\\"3\\\"; // 'Action cannot be performed because the reserve is frozen'\\n\\tstring public constant VL_CURRENT_AVAILABLE_LIQUIDITY_NOT_ENOUGH = \\\"4\\\"; // 'The current liquidity is not enough'\\n\\tstring public constant VL_NOT_ENOUGH_AVAILABLE_USER_BALANCE = \\\"5\\\"; // 'User cannot withdraw more than the available balance'\\n\\tstring public constant VL_TRANSFER_NOT_ALLOWED = \\\"6\\\"; // 'Transfer cannot be allowed.'\\n\\tstring public constant VL_BORROWING_NOT_ENABLED = \\\"7\\\"; // 'Borrowing is not enabled'\\n\\tstring public constant VL_INVALID_INTEREST_RATE_MODE_SELECTED = \\\"8\\\"; // 'Invalid interest rate mode selected'\\n\\tstring public constant VL_COLLATERAL_BALANCE_IS_0 = \\\"9\\\"; // 'The collateral balance is 0'\\n\\tstring public constant VL_HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD = \\\"10\\\"; // 'Health factor is lesser than the liquidation threshold'\\n\\tstring public constant VL_COLLATERAL_CANNOT_COVER_NEW_BORROW = \\\"11\\\"; // 'There is not enough collateral to cover a new borrow'\\n\\tstring public constant VL_STABLE_BORROWING_NOT_ENABLED = \\\"12\\\"; // stable borrowing not enabled\\n\\tstring public constant VL_COLLATERAL_SAME_AS_BORROWING_CURRENCY = \\\"13\\\"; // collateral is (mostly) the same currency that is being borrowed\\n\\tstring public constant VL_AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE = \\\"14\\\"; // 'The requested amount is greater than the max loan size in stable rate mode\\n\\tstring public constant VL_NO_DEBT_OF_SELECTED_TYPE = \\\"15\\\"; // 'for repayment of stable debt, the user needs to have stable debt, otherwise, he needs to have variable debt'\\n\\tstring public constant VL_NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF = \\\"16\\\"; // 'To repay on behalf of an user an explicit amount to repay is needed'\\n\\tstring public constant VL_NO_STABLE_RATE_LOAN_IN_RESERVE = \\\"17\\\"; // 'User does not have a stable rate loan in progress on this reserve'\\n\\tstring public constant VL_NO_VARIABLE_RATE_LOAN_IN_RESERVE = \\\"18\\\"; // 'User does not have a variable rate loan in progress on this reserve'\\n\\tstring public constant VL_UNDERLYING_BALANCE_NOT_GREATER_THAN_0 = \\\"19\\\"; // 'The underlying balance needs to be greater than 0'\\n\\tstring public constant VL_DEPOSIT_ALREADY_IN_USE = \\\"20\\\"; // 'User deposit is already being used as collateral'\\n\\tstring public constant LP_NOT_ENOUGH_STABLE_BORROW_BALANCE = \\\"21\\\"; // 'User does not have any stable rate loan for this reserve'\\n\\tstring public constant LP_INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = \\\"22\\\"; // 'Interest rate rebalance conditions were not met'\\n\\tstring public constant LP_LIQUIDATION_CALL_FAILED = \\\"23\\\"; // 'Liquidation call failed'\\n\\tstring public constant LP_NOT_ENOUGH_LIQUIDITY_TO_BORROW = \\\"24\\\"; // 'There is not enough liquidity available to borrow'\\n\\tstring public constant LP_REQUESTED_AMOUNT_TOO_SMALL = \\\"25\\\"; // 'The requested amount is too small for a FlashLoan.'\\n\\tstring public constant LP_INCONSISTENT_PROTOCOL_ACTUAL_BALANCE = \\\"26\\\"; // 'The actual balance of the protocol is inconsistent'\\n\\tstring public constant LP_CALLER_NOT_LENDING_POOL_CONFIGURATOR = \\\"27\\\"; // 'The caller of the function is not the lending pool configurator'\\n\\tstring public constant LP_INCONSISTENT_FLASHLOAN_PARAMS = \\\"28\\\";\\n\\tstring public constant CT_CALLER_MUST_BE_LENDING_POOL = \\\"29\\\"; // 'The caller of this function must be a lending pool'\\n\\tstring public constant CT_CANNOT_GIVE_ALLOWANCE_TO_HIMSELF = \\\"30\\\"; // 'User cannot give allowance to himself'\\n\\tstring public constant CT_TRANSFER_AMOUNT_NOT_GT_0 = \\\"31\\\"; // 'Transferred amount needs to be greater than zero'\\n\\tstring public constant RL_RESERVE_ALREADY_INITIALIZED = \\\"32\\\"; // 'Reserve has already been initialized'\\n\\tstring public constant LPC_RESERVE_LIQUIDITY_NOT_0 = \\\"34\\\"; // 'The liquidity of the reserve needs to be 0'\\n\\tstring public constant LPC_INVALID_ATOKEN_POOL_ADDRESS = \\\"35\\\"; // 'The liquidity of the reserve needs to be 0'\\n\\tstring public constant LPC_INVALID_STABLE_DEBT_TOKEN_POOL_ADDRESS = \\\"36\\\"; // 'The liquidity of the reserve needs to be 0'\\n\\tstring public constant LPC_INVALID_VARIABLE_DEBT_TOKEN_POOL_ADDRESS = \\\"37\\\"; // 'The liquidity of the reserve needs to be 0'\\n\\tstring public constant LPC_INVALID_STABLE_DEBT_TOKEN_UNDERLYING_ADDRESS = \\\"38\\\"; // 'The liquidity of the reserve needs to be 0'\\n\\tstring public constant LPC_INVALID_VARIABLE_DEBT_TOKEN_UNDERLYING_ADDRESS = \\\"39\\\"; // 'The liquidity of the reserve needs to be 0'\\n\\tstring public constant LPC_INVALID_ADDRESSES_PROVIDER_ID = \\\"40\\\"; // 'The liquidity of the reserve needs to be 0'\\n\\tstring public constant LPC_INVALID_CONFIGURATION = \\\"75\\\"; // 'Invalid risk parameters for the reserve'\\n\\tstring public constant LPC_CALLER_NOT_EMERGENCY_ADMIN = \\\"76\\\"; // 'The caller must be the emergency admin'\\n\\tstring public constant LPAPR_PROVIDER_NOT_REGISTERED = \\\"41\\\"; // 'Provider is not registered'\\n\\tstring public constant LPCM_HEALTH_FACTOR_NOT_BELOW_THRESHOLD = \\\"42\\\"; // 'Health factor is not below the threshold'\\n\\tstring public constant LPCM_COLLATERAL_CANNOT_BE_LIQUIDATED = \\\"43\\\"; // 'The collateral chosen cannot be liquidated'\\n\\tstring public constant LPCM_SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = \\\"44\\\"; // 'User did not borrow the specified currency'\\n\\tstring public constant LPCM_NOT_ENOUGH_LIQUIDITY_TO_LIQUIDATE = \\\"45\\\"; // \\\"There isn't enough liquidity available to liquidate\\\"\\n\\tstring public constant LPCM_NO_ERRORS = \\\"46\\\"; // 'No errors'\\n\\tstring public constant LP_INVALID_FLASHLOAN_MODE = \\\"47\\\"; //Invalid flashloan mode selected\\n\\tstring public constant MATH_MULTIPLICATION_OVERFLOW = \\\"48\\\";\\n\\tstring public constant MATH_ADDITION_OVERFLOW = \\\"49\\\";\\n\\tstring public constant MATH_DIVISION_BY_ZERO = \\\"50\\\";\\n\\tstring public constant RL_LIQUIDITY_INDEX_OVERFLOW = \\\"51\\\"; //  Liquidity index overflows uint128\\n\\tstring public constant RL_VARIABLE_BORROW_INDEX_OVERFLOW = \\\"52\\\"; //  Variable borrow index overflows uint128\\n\\tstring public constant RL_LIQUIDITY_RATE_OVERFLOW = \\\"53\\\"; //  Liquidity rate overflows uint128\\n\\tstring public constant RL_VARIABLE_BORROW_RATE_OVERFLOW = \\\"54\\\"; //  Variable borrow rate overflows uint128\\n\\tstring public constant RL_STABLE_BORROW_RATE_OVERFLOW = \\\"55\\\"; //  Stable borrow rate overflows uint128\\n\\tstring public constant CT_INVALID_MINT_AMOUNT = \\\"56\\\"; //invalid amount to mint\\n\\tstring public constant LP_FAILED_REPAY_WITH_COLLATERAL = \\\"57\\\";\\n\\tstring public constant CT_INVALID_BURN_AMOUNT = \\\"58\\\"; //invalid amount to burn\\n\\tstring public constant LP_FAILED_COLLATERAL_SWAP = \\\"60\\\";\\n\\tstring public constant LP_INVALID_EQUAL_ASSETS_TO_SWAP = \\\"61\\\";\\n\\tstring public constant LP_REENTRANCY_NOT_ALLOWED = \\\"62\\\";\\n\\tstring public constant LP_CALLER_MUST_BE_AN_ATOKEN = \\\"63\\\";\\n\\tstring public constant LP_IS_PAUSED = \\\"64\\\"; // 'Pool is paused'\\n\\tstring public constant LP_NO_MORE_RESERVES_ALLOWED = \\\"65\\\";\\n\\tstring public constant LP_INVALID_FLASH_LOAN_EXECUTOR_RETURN = \\\"66\\\";\\n\\tstring public constant RC_INVALID_LTV = \\\"67\\\";\\n\\tstring public constant RC_INVALID_LIQ_THRESHOLD = \\\"68\\\";\\n\\tstring public constant RC_INVALID_LIQ_BONUS = \\\"69\\\";\\n\\tstring public constant RC_INVALID_DECIMALS = \\\"70\\\";\\n\\tstring public constant RC_INVALID_RESERVE_FACTOR = \\\"71\\\";\\n\\tstring public constant LPAPR_INVALID_ADDRESSES_PROVIDER_ID = \\\"72\\\";\\n\\tstring public constant VL_INCONSISTENT_FLASHLOAN_PARAMS = \\\"73\\\";\\n\\tstring public constant LP_INCONSISTENT_PARAMS_LENGTH = \\\"74\\\";\\n\\tstring public constant UL_INVALID_INDEX = \\\"77\\\";\\n\\tstring public constant LP_NOT_CONTRACT = \\\"78\\\";\\n\\tstring public constant SDT_STABLE_DEBT_OVERFLOW = \\\"79\\\";\\n\\tstring public constant SDT_BURN_EXCEEDS_BALANCE = \\\"80\\\";\\n\\n\\tenum CollateralManagerErrors {\\n\\t\\tNO_ERROR,\\n\\t\\tNO_COLLATERAL_AVAILABLE,\\n\\t\\tCOLLATERAL_CANNOT_BE_LIQUIDATED,\\n\\t\\tCURRRENCY_NOT_BORROWED,\\n\\t\\tHEALTH_FACTOR_ABOVE_THRESHOLD,\\n\\t\\tNOT_ENOUGH_LIQUIDITY,\\n\\t\\tNO_ACTIVE_RESERVE,\\n\\t\\tHEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD,\\n\\t\\tINVALID_EQUAL_ASSETS_TO_SWAP,\\n\\t\\tFROZEN_RESERVE\\n\\t}\\n}\\n\",\"keccak256\":\"0xd8247701ad40f24d3bbba25e050a8b4e10f9fcecce670a92e6f6d1ca0a4fdb04\",\"license\":\"agpl-3.0\"},\"contracts/lending/libraries/math/PercentageMath.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\n\\n/**\\n * @title PercentageMath library\\n * @author Aave\\n * @notice Provides functions to perform percentage calculations\\n * @dev Percentages are defined by default with 2 decimals of precision (100.00). The precision is indicated by PERCENTAGE_FACTOR\\n * @dev Operations are rounded half up\\n **/\\n\\nlibrary PercentageMath {\\n\\tuint256 constant PERCENTAGE_FACTOR = 1e4; //percentage plus two decimals\\n\\tuint256 constant HALF_PERCENT = PERCENTAGE_FACTOR / 2;\\n\\n\\t/**\\n\\t * @dev Executes a percentage multiplication\\n\\t * @param value The value of which the percentage needs to be calculated\\n\\t * @param percentage The percentage of the value to be calculated\\n\\t * @return The percentage of value\\n\\t **/\\n\\tfunction percentMul(uint256 value, uint256 percentage) internal pure returns (uint256) {\\n\\t\\tif (value == 0 || percentage == 0) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\trequire(value <= (type(uint256).max - HALF_PERCENT) / percentage, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n\\t\\treturn (value * percentage + HALF_PERCENT) / PERCENTAGE_FACTOR;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Executes a percentage division\\n\\t * @param value The value of which the percentage needs to be calculated\\n\\t * @param percentage The percentage of the value to be calculated\\n\\t * @return The value divided the percentage\\n\\t **/\\n\\tfunction percentDiv(uint256 value, uint256 percentage) internal pure returns (uint256) {\\n\\t\\trequire(percentage != 0, Errors.MATH_DIVISION_BY_ZERO);\\n\\t\\tuint256 halfPercentage = percentage / 2;\\n\\n\\t\\trequire(value <= (type(uint256).max - halfPercentage) / PERCENTAGE_FACTOR, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n\\t\\treturn (value * PERCENTAGE_FACTOR + halfPercentage) / percentage;\\n\\t}\\n}\\n\",\"keccak256\":\"0x4786d694d972a46d5f573846ebd5f98a026117e5bce85c834a37b158ff53b6f8\",\"license\":\"agpl-3.0\"},\"contracts/lending/libraries/math/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport {Errors} from \\\"../helpers/Errors.sol\\\";\\n\\n/**\\n * @title WadRayMath library\\n * @author Aave\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n **/\\n\\nlibrary WadRayMath {\\n\\tuint256 internal constant WAD = 1e18;\\n\\tuint256 internal constant halfWAD = WAD / 2;\\n\\n\\tuint256 internal constant RAY = 1e27;\\n\\tuint256 internal constant halfRAY = RAY / 2;\\n\\n\\tuint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n\\t/**\\n\\t * @return One ray, 1e27\\n\\t **/\\n\\tfunction ray() internal pure returns (uint256) {\\n\\t\\treturn RAY;\\n\\t}\\n\\n\\t/**\\n\\t * @return One wad, 1e18\\n\\t **/\\n\\n\\tfunction wad() internal pure returns (uint256) {\\n\\t\\treturn WAD;\\n\\t}\\n\\n\\t/**\\n\\t * @return Half ray, 1e27/2\\n\\t **/\\n\\tfunction halfRay() internal pure returns (uint256) {\\n\\t\\treturn halfRAY;\\n\\t}\\n\\n\\t/**\\n\\t * @return Half ray, 1e18/2\\n\\t **/\\n\\tfunction halfWad() internal pure returns (uint256) {\\n\\t\\treturn halfWAD;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Multiplies two wad, rounding half up to the nearest wad\\n\\t * @param a Wad\\n\\t * @param b Wad\\n\\t * @return The result of a*b, in wad\\n\\t **/\\n\\tfunction wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\tif (a == 0 || b == 0) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\trequire(a <= (type(uint256).max - halfWAD) / b, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n\\t\\treturn (a * b + halfWAD) / WAD;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Divides two wad, rounding half up to the nearest wad\\n\\t * @param a Wad\\n\\t * @param b Wad\\n\\t * @return The result of a/b, in wad\\n\\t **/\\n\\tfunction wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\trequire(b != 0, Errors.MATH_DIVISION_BY_ZERO);\\n\\t\\tuint256 halfB = b / 2;\\n\\n\\t\\trequire(a <= (type(uint256).max - halfB) / WAD, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n\\t\\treturn (a * WAD + halfB) / b;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Multiplies two ray, rounding half up to the nearest ray\\n\\t * @param a Ray\\n\\t * @param b Ray\\n\\t * @return The result of a*b, in ray\\n\\t **/\\n\\tfunction rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\tif (a == 0 || b == 0) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\trequire(a <= (type(uint256).max - halfRAY) / b, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n\\t\\treturn (a * b + halfRAY) / RAY;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Divides two ray, rounding half up to the nearest ray\\n\\t * @param a Ray\\n\\t * @param b Ray\\n\\t * @return The result of a/b, in ray\\n\\t **/\\n\\tfunction rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\trequire(b != 0, Errors.MATH_DIVISION_BY_ZERO);\\n\\t\\tuint256 halfB = b / 2;\\n\\n\\t\\trequire(a <= (type(uint256).max - halfB) / RAY, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\n\\t\\treturn (a * RAY + halfB) / b;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Casts ray down to wad\\n\\t * @param a Ray\\n\\t * @return a casted to wad, rounded half up to the nearest wad\\n\\t **/\\n\\tfunction rayToWad(uint256 a) internal pure returns (uint256) {\\n\\t\\tuint256 halfRatio = WAD_RAY_RATIO / 2;\\n\\t\\tuint256 result = halfRatio + a;\\n\\t\\trequire(result >= halfRatio, Errors.MATH_ADDITION_OVERFLOW);\\n\\n\\t\\treturn result / WAD_RAY_RATIO;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Converts wad up to ray\\n\\t * @param a Wad\\n\\t * @return a converted in ray\\n\\t **/\\n\\tfunction wadToRay(uint256 a) internal pure returns (uint256) {\\n\\t\\tuint256 result = a * WAD_RAY_RATIO;\\n\\t\\trequire(result / WAD_RAY_RATIO == a, Errors.MATH_MULTIPLICATION_OVERFLOW);\\n\\t\\treturn result;\\n\\t}\\n}\\n\",\"keccak256\":\"0xde61bc24a6eddf507673b7d09f917098b985ff38db433153e96437764415e138\",\"license\":\"agpl-3.0\"},\"contracts/lending/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nlibrary DataTypes {\\n\\t// refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\\n\\tstruct ReserveData {\\n\\t\\t//stores the reserve configuration\\n\\t\\tReserveConfigurationMap configuration;\\n\\t\\t//the liquidity index. Expressed in ray\\n\\t\\tuint128 liquidityIndex;\\n\\t\\t//variable borrow index. Expressed in ray\\n\\t\\tuint128 variableBorrowIndex;\\n\\t\\t//the current supply rate. Expressed in ray\\n\\t\\tuint128 currentLiquidityRate;\\n\\t\\t//the current variable borrow rate. Expressed in ray\\n\\t\\tuint128 currentVariableBorrowRate;\\n\\t\\t//the current stable borrow rate. Expressed in ray\\n\\t\\tuint128 currentStableBorrowRate;\\n\\t\\tuint40 lastUpdateTimestamp;\\n\\t\\t//tokens addresses\\n\\t\\taddress aTokenAddress;\\n\\t\\taddress stableDebtTokenAddress;\\n\\t\\taddress variableDebtTokenAddress;\\n\\t\\t//address of the interest rate strategy\\n\\t\\taddress interestRateStrategyAddress;\\n\\t\\t//the id of the reserve. Represents the position in the list of the active reserves\\n\\t\\tuint8 id;\\n\\t}\\n\\n\\tstruct ReserveConfigurationMap {\\n\\t\\t//bit 0-15: LTV\\n\\t\\t//bit 16-31: Liq. threshold\\n\\t\\t//bit 32-47: Liq. bonus\\n\\t\\t//bit 48-55: Decimals\\n\\t\\t//bit 56: Reserve is active\\n\\t\\t//bit 57: reserve is frozen\\n\\t\\t//bit 58: borrowing is enabled\\n\\t\\t//bit 59: stable rate borrowing enabled\\n\\t\\t//bit 60-63: reserved\\n\\t\\t//bit 64-79: reserve factor\\n\\t\\tuint256 data;\\n\\t}\\n\\n\\tstruct UserConfigurationMap {\\n\\t\\tuint256 data;\\n\\t}\\n\\n\\tenum InterestRateMode {\\n\\t\\tNONE,\\n\\t\\tSTABLE,\\n\\t\\tVARIABLE\\n\\t}\\n}\\n\",\"keccak256\":\"0xd0e55d855509f898d810479026993d64b9586e1af35816f1d2498ac27e7bcf69\",\"license\":\"agpl-3.0\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b50604051620023b4380380620023b4833981016040819052620000349162000069565b6001600160a01b039182166080521660a052620000a1565b80516001600160a01b03811681146200006457600080fd5b919050565b600080604083850312156200007d57600080fd5b62000088836200004c565b915062000098602084016200004c565b90509250929050565b60805160a0516122d2620000e26000396000818161016f0152818161154c01526115fb01526000818160b401528181611377015261140201526122d26000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80639201de551161005b5780639201de551461012f5780639dd9e2ce1461014f578063d22cf68a1461016a578063ec489c211461019157600080fd5b80630496f53a1461008d5780633c1740ed146100af57806351974cc0146100ee578063586c14421461010f575b600080fd5b61009c670de0b6b3a764000081565b6040519081526020015b60405180910390f35b6100d67f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100a6565b6101016100fc36600461190e565b6101b2565b6040516100a6929190611947565b61012261011d3660046119e6565b610849565b6040516100a69190611a03565b61014261013d366004611a50565b61091e565b6040516100a69190611ac5565b6100d6739f8f72aa9304c8b593d555f12ef6589cc3a579a281565b6100d67f000000000000000000000000000000000000000000000000000000000000000081565b6101a461019f3660046119e6565b610a8f565b6040516100a6929190611ad8565b6060600080846001600160a01b0316630261bf8b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102199190611e26565b90506000816001600160a01b031663d1946dbc6040518163ffffffff1660e01b8152600401600060405180830381865afa15801561025b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102839190810190611eb4565b6040517f4417a5830000000000000000000000000000000000000000000000000000000081526001600160a01b038781166004830152919250600091841690634417a58390602401602060405180830381865afa1580156102e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030c9190611fa8565b905060006001600160a01b038716610325576000610328565b82515b67ffffffffffffffff81111561034057610340611e43565b6040519080825280602002602001820160405280156103bc57816020015b6103a96040518060e0016040528060006001600160a01b0316815260200160008152602001600015158152602001600081526020016000815260200160008152602001600081525090565b81526020019060019003908161035e5790505b50905060005b835181101561083a576000856001600160a01b03166335ea6a758684815181106103ee576103ee611fc4565b60200260200101516040518263ffffffff1660e01b815260040161042191906001600160a01b0391909116815260200190565b61018060405180830381865afa15801561043f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104639190612020565b905084828151811061047757610477611fc4565b602002602001015183838151811061049157610491611fc4565b60209081029190910101516001600160a01b03918216905260e0820151604051630ed1279f60e11b81528b83166004820152911690631da24f3e90602401602060405180830381865afa1580156104ec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610510919061210d565b83838151811061052257610522611fc4565b602090810291909101810151015261053a848361169f565b83838151811061054c5761054c611fc4565b602090810291909101015190151560409091015261056a848361170e565b1561083157610120810151604051630ed1279f60e11b81526001600160a01b038b8116600483015290911690631da24f3e90602401602060405180830381865afa1580156105bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e0919061210d565b8383815181106105f2576105f2611fc4565b6020908102919091010151608001526101008101516040517fc634dfaa0000000000000000000000000000000000000000000000000000000081526001600160a01b038b811660048301529091169063c634dfaa90602401602060405180830381865afa158015610667573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068b919061210d565b83838151811061069d5761069d611fc4565b602002602001015160a00181815250508282815181106106bf576106bf611fc4565b602002602001015160a00151600014610831576101008101516040517fe78c9b3b0000000000000000000000000000000000000000000000000000000081526001600160a01b038b811660048301529091169063e78c9b3b90602401602060405180830381865afa158015610738573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075c919061210d565b83838151811061076e5761076e611fc4565b6020908102919091010151606001526101008101516040517f79ce6b8c0000000000000000000000000000000000000000000000000000000081526001600160a01b038b81166004830152909116906379ce6b8c90602401602060405180830381865afa1580156107e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108079190612126565b64ffffffffff1683838151811061082057610820611fc4565b602002602001015160c00181815250505b506001016103c2565b50976000975095505050505050565b60606000826001600160a01b0316630261bf8b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561088b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108af9190611e26565b9050806001600160a01b031663d1946dbc6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156108ef573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109179190810190611eb4565b9392505050565b606060005b60208160ff1610801561096f5750828160ff166020811061094657610946611fc4565b1a60f81b7fff000000000000000000000000000000000000000000000000000000000000001615155b15610986578061097e81612157565b915050610923565b60008160ff1667ffffffffffffffff8111156109a4576109a4611e43565b6040519080825280601f01601f1916602001820160405280156109ce576020820181803683370190505b509050600091505b60208260ff16108015610a225750838260ff16602081106109f9576109f9611fc4565b1a60f81b7fff000000000000000000000000000000000000000000000000000000000000001615155b1561091757838260ff1660208110610a3c57610a3c611fc4565b1a60f81b818360ff1681518110610a5557610a55611fc4565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506001909101906109d6565b6060610abf6040518060800160405280600081526020016000815260200160008152602001600060ff1681525090565b6000836001600160a01b031663fca513a86040518163ffffffff1660e01b8152600401602060405180830381865afa158015610aff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b239190611e26565b90506000846001600160a01b0316630261bf8b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b899190611e26565b90506000816001600160a01b031663d1946dbc6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610bcb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610bf39190810190611eb4565b90506000815167ffffffffffffffff811115610c1157610c11611e43565b604051908082528060200260200182016040528015610dbf57816020015b60408051610600810182526000808252606060208084018290529383018190528083018290526080830182905260a0830182905260c0830182905260e08301829052610100830182905261012083018290526101408301829052610160830182905261018083018290526101a083018290526101c083018290526101e08301829052610200830182905261022083018290526102408301829052610260830182905261028083018290526102a083018290526102c083018290526102e08301829052610300830182905261032083018290526103408301829052610360830182905261038083018290526103a083018290526103c083018290526103e08301829052610400830182905261042083018290526104408301829052610460830182905261048083018290526104a083018290526104c083018290526104e08301829052610500830182905261052083018290526105408301829052610560830182905261058083018290526105a083018290526105c08301526105e08201528252600019909201910181610c2f5790505b50905060005b8251811015611346576000828281518110610de257610de2611fc4565b60200260200101519050838281518110610dfe57610dfe611fc4565b60209081029190910101516001600160a01b039081168083526040517f35ea6a7500000000000000000000000000000000000000000000000000000000815260048101919091526000918716906335ea6a759060240161018060405180830381865afa158015610e72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e969190612020565b60208101516fffffffffffffffffffffffffffffffff9081166101a085015260408083015182166101c0860152606083015182166101e08601526080830151821661020086015260a083015190911661022085015260c082015164ffffffffff1661024085015260e08201516001600160a01b03908116610260860152610100830151811661028086015261012083015181166102a086015261014083015181166102c0860152845191517fb3596f0700000000000000000000000000000000000000000000000000000000815291811660048301529192509088169063b3596f0790602401602060405180830381865afa158015610f99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fbd919061210d565b61038083015281516102608301516040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b0391821660048201529116906370a0823190602401602060405180830381865afa15801561102a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104e919061210d565b826102e00181815250508161028001516001600160a01b031663797743386040518163ffffffff1660e01b8152600401608060405180830381865afa15801561109b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110bf9190612177565b64ffffffffff16610340860152610320850152506103008301526102a0820151604080517fb1bf962d00000000000000000000000000000000000000000000000000000000815290516001600160a01b039092169163b1bf962d916004808201926020929091908290030181865afa15801561113f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611163919061210d565b61036083015281516001600160a01b0316739f8f72aa9304c8b593d555f12ef6589cc3a579a2141561120d57600082600001516001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f7919061210d565b90506112028161091e565b60408401525061127d565b81600001516001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa15801561124f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261127791908101906121b6565b60408301525b80515161ffff604082901c811660e085015260ff603083901c166060850152602082901c811660c0850152601082901c811660a0850152166080830181905281515167080000000000000081161515610140850152670400000000000000811615156101208501526702000000000000008116151561018085015267010000000000000016151561016084015215156101008301526102c082015161132190611759565b6104008601526103e08501526103c08401526103a09092019190915250600101610dc5565b506113756040518060800160405280600081526020016000815260200160008152602001600060ff1681525090565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166350d25bcd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f7919061210d565b8160400181815250507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561145e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611482919061224a565b60ff166060820152604080517f8c89b64f00000000000000000000000000000000000000000000000000000000815290516001600160a01b03871691638c89b64f9160048083019260209291908290030181865afa925050508015611504575060408051601f3d908101601f191682019092526115019181019061210d565b60015b6115d7573d808015611532576040519150601f19603f3d011682016040523d82523d6000602084013e611537565b606091505b50670de0b6b3a76400008260000181815250507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166350d25bcd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115cc919061210d565b602083015250611692565b80670de0b6b3a7640000141561168557670de0b6b3a76400008260000181815250507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166350d25bcd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611657573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061167b919061210d565b6020830152611690565b808252602082018190525b505b9097909650945050505050565b60006080821060405180604001604052806002815260200161373760f01b815250906116e75760405162461bcd60e51b81526004016116de9190611ac5565b60405180910390fd5b506116f3826002612265565b6116fe906001612284565b925190921c600116151592915050565b60006080821060405180604001604052806002815260200161373760f01b8152509061174d5760405162461bcd60e51b81526004016116de9190611ac5565b506116fe826002612265565b600080600080846001600160a01b0316637b832f586040518163ffffffff1660e01b8152600401602060405180830381865afa15801561179d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c1919061210d565b856001600160a01b03166365614f816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156117ff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611823919061210d565b866001600160a01b0316630bdf953f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611861573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611885919061210d565b876001600160a01b031663ccab01a36040518163ffffffff1660e01b8152600401602060405180830381865afa1580156118c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118e7919061210d565b93509350935093509193509193565b6001600160a01b038116811461190b57600080fd5b50565b6000806040838503121561192157600080fd5b823561192c816118f6565b9150602083013561193c816118f6565b809150509250929050565b6040808252835182820181905260009190606090818501906020808901865b838110156119c757815180516001600160a01b0316865283810151848701528781015115158887015286810151878701526080808201519087015260a0808201519087015260c0908101519086015260e09094019390820190600101611966565b50508295506119da8188018960ff169052565b50505050509392505050565b6000602082840312156119f857600080fd5b8135610917816118f6565b6020808252825182820181905260009190848201906040850190845b81811015611a445783516001600160a01b031683529284019291840191600101611a1f565b50909695505050505050565b600060208284031215611a6257600080fd5b5035919050565b60005b83811015611a84578181015183820152602001611a6c565b83811115611a93576000848401525b50505050565b60008151808452611ab1816020860160208601611a69565b601f01601f19169290920160200192915050565b6020815260006109176020830184611a99565b600060a080830181845280865180835260c092508286019150828160051b8701016020808a0160005b84811015611dd45789840360bf19018652815180516001600160a01b03168552610600848201518186880152611b3982880182611a99565b91505060408083015187830382890152611b538382611a99565b606085810151908a0152608080860151908a01528c8501518d8a01528b8501518c8a015260e080860151908a0152610100808601511515908a0152610120808601511515908a0152610140808601511515908a0152610160808601511515908a0152610180808601511515908a01526101a0808601516fffffffffffffffffffffffffffffffff908116918b01919091526101c0808701518216908b01526101e0808701518216908b0152610200808701518216908b0152610220808701518216908b01526102408087015164ffffffffff16908b0152610260808701516001600160a01b03908116918c0191909152610280808801518216908c01526102a0808801518216908c01526102c0808801518216908c01526102e080880151908c015261030080880151908c015261032080880151908c015261034080880151908c015261036080880151908c015261038080880151908c01526103a080880151908c01526103c080880151908c01526103e080880151908c015261040080880151908c0152610420808801511515908c0152610440808801518316908c0152610460808801518316908c015261048080880151909216918b01919091526104a080870151908b01526104c080870151908b01526104e08087015160ff16908b015261050080870151908b015261052080870151908b01526105408087015161ffff908116918c0191909152610560808801518216908c015261058080880151909116908b01526105a080870151909116908a01526105c0808601518a8303828c015291945092509050611da68382611a99565b925050506105e0808301519250611dc08188018415159052565b509684019694505090820190600101611b01565b5050819650611e098189018a80518252602081015160208301526040810151604083015260ff60608201511660608301525050565b5050505050509392505050565b8051611e21816118f6565b919050565b600060208284031215611e3857600080fd5b8151610917816118f6565b634e487b7160e01b600052604160045260246000fd5b604051610180810167ffffffffffffffff81118282101715611e7d57611e7d611e43565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611eac57611eac611e43565b604052919050565b60006020808385031215611ec757600080fd5b825167ffffffffffffffff80821115611edf57600080fd5b818501915085601f830112611ef357600080fd5b815181811115611f0557611f05611e43565b8060051b9150611f16848301611e83565b8181529183018401918481019088841115611f3057600080fd5b938501935b83851015611f5a5784519250611f4a836118f6565b8282529385019390850190611f35565b98975050505050505050565b600060208284031215611f7857600080fd5b6040516020810181811067ffffffffffffffff82111715611f9b57611f9b611e43565b6040529151825250919050565b600060208284031215611fba57600080fd5b6109178383611f66565b634e487b7160e01b600052603260045260246000fd5b80516fffffffffffffffffffffffffffffffff81168114611e2157600080fd5b805164ffffffffff81168114611e2157600080fd5b805160ff81168114611e2157600080fd5b6000610180828403121561203357600080fd5b61203b611e59565b6120458484611f66565b815261205360208401611fda565b602082015261206460408401611fda565b604082015261207560608401611fda565b606082015261208660808401611fda565b608082015261209760a08401611fda565b60a08201526120a860c08401611ffa565b60c08201526120b960e08401611e16565b60e08201526101006120cc818501611e16565b908201526101206120de848201611e16565b908201526101406120f0848201611e16565b9082015261016061210284820161200f565b908201529392505050565b60006020828403121561211f57600080fd5b5051919050565b60006020828403121561213857600080fd5b61091782611ffa565b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff81141561216e5761216e612141565b60010192915050565b6000806000806080858703121561218d57600080fd5b8451935060208501519250604085015191506121ab60608601611ffa565b905092959194509250565b6000602082840312156121c857600080fd5b815167ffffffffffffffff808211156121e057600080fd5b818401915084601f8301126121f457600080fd5b81518181111561220657612206611e43565b612219601f8201601f1916602001611e83565b915080825285602082850101111561223057600080fd5b612241816020840160208601611a69565b50949350505050565b60006020828403121561225c57600080fd5b6109178261200f565b600081600019048311821515161561227f5761227f612141565b500290565b6000821982111561229757612297612141565b50019056fea2646970667358221220467d91da321a0975e60270e313b65e44dd18ebe73dcc7f019671497b46c322eb64736f6c634300080c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c80639201de551161005b5780639201de551461012f5780639dd9e2ce1461014f578063d22cf68a1461016a578063ec489c211461019157600080fd5b80630496f53a1461008d5780633c1740ed146100af57806351974cc0146100ee578063586c14421461010f575b600080fd5b61009c670de0b6b3a764000081565b6040519081526020015b60405180910390f35b6100d67f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100a6565b6101016100fc36600461190e565b6101b2565b6040516100a6929190611947565b61012261011d3660046119e6565b610849565b6040516100a69190611a03565b61014261013d366004611a50565b61091e565b6040516100a69190611ac5565b6100d6739f8f72aa9304c8b593d555f12ef6589cc3a579a281565b6100d67f000000000000000000000000000000000000000000000000000000000000000081565b6101a461019f3660046119e6565b610a8f565b6040516100a6929190611ad8565b6060600080846001600160a01b0316630261bf8b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102199190611e26565b90506000816001600160a01b031663d1946dbc6040518163ffffffff1660e01b8152600401600060405180830381865afa15801561025b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102839190810190611eb4565b6040517f4417a5830000000000000000000000000000000000000000000000000000000081526001600160a01b038781166004830152919250600091841690634417a58390602401602060405180830381865afa1580156102e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030c9190611fa8565b905060006001600160a01b038716610325576000610328565b82515b67ffffffffffffffff81111561034057610340611e43565b6040519080825280602002602001820160405280156103bc57816020015b6103a96040518060e0016040528060006001600160a01b0316815260200160008152602001600015158152602001600081526020016000815260200160008152602001600081525090565b81526020019060019003908161035e5790505b50905060005b835181101561083a576000856001600160a01b03166335ea6a758684815181106103ee576103ee611fc4565b60200260200101516040518263ffffffff1660e01b815260040161042191906001600160a01b0391909116815260200190565b61018060405180830381865afa15801561043f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104639190612020565b905084828151811061047757610477611fc4565b602002602001015183838151811061049157610491611fc4565b60209081029190910101516001600160a01b03918216905260e0820151604051630ed1279f60e11b81528b83166004820152911690631da24f3e90602401602060405180830381865afa1580156104ec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610510919061210d565b83838151811061052257610522611fc4565b602090810291909101810151015261053a848361169f565b83838151811061054c5761054c611fc4565b602090810291909101015190151560409091015261056a848361170e565b1561083157610120810151604051630ed1279f60e11b81526001600160a01b038b8116600483015290911690631da24f3e90602401602060405180830381865afa1580156105bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e0919061210d565b8383815181106105f2576105f2611fc4565b6020908102919091010151608001526101008101516040517fc634dfaa0000000000000000000000000000000000000000000000000000000081526001600160a01b038b811660048301529091169063c634dfaa90602401602060405180830381865afa158015610667573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068b919061210d565b83838151811061069d5761069d611fc4565b602002602001015160a00181815250508282815181106106bf576106bf611fc4565b602002602001015160a00151600014610831576101008101516040517fe78c9b3b0000000000000000000000000000000000000000000000000000000081526001600160a01b038b811660048301529091169063e78c9b3b90602401602060405180830381865afa158015610738573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075c919061210d565b83838151811061076e5761076e611fc4565b6020908102919091010151606001526101008101516040517f79ce6b8c0000000000000000000000000000000000000000000000000000000081526001600160a01b038b81166004830152909116906379ce6b8c90602401602060405180830381865afa1580156107e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108079190612126565b64ffffffffff1683838151811061082057610820611fc4565b602002602001015160c00181815250505b506001016103c2565b50976000975095505050505050565b60606000826001600160a01b0316630261bf8b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561088b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108af9190611e26565b9050806001600160a01b031663d1946dbc6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156108ef573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109179190810190611eb4565b9392505050565b606060005b60208160ff1610801561096f5750828160ff166020811061094657610946611fc4565b1a60f81b7fff000000000000000000000000000000000000000000000000000000000000001615155b15610986578061097e81612157565b915050610923565b60008160ff1667ffffffffffffffff8111156109a4576109a4611e43565b6040519080825280601f01601f1916602001820160405280156109ce576020820181803683370190505b509050600091505b60208260ff16108015610a225750838260ff16602081106109f9576109f9611fc4565b1a60f81b7fff000000000000000000000000000000000000000000000000000000000000001615155b1561091757838260ff1660208110610a3c57610a3c611fc4565b1a60f81b818360ff1681518110610a5557610a55611fc4565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506001909101906109d6565b6060610abf6040518060800160405280600081526020016000815260200160008152602001600060ff1681525090565b6000836001600160a01b031663fca513a86040518163ffffffff1660e01b8152600401602060405180830381865afa158015610aff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b239190611e26565b90506000846001600160a01b0316630261bf8b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b899190611e26565b90506000816001600160a01b031663d1946dbc6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610bcb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610bf39190810190611eb4565b90506000815167ffffffffffffffff811115610c1157610c11611e43565b604051908082528060200260200182016040528015610dbf57816020015b60408051610600810182526000808252606060208084018290529383018190528083018290526080830182905260a0830182905260c0830182905260e08301829052610100830182905261012083018290526101408301829052610160830182905261018083018290526101a083018290526101c083018290526101e08301829052610200830182905261022083018290526102408301829052610260830182905261028083018290526102a083018290526102c083018290526102e08301829052610300830182905261032083018290526103408301829052610360830182905261038083018290526103a083018290526103c083018290526103e08301829052610400830182905261042083018290526104408301829052610460830182905261048083018290526104a083018290526104c083018290526104e08301829052610500830182905261052083018290526105408301829052610560830182905261058083018290526105a083018290526105c08301526105e08201528252600019909201910181610c2f5790505b50905060005b8251811015611346576000828281518110610de257610de2611fc4565b60200260200101519050838281518110610dfe57610dfe611fc4565b60209081029190910101516001600160a01b039081168083526040517f35ea6a7500000000000000000000000000000000000000000000000000000000815260048101919091526000918716906335ea6a759060240161018060405180830381865afa158015610e72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e969190612020565b60208101516fffffffffffffffffffffffffffffffff9081166101a085015260408083015182166101c0860152606083015182166101e08601526080830151821661020086015260a083015190911661022085015260c082015164ffffffffff1661024085015260e08201516001600160a01b03908116610260860152610100830151811661028086015261012083015181166102a086015261014083015181166102c0860152845191517fb3596f0700000000000000000000000000000000000000000000000000000000815291811660048301529192509088169063b3596f0790602401602060405180830381865afa158015610f99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fbd919061210d565b61038083015281516102608301516040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b0391821660048201529116906370a0823190602401602060405180830381865afa15801561102a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104e919061210d565b826102e00181815250508161028001516001600160a01b031663797743386040518163ffffffff1660e01b8152600401608060405180830381865afa15801561109b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110bf9190612177565b64ffffffffff16610340860152610320850152506103008301526102a0820151604080517fb1bf962d00000000000000000000000000000000000000000000000000000000815290516001600160a01b039092169163b1bf962d916004808201926020929091908290030181865afa15801561113f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611163919061210d565b61036083015281516001600160a01b0316739f8f72aa9304c8b593d555f12ef6589cc3a579a2141561120d57600082600001516001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f7919061210d565b90506112028161091e565b60408401525061127d565b81600001516001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa15801561124f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261127791908101906121b6565b60408301525b80515161ffff604082901c811660e085015260ff603083901c166060850152602082901c811660c0850152601082901c811660a0850152166080830181905281515167080000000000000081161515610140850152670400000000000000811615156101208501526702000000000000008116151561018085015267010000000000000016151561016084015215156101008301526102c082015161132190611759565b6104008601526103e08501526103c08401526103a09092019190915250600101610dc5565b506113756040518060800160405280600081526020016000815260200160008152602001600060ff1681525090565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166350d25bcd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f7919061210d565b8160400181815250507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561145e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611482919061224a565b60ff166060820152604080517f8c89b64f00000000000000000000000000000000000000000000000000000000815290516001600160a01b03871691638c89b64f9160048083019260209291908290030181865afa925050508015611504575060408051601f3d908101601f191682019092526115019181019061210d565b60015b6115d7573d808015611532576040519150601f19603f3d011682016040523d82523d6000602084013e611537565b606091505b50670de0b6b3a76400008260000181815250507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166350d25bcd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115cc919061210d565b602083015250611692565b80670de0b6b3a7640000141561168557670de0b6b3a76400008260000181815250507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166350d25bcd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611657573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061167b919061210d565b6020830152611690565b808252602082018190525b505b9097909650945050505050565b60006080821060405180604001604052806002815260200161373760f01b815250906116e75760405162461bcd60e51b81526004016116de9190611ac5565b60405180910390fd5b506116f3826002612265565b6116fe906001612284565b925190921c600116151592915050565b60006080821060405180604001604052806002815260200161373760f01b8152509061174d5760405162461bcd60e51b81526004016116de9190611ac5565b506116fe826002612265565b600080600080846001600160a01b0316637b832f586040518163ffffffff1660e01b8152600401602060405180830381865afa15801561179d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c1919061210d565b856001600160a01b03166365614f816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156117ff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611823919061210d565b866001600160a01b0316630bdf953f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611861573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611885919061210d565b876001600160a01b031663ccab01a36040518163ffffffff1660e01b8152600401602060405180830381865afa1580156118c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118e7919061210d565b93509350935093509193509193565b6001600160a01b038116811461190b57600080fd5b50565b6000806040838503121561192157600080fd5b823561192c816118f6565b9150602083013561193c816118f6565b809150509250929050565b6040808252835182820181905260009190606090818501906020808901865b838110156119c757815180516001600160a01b0316865283810151848701528781015115158887015286810151878701526080808201519087015260a0808201519087015260c0908101519086015260e09094019390820190600101611966565b50508295506119da8188018960ff169052565b50505050509392505050565b6000602082840312156119f857600080fd5b8135610917816118f6565b6020808252825182820181905260009190848201906040850190845b81811015611a445783516001600160a01b031683529284019291840191600101611a1f565b50909695505050505050565b600060208284031215611a6257600080fd5b5035919050565b60005b83811015611a84578181015183820152602001611a6c565b83811115611a93576000848401525b50505050565b60008151808452611ab1816020860160208601611a69565b601f01601f19169290920160200192915050565b6020815260006109176020830184611a99565b600060a080830181845280865180835260c092508286019150828160051b8701016020808a0160005b84811015611dd45789840360bf19018652815180516001600160a01b03168552610600848201518186880152611b3982880182611a99565b91505060408083015187830382890152611b538382611a99565b606085810151908a0152608080860151908a01528c8501518d8a01528b8501518c8a015260e080860151908a0152610100808601511515908a0152610120808601511515908a0152610140808601511515908a0152610160808601511515908a0152610180808601511515908a01526101a0808601516fffffffffffffffffffffffffffffffff908116918b01919091526101c0808701518216908b01526101e0808701518216908b0152610200808701518216908b0152610220808701518216908b01526102408087015164ffffffffff16908b0152610260808701516001600160a01b03908116918c0191909152610280808801518216908c01526102a0808801518216908c01526102c0808801518216908c01526102e080880151908c015261030080880151908c015261032080880151908c015261034080880151908c015261036080880151908c015261038080880151908c01526103a080880151908c01526103c080880151908c01526103e080880151908c015261040080880151908c0152610420808801511515908c0152610440808801518316908c0152610460808801518316908c015261048080880151909216918b01919091526104a080870151908b01526104c080870151908b01526104e08087015160ff16908b015261050080870151908b015261052080870151908b01526105408087015161ffff908116918c0191909152610560808801518216908c015261058080880151909116908b01526105a080870151909116908a01526105c0808601518a8303828c015291945092509050611da68382611a99565b925050506105e0808301519250611dc08188018415159052565b509684019694505090820190600101611b01565b5050819650611e098189018a80518252602081015160208301526040810151604083015260ff60608201511660608301525050565b5050505050509392505050565b8051611e21816118f6565b919050565b600060208284031215611e3857600080fd5b8151610917816118f6565b634e487b7160e01b600052604160045260246000fd5b604051610180810167ffffffffffffffff81118282101715611e7d57611e7d611e43565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611eac57611eac611e43565b604052919050565b60006020808385031215611ec757600080fd5b825167ffffffffffffffff80821115611edf57600080fd5b818501915085601f830112611ef357600080fd5b815181811115611f0557611f05611e43565b8060051b9150611f16848301611e83565b8181529183018401918481019088841115611f3057600080fd5b938501935b83851015611f5a5784519250611f4a836118f6565b8282529385019390850190611f35565b98975050505050505050565b600060208284031215611f7857600080fd5b6040516020810181811067ffffffffffffffff82111715611f9b57611f9b611e43565b6040529151825250919050565b600060208284031215611fba57600080fd5b6109178383611f66565b634e487b7160e01b600052603260045260246000fd5b80516fffffffffffffffffffffffffffffffff81168114611e2157600080fd5b805164ffffffffff81168114611e2157600080fd5b805160ff81168114611e2157600080fd5b6000610180828403121561203357600080fd5b61203b611e59565b6120458484611f66565b815261205360208401611fda565b602082015261206460408401611fda565b604082015261207560608401611fda565b606082015261208660808401611fda565b608082015261209760a08401611fda565b60a08201526120a860c08401611ffa565b60c08201526120b960e08401611e16565b60e08201526101006120cc818501611e16565b908201526101206120de848201611e16565b908201526101406120f0848201611e16565b9082015261016061210284820161200f565b908201529392505050565b60006020828403121561211f57600080fd5b5051919050565b60006020828403121561213857600080fd5b61091782611ffa565b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff81141561216e5761216e612141565b60010192915050565b6000806000806080858703121561218d57600080fd5b8451935060208501519250604085015191506121ab60608601611ffa565b905092959194509250565b6000602082840312156121c857600080fd5b815167ffffffffffffffff808211156121e057600080fd5b818401915084601f8301126121f457600080fd5b81518181111561220657612206611e43565b612219601f8201601f1916602001611e83565b915080825285602082850101111561223057600080fd5b612241816020840160208601611a69565b50949350505050565b60006020828403121561225c57600080fd5b6109178261200f565b600081600019048311821515161561227f5761227f612141565b500290565b6000821982111561229757612297612141565b50019056fea2646970667358221220467d91da321a0975e60270e313b65e44dd18ebe73dcc7f019671497b46c322eb64736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}