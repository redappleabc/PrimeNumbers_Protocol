{
  "address": "0xf642474d39901e9D6d669e6C8EF2a8F4D6Fc6CD7",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AddressZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AmountZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ETHTransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EthTransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientETH",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidLockLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidRatio",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidZapETHSource",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReceivedETHOnAlternativeAssetZap",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SlippageTooHigh",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SpecifiedSlippageExceedLimit",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_mfdAddr",
          "type": "address"
        }
      ],
      "name": "MfdUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_poolHelper",
          "type": "address"
        }
      ],
      "name": "PoolHelperUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_provider",
          "type": "address"
        }
      ],
      "name": "PriceProviderUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_uniRouter",
          "type": "address"
        }
      ],
      "name": "UniRouterUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_borrow",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_ethAmt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_prntAmt",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_onBehalf",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_lockTypeIndex",
          "type": "uint256"
        }
      ],
      "name": "Zapped",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASE_PERCENT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_SLIPPAGE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RATIO_DIVISOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REFERRAL_CODE",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VARIABLE_INTEREST_RATE_MODE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "aaveOracle",
      "outputs": [
        {
          "internalType": "contract IAaveOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ethLPRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPoolHelper",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUniRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getVDebtToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPoolHelper",
          "name": "_rndtPoolHelper",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_uniRouter",
          "type": "address"
        },
        {
          "internalType": "contract ILendingPool",
          "name": "_lendingPool",
          "type": "address"
        },
        {
          "internalType": "contract IWETH",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_prntAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_ethLPRatio",
          "type": "uint256"
        },
        {
          "internalType": "contract IAaveOracle",
          "name": "_aaveOracle",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lendingPool",
      "outputs": [
        {
          "internalType": "contract ILendingPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mfd",
      "outputs": [
        {
          "internalType": "contract IMultiFeeDistribution",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolHelper",
      "outputs": [
        {
          "internalType": "contract IPoolHelper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceProvider",
      "outputs": [
        {
          "internalType": "contract IPriceProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "prntAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "quoteFromToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_aaveOracle",
          "type": "address"
        }
      ],
      "name": "setAaveOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_mfdAddr",
          "type": "address"
        }
      ],
      "name": "setMfd",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poolHelper",
          "type": "address"
        }
      ],
      "name": "setPoolHelper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_provider",
          "type": "address"
        }
      ],
      "name": "setPriceProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_uniRouter",
          "type": "address"
        }
      ],
      "name": "setUniRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "contract IWETH",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "withdrawLockedETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_borrow",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_assetAmt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_prntAmt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lockTypeIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_slippage",
          "type": "uint256"
        }
      ],
      "name": "zap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_borrow",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_assetAmt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lockTypeIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_slippage",
          "type": "uint256"
        }
      ],
      "name": "zapFromVesting",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_borrow",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_assetAmt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_prntAmt",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_onBehalf",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_slippage",
          "type": "uint256"
        }
      ],
      "name": "zapOnBehalf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x0bab49954132769a2f0cc76622027ec55126cb0eef9d7746ae1056f88aeafeb2",
  "receipt": {
    "to": null,
    "from": "0xdE8023f05d831Fb7381486D041237ddEB06c1BA2",
    "contractAddress": "0xf642474d39901e9D6d669e6C8EF2a8F4D6Fc6CD7",
    "transactionIndex": 3,
    "gasUsed": "2522770",
    "logsBloom": "0x
    "blockHash": "0x23850399f640db2813437956e3e4d08490ab68574547e02c3bfab9ab51e7f71e",
    "transactionHash": "0x0bab49954132769a2f0cc76622027ec55126cb0eef9d7746ae1056f88aeafeb2",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 43439966,
        "transactionHash": "0x0bab49954132769a2f0cc76622027ec55126cb0eef9d7746ae1056f88aeafeb2",
        "address": "0xf642474d39901e9D6d669e6C8EF2a8F4D6Fc6CD7",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 4,
        "blockHash": "0x23850399f640db2813437956e3e4d08490ab68574547e02c3bfab9ab51e7f71e"
      }
    ],
    "blockNumber": 43439966,
    "cumulativeGasUsed": "2773282",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "dcefabf19271a6489c66282870162b11",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AmountZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ETHTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EthTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientETH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLockLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRatio\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidZapETHSource\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReceivedETHOnAlternativeAssetZap\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SlippageTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SpecifiedSlippageExceedLimit\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_mfdAddr\",\"type\":\"address\"}],\"name\":\"MfdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_poolHelper\",\"type\":\"address\"}],\"name\":\"PoolHelperUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"PriceProviderUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_uniRouter\",\"type\":\"address\"}],\"name\":\"UniRouterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_borrow\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_ethAmt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_prntAmt\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_onBehalf\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lockTypeIndex\",\"type\":\"uint256\"}],\"name\":\"Zapped\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SLIPPAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RATIO_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFERRAL_CODE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VARIABLE_INTEREST_RATE_MODE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aaveOracle\",\"outputs\":[{\"internalType\":\"contract IAaveOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethLPRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolHelper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUniRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getVDebtToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPoolHelper\",\"name\":\"_rndtPoolHelper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniRouter\",\"type\":\"address\"},{\"internalType\":\"contract ILendingPool\",\"name\":\"_lendingPool\",\"type\":\"address\"},{\"internalType\":\"contract IWETH\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_prntAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ethLPRatio\",\"type\":\"uint256\"},{\"internalType\":\"contract IAaveOracle\",\"name\":\"_aaveOracle\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lendingPool\",\"outputs\":[{\"internalType\":\"contract ILendingPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mfd\",\"outputs\":[{\"internalType\":\"contract IMultiFeeDistribution\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolHelper\",\"outputs\":[{\"internalType\":\"contract IPoolHelper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceProvider\",\"outputs\":[{\"internalType\":\"contract IPriceProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prntAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"quoteFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aaveOracle\",\"type\":\"address\"}],\"name\":\"setAaveOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mfdAddr\",\"type\":\"address\"}],\"name\":\"setMfd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolHelper\",\"type\":\"address\"}],\"name\":\"setPoolHelper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"setPriceProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniRouter\",\"type\":\"address\"}],\"name\":\"setUniRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdrawLockedETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_borrow\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_assetAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_prntAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockTypeIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"}],\"name\":\"zap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_borrow\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_assetAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockTypeIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"}],\"name\":\"zapFromVesting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_borrow\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_assetAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_prntAmt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_onBehalf\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"}],\"name\":\"zapOnBehalf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Prime\",\"kind\":\"dev\",\"methods\":{\"getVDebtToken(address)\":{\"params\":{\"_asset\":\"underlying.\"}},\"initialize(address,address,address,address,address,uint256,address)\":{\"params\":{\"_aaveOracle\":\"Aave oracle address\",\"_ethLPRatio\":\"ratio of ETH in the LP token, can be 2000 for an 80/20 bal lp\",\"_lendingPool\":\"Lending pool\",\"_prntAddr\":\"PRNT token address\",\"_rndtPoolHelper\":\"Pool helper address used for PRNT-WETH swaps\",\"_uniRouter\":\"UniV2 router address used for all non PRNT-WETH swaps\",\"_weth\":\"weth address\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"quoteFromToken(address,uint256)\":{\"details\":\"this function is mainly used to calculate how much of the specified token is needed to match the provided PRNT amount when providing liquidity to an AMM\",\"params\":{\"_amount\":\"of PRNT to be sold\",\"_token\":\"address of the token that would be received\"},\"returns\":{\"_0\":\"amount of _token received\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setAaveOracle(address)\":{\"params\":{\"_aaveOracle\":\"oracle contract address.\"}},\"setMfd(address)\":{\"params\":{\"_mfdAddr\":\"New contract address.\"}},\"setPoolHelper(address)\":{\"params\":{\"_poolHelper\":\"New PoolHelper contract address.\"}},\"setPriceProvider(address)\":{\"params\":{\"_provider\":\"Price provider contract address.\"}},\"setUniRouter(address)\":{\"params\":{\"_uniRouter\":\"New PoolHelper contract address.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawLockedETH(address,uint256)\":{\"params\":{\"to\":\"ETH receiver\",\"value\":\"ETH amount\"}},\"zap(bool,address,uint256,uint256,uint256,uint256)\":{\"params\":{\"_asset\":\"to be used for zapping\",\"_assetAmt\":\"amount of weth.\",\"_borrow\":\"option to borrow ETH\",\"_lockTypeIndex\":\"lock length index.\",\"_prntAmt\":\"amount of PRNT.\",\"_slippage\":\"maximum amount of slippage allowed for any occurring trades\"},\"returns\":{\"_0\":\"LP amount\"}},\"zapFromVesting(bool,address,uint256,uint256,uint256)\":{\"params\":{\"_asset\":\"to be used for zapping\",\"_assetAmt\":\"amount of _asset tokens used to create dLP position\",\"_borrow\":\"option to borrow ETH\",\"_lockTypeIndex\":\"lock length index. cannot be shortest option (index 0)\",\"_slippage\":\"maximum amount of slippage allowed for any occurring trades\"},\"returns\":{\"_0\":\"LP amount\"}},\"zapOnBehalf(bool,address,uint256,uint256,address,uint256)\":{\"details\":\"It will use default lock index\",\"params\":{\"_asset\":\"to be used for zapping\",\"_assetAmt\":\"amount of weth.\",\"_borrow\":\"option to borrow ETH\",\"_onBehalf\":\"user address to be zapped.\",\"_prntAmt\":\"amount of PRNT.\",\"_slippage\":\"maximum amount of slippage allowed for any occurring trades\"},\"returns\":{\"_0\":\"LP amount\"}}},\"stateVariables\":{\"MAX_SLIPPAGE\":{\"details\":\"If the slippage limit of the LockZap contract is lower then that of the Compounder, transactions might fail unexpectedly.      Therefore ensure that this slippage limit is equal to that of the Compounder contract.\"}},\"title\":\"LockZap contract\",\"version\":1},\"userdoc\":{\"events\":{\"Zapped(bool,uint256,uint256,address,address,uint256)\":{\"notice\":\"Emitted when zap is done\"}},\"kind\":\"user\",\"methods\":{\"BASE_PERCENT()\":{\"notice\":\"Base Percent\"},\"MAX_SLIPPAGE()\":{\"notice\":\"The maximum amount of slippage that a user can set for the execution of Zaps\"},\"RATIO_DIVISOR()\":{\"notice\":\"RATIO Divisor\"},\"REFERRAL_CODE()\":{\"notice\":\"We don't utilize any specific referral code for borrows perfomed via zaps\"},\"VARIABLE_INTEREST_RATE_MODE()\":{\"notice\":\"Borrow rate mode\"},\"aaveOracle()\":{\"notice\":\"aave oracle contract\"},\"ethLPRatio()\":{\"notice\":\"parameter to set the ratio of ETH in the LP token, can be 2000 for an 80/20 bal lp\"},\"getPoolHelper()\":{\"notice\":\"Returns pool helper address used for PRNT-WETH swaps\"},\"getUniRouter()\":{\"notice\":\"Returns uni router address used for all non PRNT-WETH swaps\"},\"getVDebtToken(address)\":{\"notice\":\"Get Variable debt token address\"},\"initialize(address,address,address,address,address,uint256,address)\":{\"notice\":\"Initializer\"},\"lendingPool()\":{\"notice\":\"Lending Pool contract\"},\"mfd()\":{\"notice\":\"Multi Fee distribution contract\"},\"pause()\":{\"notice\":\"Pause zapping operation.\"},\"poolHelper()\":{\"notice\":\"Pool helper contract used for PRNT-WETH swaps\"},\"priceProvider()\":{\"notice\":\"Price provider contract\"},\"prntAddr()\":{\"notice\":\"PRNT token address\"},\"quoteFromToken(address,uint256)\":{\"notice\":\"Calculate amount of specified tokens received for selling PRNT\"},\"setAaveOracle(address)\":{\"notice\":\"Set AAVE Oracle used to fetch asset prices in USD.\"},\"setMfd(address)\":{\"notice\":\"Set Multi fee distribution contract.\"},\"setPoolHelper(address)\":{\"notice\":\"Set Pool Helper contract used fror WETH-PRNT swaps\"},\"setPriceProvider(address)\":{\"notice\":\"Set Price Provider.\"},\"setUniRouter(address)\":{\"notice\":\"Set Univ2 style router contract address used for all non PRNT<>WETH swaps\"},\"uniRouter()\":{\"notice\":\"AMM router used for all non PRNT-WETH swaps on Arbitrum\"},\"unpause()\":{\"notice\":\"Unpause zapping operation.\"},\"weth()\":{\"notice\":\"Wrapped ETH\"},\"withdrawLockedETH(address,uint256)\":{\"notice\":\"Allows owner to recover ETH locked in this contract.\"},\"zap(bool,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Zap tokens to stake LP\"},\"zapFromVesting(bool,address,uint256,uint256,uint256)\":{\"notice\":\"Zap tokens from vesting\"},\"zapOnBehalf(bool,address,uint256,uint256,address,uint256)\":{\"notice\":\"Zap tokens to stake LP\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/prime/zap/LockZap.sol\":\"LockZap\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x359a1ab89b46b9aba7bcad3fb651924baf4893d15153049b9976b0fc9be1358e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xad32f6821f860555f9530902a65b54203a4f5db2117f4384ae47a124958078db\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"contracts/interfaces/AggregatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\ninterface AggregatorInterface {\\n\\tfunction latestAnswer() external view returns (int256);\\n\\n\\tfunction latestTimestamp() external view returns (uint256);\\n\\n\\tfunction latestRound() external view returns (uint256);\\n\\n\\tfunction getAnswer(uint256 roundId) external view returns (int256);\\n\\n\\tfunction getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n\\tevent AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n\\n\\tevent NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\",\"keccak256\":\"0xb2938f7114988ee6a3a1e86310e06d38ac8aace76d344b60cb1da30de49fff16\",\"license\":\"MIT\"},\"contracts/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\ninterface AggregatorV3Interface {\\n\\tfunction decimals() external view returns (uint8);\\n\\n\\tfunction description() external view returns (string memory);\\n\\n\\tfunction version() external view returns (uint256);\\n\\n\\t// getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n\\t// if they do not have data to report, instead of returning unset values\\n\\t// which could be misinterpreted as actual reported values.\\n\\tfunction getRoundData(\\n\\t\\tuint80 _roundId\\n\\t)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n\\tfunction latestRoundData()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0x0a6cadd5e05492e74282965db755bc834bb468ee493ae44429c7f2cf38fb8d5f\",\"license\":\"MIT\"},\"contracts/interfaces/IAaveOracle.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\n/**\\n * @title IAaveOracle interface\\n * @notice Interface for the Aave oracle.\\n **/\\n\\ninterface IAaveOracle {\\n\\tfunction BASE_CURRENCY() external view returns (address); // if usd returns 0x0, if eth returns weth address\\n\\n\\tfunction BASE_CURRENCY_UNIT() external view returns (uint256);\\n\\n\\t/***********\\n    @dev returns the asset price in ETH\\n     */\\n\\tfunction getAssetPrice(address asset) external view returns (uint256);\\n\\n\\tfunction getSourceOfAsset(address asset) external view returns (address);\\n}\\n\",\"keccak256\":\"0x829468b50cba8db2f65ec609801fec1847b87ba65f8a6feaa8d71e97acd065c3\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IChainlinkAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Code from https://github.com/smartcontractkit/chainlink/blob/master/evm-contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"./AggregatorInterface.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\ninterface IChainlinkAggregator is AggregatorInterface, AggregatorV3Interface {}\\n\",\"keccak256\":\"0xcfc3dbbd8052419569c2ba3cedde2193da530ca2e3e5b2e09ca79612f5860727\",\"license\":\"MIT\"},\"contracts/interfaces/IFeeDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"./LockedBalance.sol\\\";\\n\\ninterface IFeeDistribution {\\n\\tstruct RewardData {\\n\\t\\taddress token;\\n\\t\\tuint256 amount;\\n\\t}\\n\\n\\tfunction addReward(address rewardsToken) external;\\n\\n\\tfunction removeReward(address _rewardToken) external;\\n}\\n\",\"keccak256\":\"0x421b5d02ce20947dda76d10f1398c5c075cae789bd453b61935d9b2609c5ac48\",\"license\":\"MIT\"},\"contracts/interfaces/ILendingPool.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {ILendingPoolAddressesProvider} from \\\"./ILendingPoolAddressesProvider.sol\\\";\\nimport {DataTypes} from \\\"../lending/libraries/types/DataTypes.sol\\\";\\n\\ninterface ILendingPool {\\n\\t/**\\n\\t * @dev Emitted on deposit()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address initiating the deposit\\n\\t * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\\n\\t * @param amount The amount deposited\\n\\t * @param referral The referral code used\\n\\t **/\\n\\tevent Deposit(\\n\\t\\taddress indexed reserve,\\n\\t\\taddress user,\\n\\t\\taddress indexed onBehalfOf,\\n\\t\\tuint256 amount,\\n\\t\\tuint16 indexed referral\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted on withdraw()\\n\\t * @param reserve The address of the underlyng asset being withdrawn\\n\\t * @param user The address initiating the withdrawal, owner of aTokens\\n\\t * @param to Address that will receive the underlying\\n\\t * @param amount The amount to be withdrawn\\n\\t **/\\n\\tevent Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n\\t/**\\n\\t * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n\\t * @param reserve The address of the underlying asset being borrowed\\n\\t * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n\\t * initiator of the transaction on flashLoan()\\n\\t * @param onBehalfOf The address that will be getting the debt\\n\\t * @param amount The amount borrowed out\\n\\t * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\\n\\t * @param borrowRate The numeric rate at which the user has borrowed\\n\\t * @param referral The referral code used\\n\\t **/\\n\\tevent Borrow(\\n\\t\\taddress indexed reserve,\\n\\t\\taddress user,\\n\\t\\taddress indexed onBehalfOf,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 borrowRateMode,\\n\\t\\tuint256 borrowRate,\\n\\t\\tuint16 indexed referral\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted on repay()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The beneficiary of the repayment, getting his debt reduced\\n\\t * @param repayer The address of the user initiating the repay(), providing the funds\\n\\t * @param amount The amount repaid\\n\\t **/\\n\\tevent Repay(address indexed reserve, address indexed user, address indexed repayer, uint256 amount);\\n\\n\\t/**\\n\\t * @dev Emitted on swapBorrowRateMode()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address of the user swapping his rate mode\\n\\t * @param rateMode The rate mode that the user wants to swap to\\n\\t **/\\n\\tevent Swap(address indexed reserve, address indexed user, uint256 rateMode);\\n\\n\\t/**\\n\\t * @dev Emitted on setUserUseReserveAsCollateral()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address of the user enabling the usage as collateral\\n\\t **/\\n\\tevent ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n\\t/**\\n\\t * @dev Emitted on setUserUseReserveAsCollateral()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address of the user enabling the usage as collateral\\n\\t **/\\n\\tevent ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n\\t/**\\n\\t * @dev Emitted on rebalanceStableBorrowRate()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address of the user for which the rebalance has been executed\\n\\t **/\\n\\tevent RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n\\t/**\\n\\t * @dev Emitted on flashLoan()\\n\\t * @param target The address of the flash loan receiver contract\\n\\t * @param initiator The address initiating the flash loan\\n\\t * @param asset The address of the asset being flash borrowed\\n\\t * @param amount The amount flash borrowed\\n\\t * @param premium The fee flash borrowed\\n\\t * @param referralCode The referral code used\\n\\t **/\\n\\tevent FlashLoan(\\n\\t\\taddress indexed target,\\n\\t\\taddress indexed initiator,\\n\\t\\taddress indexed asset,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 premium,\\n\\t\\tuint16 referralCode\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted when the pause is triggered.\\n\\t */\\n\\tevent Paused();\\n\\n\\t/**\\n\\t * @dev Emitted when the pause is lifted.\\n\\t */\\n\\tevent Unpaused();\\n\\n\\t/**\\n\\t * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\\n\\t * LendingPoolCollateral manager using a DELEGATECALL\\n\\t * This allows to have the events in the generated ABI for LendingPool.\\n\\t * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n\\t * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n\\t * @param user The address of the borrower getting liquidated\\n\\t * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n\\t * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\\n\\t * @param liquidator The address of the liquidator\\n\\t * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n\\t * to receive the underlying collateral asset directly\\n\\t **/\\n\\tevent LiquidationCall(\\n\\t\\taddress indexed collateralAsset,\\n\\t\\taddress indexed debtAsset,\\n\\t\\taddress indexed user,\\n\\t\\tuint256 debtToCover,\\n\\t\\tuint256 liquidatedCollateralAmount,\\n\\t\\taddress liquidator,\\n\\t\\tbool receiveAToken\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\\n\\t * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\\n\\t * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\\n\\t * gets added to the LendingPool ABI\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param liquidityRate The new liquidity rate\\n\\t * @param stableBorrowRate The new stable borrow rate\\n\\t * @param variableBorrowRate The new variable borrow rate\\n\\t * @param liquidityIndex The new liquidity index\\n\\t * @param variableBorrowIndex The new variable borrow index\\n\\t **/\\n\\tevent ReserveDataUpdated(\\n\\t\\taddress indexed reserve,\\n\\t\\tuint256 liquidityRate,\\n\\t\\tuint256 stableBorrowRate,\\n\\t\\tuint256 variableBorrowRate,\\n\\t\\tuint256 liquidityIndex,\\n\\t\\tuint256 variableBorrowIndex\\n\\t);\\n\\n\\tfunction initialize(ILendingPoolAddressesProvider provider) external;\\n\\n\\t/**\\n\\t * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n\\t * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\n\\t * @param asset The address of the underlying asset to deposit\\n\\t * @param amount The amount to be deposited\\n\\t * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n\\t *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n\\t *   is a different wallet\\n\\t * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n\\t *   0 if the action is executed directly by the user, without any middle-man\\n\\t **/\\n\\tfunction deposit(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\\n\\n\\tfunction depositWithAutoDLP(\\n\\t\\taddress asset,\\n\\t\\tuint256 amount,\\n\\t\\taddress onBehalfOf,\\n\\t\\tuint16 referralCode\\n\\t) external;\\n\\n\\t/**\\n\\t * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n\\t * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n\\t * @param asset The address of the underlying asset to withdraw\\n\\t * @param amount The underlying amount to be withdrawn\\n\\t *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n\\t * @param to Address that will receive the underlying, same as msg.sender if the user\\n\\t *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n\\t *   different wallet\\n\\t * @return The final amount withdrawn\\n\\t **/\\n\\tfunction withdraw(address asset, uint256 amount, address to) external returns (uint256);\\n\\n\\t/**\\n\\t * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n\\t * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\\n\\t * corresponding debt token (StableDebtToken or VariableDebtToken)\\n\\t * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n\\t *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n\\t * @param asset The address of the underlying asset to borrow\\n\\t * @param amount The amount to be borrowed\\n\\t * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n\\t * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n\\t *   0 if the action is executed directly by the user, without any middle-man\\n\\t * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\\n\\t * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n\\t * if he has been given credit delegation allowance\\n\\t **/\\n\\tfunction borrow(\\n\\t\\taddress asset,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 interestRateMode,\\n\\t\\tuint16 referralCode,\\n\\t\\taddress onBehalfOf\\n\\t) external;\\n\\n\\t/**\\n\\t * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n\\t * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n\\t * @param asset The address of the borrowed underlying asset previously borrowed\\n\\t * @param amount The amount to repay\\n\\t * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n\\t * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n\\t * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n\\t * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n\\t * other borrower whose debt should be removed\\n\\t * @return The final amount repaid\\n\\t **/\\n\\tfunction repay(address asset, uint256 amount, uint256 rateMode, address onBehalfOf) external returns (uint256);\\n\\n\\t/**\\n\\t * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\\n\\t * @param asset The address of the underlying asset borrowed\\n\\t * @param rateMode The rate mode that the user wants to swap to\\n\\t **/\\n\\tfunction swapBorrowRateMode(address asset, uint256 rateMode) external;\\n\\n\\t/**\\n\\t * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n\\t * - Users can be rebalanced if the following conditions are satisfied:\\n\\t *     1. Usage ratio is above 95%\\n\\t *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\\n\\t *        borrowed at a stable rate and depositors are not earning enough\\n\\t * @param asset The address of the underlying asset borrowed\\n\\t * @param user The address of the user to be rebalanced\\n\\t **/\\n\\tfunction rebalanceStableBorrowRate(address asset, address user) external;\\n\\n\\t/**\\n\\t * @dev Allows depositors to enable/disable a specific deposited asset as collateral\\n\\t * @param asset The address of the underlying asset deposited\\n\\t * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\\n\\t **/\\n\\tfunction setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n\\t/**\\n\\t * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n\\t * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n\\t *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n\\t * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n\\t * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n\\t * @param user The address of the borrower getting liquidated\\n\\t * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n\\t * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n\\t * to receive the underlying collateral asset directly\\n\\t **/\\n\\tfunction liquidationCall(\\n\\t\\taddress collateralAsset,\\n\\t\\taddress debtAsset,\\n\\t\\taddress user,\\n\\t\\tuint256 debtToCover,\\n\\t\\tbool receiveAToken\\n\\t) external;\\n\\n\\t/**\\n\\t * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\\n\\t * as long as the amount taken plus a fee is returned.\\n\\t * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\\n\\t * For further details please visit https://developers.aave.com\\n\\t * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\\n\\t * @param assets The addresses of the assets being flash-borrowed\\n\\t * @param amounts The amounts amounts being flash-borrowed\\n\\t * @param modes Types of the debt to open if the flash loan is not returned:\\n\\t *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n\\t *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n\\t *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n\\t * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n\\t * @param params Variadic packed params to pass to the receiver as extra information\\n\\t * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n\\t *   0 if the action is executed directly by the user, without any middle-man\\n\\t **/\\n\\tfunction flashLoan(\\n\\t\\taddress receiverAddress,\\n\\t\\taddress[] calldata assets,\\n\\t\\tuint256[] calldata amounts,\\n\\t\\tuint256[] calldata modes,\\n\\t\\taddress onBehalfOf,\\n\\t\\tbytes calldata params,\\n\\t\\tuint16 referralCode\\n\\t) external;\\n\\n\\t/**\\n\\t * @dev Returns the user account data across all the reserves\\n\\t * @param user The address of the user\\n\\t * @return totalCollateralETH the total collateral in ETH of the user\\n\\t * @return totalDebtETH the total debt in ETH of the user\\n\\t * @return availableBorrowsETH the borrowing power left of the user\\n\\t * @return currentLiquidationThreshold the liquidation threshold of the user\\n\\t * @return ltv the loan to value of the user\\n\\t * @return healthFactor the current health factor of the user\\n\\t **/\\n\\tfunction getUserAccountData(\\n\\t\\taddress user\\n\\t)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256 totalCollateralETH,\\n\\t\\t\\tuint256 totalDebtETH,\\n\\t\\t\\tuint256 availableBorrowsETH,\\n\\t\\t\\tuint256 currentLiquidationThreshold,\\n\\t\\t\\tuint256 ltv,\\n\\t\\t\\tuint256 healthFactor\\n\\t\\t);\\n\\n\\tfunction initReserve(\\n\\t\\taddress reserve,\\n\\t\\taddress aTokenAddress,\\n\\t\\taddress stableDebtAddress,\\n\\t\\taddress variableDebtAddress,\\n\\t\\taddress interestRateStrategyAddress\\n\\t) external;\\n\\n\\tfunction setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress) external;\\n\\n\\tfunction setConfiguration(address reserve, uint256 configuration) external;\\n\\n\\t/**\\n\\t * @dev Returns the configuration of the reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The configuration of the reserve\\n\\t **/\\n\\tfunction getConfiguration(address asset) external view returns (DataTypes.ReserveConfigurationMap memory);\\n\\n\\t/**\\n\\t * @dev Returns the configuration of the user across all the reserves\\n\\t * @param user The user address\\n\\t * @return The configuration of the user\\n\\t **/\\n\\tfunction getUserConfiguration(address user) external view returns (DataTypes.UserConfigurationMap memory);\\n\\n\\t/**\\n\\t * @dev Returns the normalized income normalized income of the reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The reserve's normalized income\\n\\t */\\n\\tfunction getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns the normalized variable debt per unit of asset\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The reserve normalized variable debt\\n\\t */\\n\\tfunction getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns the state and configuration of the reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The state of the reserve\\n\\t **/\\n\\tfunction getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n\\tfunction finalizeTransfer(\\n\\t\\taddress asset,\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 balanceFromAfter,\\n\\t\\tuint256 balanceToBefore\\n\\t) external;\\n\\n\\tfunction getReservesList() external view returns (address[] memory);\\n\\n\\tfunction getAddressesProvider() external view returns (ILendingPoolAddressesProvider);\\n\\n\\tfunction setPause(bool val) external;\\n\\n\\tfunction paused() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd7d7999d232a7a01206cfce2bb140ecb46778decac322d9b12a72976b5b34d5c\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/ILendingPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\n/**\\n * @title LendingPoolAddressesProvider contract\\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\\n * - Owned by the Aave Governance\\n * @author Aave\\n **/\\ninterface ILendingPoolAddressesProvider {\\n\\tevent MarketIdSet(string newMarketId);\\n\\tevent LendingPoolUpdated(address indexed newAddress);\\n\\tevent ConfigurationAdminUpdated(address indexed newAddress);\\n\\tevent EmergencyAdminUpdated(address indexed newAddress);\\n\\tevent LendingPoolConfiguratorUpdated(address indexed newAddress);\\n\\tevent LendingPoolCollateralManagerUpdated(address indexed newAddress);\\n\\tevent PriceOracleUpdated(address indexed newAddress);\\n\\tevent LendingRateOracleUpdated(address indexed newAddress);\\n\\tevent ProxyCreated(bytes32 id, address indexed newAddress);\\n\\tevent AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\\n\\n\\tfunction getMarketId() external view returns (string memory);\\n\\n\\tfunction setMarketId(string calldata marketId) external;\\n\\n\\tfunction setAddress(bytes32 id, address newAddress) external;\\n\\n\\tfunction setAddressAsProxy(bytes32 id, address impl) external;\\n\\n\\tfunction getAddress(bytes32 id) external view returns (address);\\n\\n\\tfunction getLendingPool() external view returns (address);\\n\\n\\tfunction setLendingPoolImpl(address pool) external;\\n\\n\\tfunction getLendingPoolConfigurator() external view returns (address);\\n\\n\\tfunction setLendingPoolConfiguratorImpl(address configurator) external;\\n\\n\\tfunction getLendingPoolCollateralManager() external view returns (address);\\n\\n\\tfunction setLendingPoolCollateralManager(address manager) external;\\n\\n\\tfunction getPoolAdmin() external view returns (address);\\n\\n\\tfunction setPoolAdmin(address admin) external;\\n\\n\\tfunction getEmergencyAdmin() external view returns (address);\\n\\n\\tfunction setEmergencyAdmin(address admin) external;\\n\\n\\tfunction getPriceOracle() external view returns (address);\\n\\n\\tfunction setPriceOracle(address priceOracle) external;\\n\\n\\tfunction getLendingRateOracle() external view returns (address);\\n\\n\\tfunction setLendingRateOracle(address lendingRateOracle) external;\\n\\n\\tfunction getLiquidationFeeTo() external view returns (address);\\n\\n\\tfunction setLiquidationFeeTo(address liquidationFeeTo) external;\\n}\\n\",\"keccak256\":\"0x79e182f661632c6cd8cd15b460c7835f1eda952dd14bc28cf4966f37d4cb2e40\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IMintableToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IMintableToken is IERC20 {\\n\\tfunction mint(address _receiver, uint256 _amount) external returns (bool);\\n\\n\\tfunction burn(uint256 _amount) external returns (bool);\\n\\n\\tfunction setMinter(address _minter) external returns (bool);\\n\\n\\tfunction priceProvider() external view returns (address);\\n}\\n\",\"keccak256\":\"0x095eacfa4ddae47eb3053bc93643d78a683b6006009ce949ea8addf76c886aec\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IMultiFeeDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"./LockedBalance.sol\\\";\\nimport \\\"./IFeeDistribution.sol\\\";\\nimport \\\"./IMintableToken.sol\\\";\\n\\ninterface IMultiFeeDistribution is IFeeDistribution {\\n\\tfunction exit(bool claimRewards) external;\\n\\n\\tfunction stake(uint256 amount, address onBehalfOf, uint256 typeIndex) external;\\n\\n\\tfunction prntToken() external view returns (IMintableToken);\\n\\n\\tfunction getPriceProvider() external view returns (address);\\n\\n\\tfunction lockInfo(address user) external view returns (LockedBalance[] memory);\\n\\n\\tfunction autocompoundEnabled(address user) external view returns (bool);\\n\\n\\tfunction defaultLockIndex(address _user) external view returns (uint256);\\n\\n\\tfunction autoRelockDisabled(address user) external view returns (bool);\\n\\n\\tfunction totalBalance(address user) external view returns (uint256);\\n\\n\\tfunction lockedBalance(address user) external view returns (uint256);\\n\\n\\tfunction lockedBalances(\\n\\t\\taddress user\\n\\t) external view returns (uint256, uint256, uint256, uint256, LockedBalance[] memory);\\n\\n\\tfunction getBalances(address _user) external view returns (Balances memory);\\n\\n\\tfunction zapVestingToLp(address _address) external returns (uint256);\\n\\n\\tfunction claimableRewards(address account) external view returns (IFeeDistribution.RewardData[] memory rewards);\\n\\n\\tfunction setDefaultRelockTypeIndex(uint256 _index) external;\\n\\n\\tfunction daoTreasury() external view returns (address);\\n\\n\\tfunction stakingToken() external view returns (address);\\n\\n\\tfunction userSlippage(address) external view returns (uint256);\\n\\n\\tfunction claimFromConverter(address) external;\\n\\n\\tfunction vestTokens(address user, uint256 amount, bool withPenalty) external;\\n}\\n\\ninterface IMFDPlus is IMultiFeeDistribution {\\n\\tfunction getLastClaimTime(address _user) external returns (uint256);\\n\\n\\tfunction claimBounty(address _user, bool _execute) external returns (bool issueBaseBounty);\\n\\n\\tfunction claimCompound(address _user, bool _execute, uint256 _slippage) external returns (uint256 bountyAmt);\\n\\n\\tfunction setAutocompound(bool _newVal) external;\\n\\n\\tfunction getAutocompoundEnabled(address _user) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x6eae75bc31ca20b94f425a2ba2aede758baf09fc2ae38f630a38abf4ff15a72c\",\"license\":\"MIT\"},\"contracts/interfaces/IPoolHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IPoolHelper {\\n\\tfunction lpTokenAddr() external view returns (address);\\n\\n\\tfunction zapWETH(uint256 amount) external returns (uint256);\\n\\n\\tfunction zapTokens(uint256 _wethAmt, uint256 _prntAmt) external returns (uint256);\\n\\n\\tfunction quoteFromToken(uint256 tokenAmount) external view returns (uint256 optimalWETHAmount);\\n\\n\\tfunction quoteWETH(uint256 lpAmount) external view returns (uint256 wethAmount);\\n\\n\\tfunction getLpPrice(uint256 prntPriceInEth) external view returns (uint256 priceInEth);\\n\\n\\tfunction getReserves() external view returns (uint256 prnt, uint256 weth, uint256 lpTokenSupply);\\n\\n\\tfunction getPrice() external view returns (uint256 priceInEth);\\n\\n\\tfunction quoteSwap(address _inToken, uint256 _wethAmount) external view returns (uint256 tokenAmount);\\n\\n\\tfunction swapToWeth(address _inToken, uint256 _amount, uint256 _minAmountOut) external;\\n}\\n\\ninterface IBalancerPoolHelper is IPoolHelper {\\n\\tfunction initializePool(string calldata _tokenName, string calldata _tokenSymbol) external;\\n}\\n\\ninterface IUniswapPoolHelper is IPoolHelper {\\n\\tfunction initializePool() external;\\n}\\n\\ninterface ITestPoolHelper is IPoolHelper {\\n\\tfunction sell(uint256 _amount) external returns (uint256 amountOut);\\n}\\n\",\"keccak256\":\"0xad679c74b1966322ad2624bea0cbc6aaf15f88ae310160360bb3fbae185d27b7\",\"license\":\"MIT\"},\"contracts/interfaces/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\n/************\\n@title IPriceOracle interface\\n@notice Interface for the Aave price oracle.*/\\ninterface IPriceOracle {\\n\\t/***********\\n    @dev returns the asset price in ETH\\n     */\\n\\tfunction getAssetPrice(address asset) external view returns (uint256);\\n\\n\\t/***********\\n    @dev sets the asset price, in wei\\n     */\\n\\tfunction setAssetPrice(address asset, uint256 price) external;\\n}\\n\",\"keccak256\":\"0x32f9bd3f20d9a2d6ae07470a1fa9f30b33323b74880c85e44339f05e91aecb2c\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IPriceProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\ninterface IPriceProvider {\\n\\tfunction getTokenPrice() external view returns (uint256);\\n\\n\\tfunction getTokenPriceUsd() external view returns (uint256);\\n\\n\\tfunction getLpTokenPrice() external view returns (uint256);\\n\\n\\tfunction getLpTokenPriceUsd() external view returns (uint256);\\n\\n\\tfunction decimals() external view returns (uint256);\\n\\n\\tfunction update() external;\\n\\n\\tfunction baseAssetChainlinkAdapter() external view returns (address);\\n}\\n\",\"keccak256\":\"0x8f5da67830c8d8dce0eebeb5626c9e1c2ed86132a8ae01e1fc6aa48cb60ae221\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\ninterface IWETH {\\n\\tfunction balanceOf(address) external returns (uint256);\\n\\n\\tfunction deposit() external payable;\\n\\n\\tfunction withdraw(uint256) external;\\n\\n\\tfunction approve(address guy, uint256 wad) external returns (bool);\\n\\n\\tfunction transferFrom(address src, address dst, uint256 wad) external returns (bool);\\n\\n\\tfunction transfer(address to, uint256 value) external returns (bool);\\n\\n\\tfunction allowance(address owner, address spender) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x81802458b401654d7b326cc74c7589fc1ca979ba7f4762684f1c28d775a291f6\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/LockedBalance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\nstruct LockedBalance {\\n\\tuint256 amount;\\n\\tuint256 unlockTime;\\n\\tuint256 multiplier;\\n\\tuint256 duration;\\n}\\n\\nstruct EarnedBalance {\\n\\tuint256 amount;\\n\\tuint256 unlockTime;\\n\\tuint256 penalty;\\n}\\n\\nstruct Reward {\\n\\tuint256 periodFinish;\\n\\tuint256 rewardPerSecond;\\n\\tuint256 lastUpdateTime;\\n\\tuint256 rewardPerTokenStored;\\n\\t// tracks already-added balances to handle accrued interest in aToken rewards\\n\\t// for the stakingToken this value is unused and will always be 0\\n\\tuint256 balance;\\n}\\n\\nstruct Balances {\\n\\tuint256 total; // sum of earnings and lockings; no use when LP and PRNT is different\\n\\tuint256 unlocked; // PRNT token\\n\\tuint256 locked; // LP token or PRNT token\\n\\tuint256 lockedWithMultiplier; // Multiplied locked amount\\n\\tuint256 earned; // PRNT token\\n}\\n\",\"keccak256\":\"0x6dbc04232605f1510a1db1b9c9467bb99cda33ac2335775e5faae2cc7d4eef07\",\"license\":\"MIT\"},\"contracts/interfaces/uniswap/IUniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\ninterface IUniswapV2Router01 {\\n\\tfunction factory() external view returns (address);\\n\\n\\tfunction WETH() external view returns (address);\\n\\n\\tfunction addLiquidity(\\n\\t\\taddress tokenA,\\n\\t\\taddress tokenB,\\n\\t\\tuint256 amountADesired,\\n\\t\\tuint256 amountBDesired,\\n\\t\\tuint256 amountAMin,\\n\\t\\tuint256 amountBMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\\n\\n\\tfunction addLiquidityETH(\\n\\t\\taddress token,\\n\\t\\tuint256 amountTokenDesired,\\n\\t\\tuint256 amountTokenMin,\\n\\t\\tuint256 amountETHMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\\n\\n\\tfunction removeLiquidity(\\n\\t\\taddress tokenA,\\n\\t\\taddress tokenB,\\n\\t\\tuint256 liquidity,\\n\\t\\tuint256 amountAMin,\\n\\t\\tuint256 amountBMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external returns (uint256 amountA, uint256 amountB);\\n\\n\\tfunction removeLiquidityETH(\\n\\t\\taddress token,\\n\\t\\tuint256 liquidity,\\n\\t\\tuint256 amountTokenMin,\\n\\t\\tuint256 amountETHMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external returns (uint256 amountToken, uint256 amountETH);\\n\\n\\tfunction removeLiquidityWithPermit(\\n\\t\\taddress tokenA,\\n\\t\\taddress tokenB,\\n\\t\\tuint256 liquidity,\\n\\t\\tuint256 amountAMin,\\n\\t\\tuint256 amountBMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline,\\n\\t\\tbool approveMax,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) external returns (uint256 amountA, uint256 amountB);\\n\\n\\tfunction removeLiquidityETHWithPermit(\\n\\t\\taddress token,\\n\\t\\tuint256 liquidity,\\n\\t\\tuint256 amountTokenMin,\\n\\t\\tuint256 amountETHMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline,\\n\\t\\tbool approveMax,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) external returns (uint256 amountToken, uint256 amountETH);\\n\\n\\tfunction swapExactTokensForTokens(\\n\\t\\tuint256 amountIn,\\n\\t\\tuint256 amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external returns (uint256[] memory amounts);\\n\\n\\tfunction swapTokensForExactTokens(\\n\\t\\tuint256 amountOut,\\n\\t\\tuint256 amountInMax,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external returns (uint256[] memory amounts);\\n\\n\\tfunction swapExactETHForTokens(\\n\\t\\tuint256 amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external payable returns (uint256[] memory amounts);\\n\\n\\tfunction swapTokensForExactETH(\\n\\t\\tuint256 amountOut,\\n\\t\\tuint256 amountInMax,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external returns (uint256[] memory amounts);\\n\\n\\tfunction swapExactTokensForETH(\\n\\t\\tuint256 amountIn,\\n\\t\\tuint256 amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external returns (uint256[] memory amounts);\\n\\n\\tfunction swapETHForExactTokens(\\n\\t\\tuint256 amountOut,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external payable returns (uint256[] memory amounts);\\n\\n\\tfunction quote(uint256 amountA, uint256 reserveA, uint256 reserveB) external pure returns (uint256 amountB);\\n\\n\\tfunction getAmountOut(\\n\\t\\tuint256 amountIn,\\n\\t\\tuint256 reserveIn,\\n\\t\\tuint256 reserveOut\\n\\t) external pure returns (uint256 amountOut);\\n\\n\\tfunction getAmountIn(\\n\\t\\tuint256 amountOut,\\n\\t\\tuint256 reserveIn,\\n\\t\\tuint256 reserveOut\\n\\t) external pure returns (uint256 amountIn);\\n\\n\\tfunction getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n\\tfunction getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0x12715f66054e7081b901c5e86acfb36112f31f64590b19a1b75ed7f0d20d4e87\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/uniswap/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport \\\"./IUniswapV2Router01.sol\\\";\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n\\tfunction removeLiquidityETHSupportingFeeOnTransferTokens(\\n\\t\\taddress token,\\n\\t\\tuint256 liquidity,\\n\\t\\tuint256 amountTokenMin,\\n\\t\\tuint256 amountETHMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external returns (uint256 amountETH);\\n\\n\\tfunction removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n\\t\\taddress token,\\n\\t\\tuint256 liquidity,\\n\\t\\tuint256 amountTokenMin,\\n\\t\\tuint256 amountETHMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline,\\n\\t\\tbool approveMax,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) external returns (uint256 amountETH);\\n\\n\\tfunction swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n\\t\\tuint256 amountIn,\\n\\t\\tuint256 amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external;\\n\\n\\tfunction swapExactETHForTokensSupportingFeeOnTransferTokens(\\n\\t\\tuint256 amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external payable;\\n\\n\\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\\n\\t\\tuint256 amountIn,\\n\\t\\tuint256 amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external;\\n}\\n\",\"keccak256\":\"0x282f6962e74db85aa52cd5884c274a3b7c2c0aa1373c8f258c4b7534053997ad\",\"license\":\"agpl-3.0\"},\"contracts/lending/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nlibrary DataTypes {\\n\\t// refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\\n\\tstruct ReserveData {\\n\\t\\t//stores the reserve configuration\\n\\t\\tReserveConfigurationMap configuration;\\n\\t\\t//the liquidity index. Expressed in ray\\n\\t\\tuint128 liquidityIndex;\\n\\t\\t//variable borrow index. Expressed in ray\\n\\t\\tuint128 variableBorrowIndex;\\n\\t\\t//the current supply rate. Expressed in ray\\n\\t\\tuint128 currentLiquidityRate;\\n\\t\\t//the current variable borrow rate. Expressed in ray\\n\\t\\tuint128 currentVariableBorrowRate;\\n\\t\\t//the current stable borrow rate. Expressed in ray\\n\\t\\tuint128 currentStableBorrowRate;\\n\\t\\tuint40 lastUpdateTimestamp;\\n\\t\\t//tokens addresses\\n\\t\\taddress aTokenAddress;\\n\\t\\taddress stableDebtTokenAddress;\\n\\t\\taddress variableDebtTokenAddress;\\n\\t\\t//address of the interest rate strategy\\n\\t\\taddress interestRateStrategyAddress;\\n\\t\\t//the id of the reserve. Represents the position in the list of the active reserves\\n\\t\\tuint8 id;\\n\\t}\\n\\n\\tstruct ReserveConfigurationMap {\\n\\t\\t//bit 0-15: LTV\\n\\t\\t//bit 16-31: Liq. threshold\\n\\t\\t//bit 32-47: Liq. bonus\\n\\t\\t//bit 48-55: Decimals\\n\\t\\t//bit 56: Reserve is active\\n\\t\\t//bit 57: reserve is frozen\\n\\t\\t//bit 58: borrowing is enabled\\n\\t\\t//bit 59: stable rate borrowing enabled\\n\\t\\t//bit 60-63: reserved\\n\\t\\t//bit 64-79: reserve factor\\n\\t\\tuint256 data;\\n\\t}\\n\\n\\tstruct UserConfigurationMap {\\n\\t\\tuint256 data;\\n\\t}\\n\\n\\tenum InterestRateMode {\\n\\t\\tNONE,\\n\\t\\tSTABLE,\\n\\t\\tVARIABLE\\n\\t}\\n}\\n\",\"keccak256\":\"0xd0e55d855509f898d810479026993d64b9586e1af35816f1d2498ac27e7bcf69\",\"license\":\"agpl-3.0\"},\"contracts/prime/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\n// helper methods from uniswap, for sending ETH that do not consistently return true/false\\n// we modified the original code\\nlibrary TransferHelper {\\n\\terror ETHTransferFailed();\\n\\n\\t/**\\n\\t * @notice Transfer ETH\\n\\t * @param to address\\n\\t * @param value ETH amount\\n\\t */\\n\\tfunction safeTransferETH(address to, uint256 value) internal {\\n\\t\\t(bool success, ) = to.call{value: value}(new bytes(0));\\n\\t\\tif (!success) revert ETHTransferFailed();\\n\\t}\\n}\\n\",\"keccak256\":\"0x0c3ba67e291b40feecf269e84634b09c1fa98d944cc74737e1e54c41b93e7d37\",\"license\":\"MIT\"},\"contracts/prime/libraries/UniV2Helper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {IUniswapV2Router02} from \\\"../../interfaces/uniswap/IUniswapV2Router02.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nlibrary UniV2Helper {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n\\t * @notice Swap the privded amount of _inTokens for _outTokens\\n\\t * @param _router the AMM router that will be used to perform the price query\\n\\t * @param _inToken the address of the token that will be sold\\n\\t * @param _outToken the address of the token that will be bought\\n\\t * @param _inAmount amount of _inTokens to be sold\\n\\t * @return amount of _outTokens received\\n\\t */\\n    function _swap(address _router, address _inToken, address _outToken, uint256 _inAmount) internal returns(uint256){\\n        address[] memory path = new address[](2);\\n        path[0] = _inToken;\\n        path[1] = _outToken;\\n        IERC20(_inToken).forceApprove(_router, _inAmount);\\n        return IUniswapV2Router02(_router).swapExactTokensForTokens(\\n            _inAmount,\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp\\n        )[1];\\n    } \\n\\n    /**\\n\\t * @notice Query the amount of _outTokens received for a given amount of _inTokens\\n\\t * @param _router the AMM router that will be used to perform the price query\\n\\t * @param _inToken the address of the token that will be sold\\n\\t * @param _outToken the address of the token that will be bought\\n\\t * @param _inAmount amount of _inTokens to be sold\\n\\t * @return amount of _outTokens received\\n\\t */\\n    function _quoteSwap(address _router, address _inToken, address _outToken, uint256 _inAmount) internal view returns(uint256){\\n        address[] memory path = new address[](2);\\n        path[0] = _inToken;\\n        path[1] = _outToken;\\n        return IUniswapV2Router02(_router).getAmountsOut(_inAmount, path)[1];\\n    } \\n}\",\"keccak256\":\"0x6cc4a7dfe176aecdc492f670541a736a8e99e81c0193d9a44e463c992aae2a72\",\"license\":\"MIT\"},\"contracts/prime/zap/LockZap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\nimport {DustRefunder} from \\\"./helpers/DustRefunder.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {PausableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport {IMultiFeeDistribution} from \\\"../../interfaces/IMultiFeeDistribution.sol\\\";\\nimport {ILendingPool, DataTypes} from \\\"../../interfaces/ILendingPool.sol\\\";\\nimport {IPoolHelper} from \\\"../../interfaces/IPoolHelper.sol\\\";\\nimport {IPriceProvider} from \\\"../../interfaces/IPriceProvider.sol\\\";\\nimport {IAaveOracle} from \\\"../../interfaces/IAaveOracle.sol\\\";\\nimport {IChainlinkAggregator} from \\\"../../interfaces/IChainlinkAggregator.sol\\\";\\nimport {IWETH} from \\\"../../interfaces/IWETH.sol\\\";\\nimport {IPriceOracle} from \\\"../../interfaces/IPriceOracle.sol\\\";\\nimport {TransferHelper} from \\\"../libraries/TransferHelper.sol\\\";\\nimport {UniV2Helper} from \\\"../libraries/UniV2Helper.sol\\\";\\n\\n/// @title LockZap contract\\n/// @author Prime\\ncontract LockZap is Initializable, OwnableUpgradeable, PausableUpgradeable, DustRefunder {\\n\\tusing SafeERC20 for IERC20;\\n\\n\\t/// @notice The maximum amount of slippage that a user can set for the execution of Zaps\\n\\t/// @dev If the slippage limit of the LockZap contract is lower then that of the Compounder, transactions might fail unexpectedly.\\n\\t///      Therefore ensure that this slippage limit is equal to that of the Compounder contract.\\n\\tuint256 public constant MAX_SLIPPAGE = 8500; //15%\\n\\n\\t/// @notice RATIO Divisor\\n\\tuint256 public constant RATIO_DIVISOR = 10000;\\n\\n\\t/// @notice Base Percent\\n\\tuint256 public constant BASE_PERCENT = 100;\\n\\n\\t/// @notice Borrow rate mode\\n\\tuint256 public constant VARIABLE_INTEREST_RATE_MODE = 2;\\n\\n\\t/// @notice We don't utilize any specific referral code for borrows perfomed via zaps\\n\\tuint16 public constant REFERRAL_CODE = 0;\\n\\n\\t/// @notice Wrapped ETH\\n\\tIWETH public weth;\\n\\n\\t/// @notice PRNT token address\\n\\taddress public prntAddr;\\n\\n\\t/// @notice Multi Fee distribution contract\\n\\tIMultiFeeDistribution public mfd;\\n\\n\\t/// @notice Lending Pool contract\\n\\tILendingPool public lendingPool;\\n\\n\\t/// @notice Pool helper contract used for PRNT-WETH swaps\\n\\tIPoolHelper public poolHelper;\\n\\n\\t/// @notice Price provider contract\\n\\tIPriceProvider public priceProvider;\\n\\n\\t/// @notice aave oracle contract\\n\\tIAaveOracle public aaveOracle;\\n\\n\\t/// @notice parameter to set the ratio of ETH in the LP token, can be 2000 for an 80/20 bal lp\\n\\tuint256 public ethLPRatio;\\n\\n\\t/// @notice AMM router used for all non PRNT-WETH swaps on Arbitrum\\n\\taddress public uniRouter;\\n\\n\\t/********************** Events ***********************/\\n\\t/// @notice Emitted when zap is done\\n\\tevent Zapped(\\n\\t\\tbool _borrow,\\n\\t\\tuint256 _ethAmt,\\n\\t\\tuint256 _prntAmt,\\n\\t\\taddress indexed _from,\\n\\t\\taddress indexed _onBehalf,\\n\\t\\tuint256 _lockTypeIndex\\n\\t);\\n\\n\\tevent PriceProviderUpdated(address indexed _provider);\\n\\n\\tevent MfdUpdated(address indexed _mfdAddr);\\n\\n\\tevent PoolHelperUpdated(address indexed _poolHelper);\\n\\n\\tevent UniRouterUpdated(address indexed _uniRouter);\\n\\n\\t/********************** Errors ***********************/\\n\\terror AddressZero();\\n\\n\\terror InvalidRatio();\\n\\n\\terror InvalidLockLength();\\n\\n\\terror AmountZero();\\n\\n\\terror SlippageTooHigh();\\n\\n\\terror SpecifiedSlippageExceedLimit();\\n\\n\\terror InvalidZapETHSource();\\n\\n\\terror ReceivedETHOnAlternativeAssetZap();\\n\\n\\terror InsufficientETH();\\n\\n\\terror EthTransferFailed();\\n\\n\\tconstructor() {\\n\\t\\t_disableInitializers();\\n\\t}\\n\\n\\t/**\\n\\t * @notice Initializer\\n\\t * @param _rndtPoolHelper Pool helper address used for PRNT-WETH swaps\\n\\t * @param _uniRouter UniV2 router address used for all non PRNT-WETH swaps\\n\\t * @param _lendingPool Lending pool\\n\\t * @param _weth weth address\\n\\t * @param _prntAddr PRNT token address\\n\\t * @param _ethLPRatio ratio of ETH in the LP token, can be 2000 for an 80/20 bal lp\\n\\t * @param _aaveOracle Aave oracle address\\n\\t */\\n\\tfunction initialize(\\n\\t\\tIPoolHelper _rndtPoolHelper,\\n\\t\\taddress _uniRouter,\\n\\t\\tILendingPool _lendingPool,\\n\\t\\tIWETH _weth,\\n\\t\\taddress _prntAddr,\\n\\t\\tuint256 _ethLPRatio,\\n\\t\\tIAaveOracle _aaveOracle\\n\\t) external initializer {\\n\\t\\tif (address(_rndtPoolHelper) == address(0)) revert AddressZero();\\n\\t\\tif (address(_uniRouter) == address(0)) revert AddressZero();\\n\\t\\tif (address(_lendingPool) == address(0)) revert AddressZero();\\n\\t\\tif (address(_weth) == address(0)) revert AddressZero();\\n\\t\\tif (_prntAddr == address(0)) revert AddressZero();\\n\\t\\tif (_ethLPRatio == 0 || _ethLPRatio >= RATIO_DIVISOR) revert InvalidRatio();\\n\\t\\tif (address(_aaveOracle) == address(0)) revert AddressZero();\\n\\n\\t\\t__Ownable_init();\\n\\t\\t__Pausable_init();\\n\\n\\t\\tlendingPool = _lendingPool;\\n\\t\\tpoolHelper = _rndtPoolHelper;\\n\\t\\tuniRouter = _uniRouter;\\n\\t\\tweth = _weth;\\n\\t\\tprntAddr = _prntAddr;\\n\\t\\tethLPRatio = _ethLPRatio;\\n\\t\\taaveOracle = _aaveOracle;\\n\\t}\\n\\n\\treceive() external payable {}\\n\\n\\t/**\\n\\t * @notice Set Price Provider.\\n\\t * @param _provider Price provider contract address.\\n\\t */\\n\\tfunction setPriceProvider(address _provider) external onlyOwner {\\n\\t\\tif (_provider == address(0)) revert AddressZero();\\n\\t\\tpriceProvider = IPriceProvider(_provider);\\n\\t\\temit PriceProviderUpdated(_provider);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Set AAVE Oracle used to fetch asset prices in USD.\\n\\t * @param _aaveOracle oracle contract address.\\n\\t */\\n\\tfunction setAaveOracle(address _aaveOracle) external onlyOwner {\\n\\t\\tif (_aaveOracle == address(0)) revert AddressZero();\\n\\t\\taaveOracle = IAaveOracle(_aaveOracle);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Set Multi fee distribution contract.\\n\\t * @param _mfdAddr New contract address.\\n\\t */\\n\\tfunction setMfd(address _mfdAddr) external onlyOwner {\\n\\t\\tif (_mfdAddr == address(0)) revert AddressZero();\\n\\t\\tmfd = IMultiFeeDistribution(_mfdAddr);\\n\\t\\temit MfdUpdated(_mfdAddr);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Set Pool Helper contract used fror WETH-PRNT swaps\\n\\t * @param _poolHelper New PoolHelper contract address.\\n\\t */\\n\\tfunction setPoolHelper(address _poolHelper) external onlyOwner {\\n\\t\\tif (_poolHelper == address(0)) revert AddressZero();\\n\\t\\tpoolHelper = IPoolHelper(_poolHelper);\\n\\t\\temit PoolHelperUpdated(_poolHelper);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Set Univ2 style router contract address used for all non PRNT<>WETH swaps\\n\\t * @param _uniRouter New PoolHelper contract address.\\n\\t */\\n\\tfunction setUniRouter(address _uniRouter) external onlyOwner {\\n\\t\\tif (_uniRouter == address(0)) revert AddressZero();\\n\\t\\tuniRouter = _uniRouter;\\n\\t\\temit UniRouterUpdated(_uniRouter);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns pool helper address used for PRNT-WETH swaps\\n\\t */\\n\\tfunction getPoolHelper() external view returns (address) {\\n\\t\\treturn address(poolHelper);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns uni router address used for all non PRNT-WETH swaps\\n\\t */\\n\\tfunction getUniRouter() external view returns (address) {\\n\\t\\treturn address(uniRouter);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Get Variable debt token address\\n\\t * @param _asset underlying.\\n\\t */\\n\\tfunction getVDebtToken(address _asset) external view returns (address) {\\n\\t\\tDataTypes.ReserveData memory reserveData = lendingPool.getReserveData(_asset);\\n\\t\\treturn reserveData.variableDebtTokenAddress;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Calculate amount of specified tokens received for selling PRNT\\n\\t * @dev this function is mainly used to calculate how much of the specified token is needed to match the provided PRNT amount when providing liquidity to an AMM\\n\\t * @param _token address of the token that would be received\\n\\t * @param _amount of PRNT to be sold\\n\\t * @return amount of _token received\\n\\t */\\n\\tfunction quoteFromToken(address _token, uint256 _amount) public view returns (uint256) {\\n\\t\\taddress weth_ = address(weth);\\n\\t\\tif (_token != weth_) {\\n\\t\\t\\tuint256 wethAmount = poolHelper.quoteFromToken(_amount);\\n\\t\\t\\treturn UniV2Helper._quoteSwap(uniRouter, weth_, _token, wethAmount);\\n\\t\\t}\\n\\t\\treturn poolHelper.quoteFromToken(_amount);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Zap tokens to stake LP\\n\\t * @param _borrow option to borrow ETH\\n\\t * @param _asset to be used for zapping\\n\\t * @param _assetAmt amount of weth.\\n\\t * @param _prntAmt amount of PRNT.\\n\\t * @param _lockTypeIndex lock length index.\\n\\t * @param _slippage maximum amount of slippage allowed for any occurring trades\\n\\t * @return LP amount\\n\\t */\\n\\tfunction zap(\\n\\t\\tbool _borrow,\\n\\t\\taddress _asset,\\n\\t\\tuint256 _assetAmt,\\n\\t\\tuint256 _prntAmt,\\n\\t\\tuint256 _lockTypeIndex,\\n\\t\\tuint256 _slippage\\n\\t) public payable whenNotPaused returns (uint256) {\\n\\t\\treturn\\n\\t\\t\\t_zap(_borrow, _asset, _assetAmt, _prntAmt, msg.sender, msg.sender, _lockTypeIndex, msg.sender, _slippage);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Zap tokens to stake LP\\n\\t * @dev It will use default lock index\\n\\t * @param _borrow option to borrow ETH\\n\\t * @param _asset to be used for zapping\\n\\t * @param _assetAmt amount of weth.\\n\\t * @param _prntAmt amount of PRNT.\\n\\t * @param _onBehalf user address to be zapped.\\n\\t * @param _slippage maximum amount of slippage allowed for any occurring trades\\n\\t * @return LP amount\\n\\t */\\n\\tfunction zapOnBehalf(\\n\\t\\tbool _borrow,\\n\\t\\taddress _asset,\\n\\t\\tuint256 _assetAmt,\\n\\t\\tuint256 _prntAmt,\\n\\t\\taddress _onBehalf,\\n\\t\\tuint256 _slippage\\n\\t) public payable whenNotPaused returns (uint256) {\\n\\t\\tuint256 duration = mfd.defaultLockIndex(_onBehalf);\\n\\t\\treturn _zap(_borrow, _asset, _assetAmt, _prntAmt, msg.sender, _onBehalf, duration, _onBehalf, _slippage);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Zap tokens from vesting\\n\\t * @param _borrow option to borrow ETH\\n\\t * @param _asset to be used for zapping\\n\\t * @param _assetAmt amount of _asset tokens used to create dLP position\\n\\t * @param _lockTypeIndex lock length index. cannot be shortest option (index 0)\\n\\t * @param _slippage maximum amount of slippage allowed for any occurring trades\\n\\t * @return LP amount\\n\\t */\\n\\tfunction zapFromVesting(\\n\\t\\tbool _borrow,\\n\\t\\taddress _asset,\\n\\t\\tuint256 _assetAmt,\\n\\t\\tuint256 _lockTypeIndex,\\n\\t\\tuint256 _slippage\\n\\t) public payable whenNotPaused returns (uint256) {\\n\\t\\tif (_lockTypeIndex == 0) revert InvalidLockLength();\\n\\t\\tuint256 prntAmt = mfd.zapVestingToLp(msg.sender);\\n\\n\\t\\treturn\\n\\t\\t\\t_zap(_borrow, _asset, _assetAmt, prntAmt, address(this), msg.sender, _lockTypeIndex, msg.sender, _slippage);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Calculates slippage ratio from usd value to LP\\n\\t * @param _assetValueUsd amount value in USD used to create LP pair\\n\\t * @param _liquidity LP token amount\\n\\t */\\n\\tfunction _calcSlippage(uint256 _assetValueUsd, uint256 _liquidity) internal returns (uint256 ratio) {\\n\\t\\tpriceProvider.update();\\n\\t\\tuint256 lpAmountValueUsd = (_liquidity * priceProvider.getLpTokenPriceUsd()) / 1e18;\\n\\t\\tratio = (lpAmountValueUsd * (RATIO_DIVISOR)) / (_assetValueUsd);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Zap into LP\\n\\t * @param _borrow option to borrow ETH\\n\\t * @param _asset that will be used to zap.\\n\\t * @param _assetAmt amount of assets to be zapped\\n\\t * @param _prntAmt amount of PRNT.\\n\\t * @param _from src address of PRNT\\n\\t * @param _onBehalf of the user.\\n\\t * @param _lockTypeIndex lock length index.\\n\\t * @param _refundAddress dust is refunded to this address.\\n\\t * @param _slippage maximum amount of slippage allowed for any occurring trades\\n\\t * @return liquidity LP amount\\n\\t */\\n\\tfunction _zap(\\n\\t\\tbool _borrow,\\n\\t\\taddress _asset,\\n\\t\\tuint256 _assetAmt,\\n\\t\\tuint256 _prntAmt,\\n\\t\\taddress _from,\\n\\t\\taddress _onBehalf,\\n\\t\\tuint256 _lockTypeIndex,\\n\\t\\taddress _refundAddress,\\n\\t\\tuint256 _slippage\\n\\t) internal returns (uint256 liquidity) {\\n\\t\\tIWETH weth_ = weth;\\n\\t\\tif (_asset == address(0)) {\\n\\t\\t\\t_asset = address(weth_);\\n\\t\\t}\\n\\t\\tif (_slippage == 0) {\\n\\t\\t\\t_slippage = MAX_SLIPPAGE;\\n\\t\\t} else {\\n\\t\\t\\tif (MAX_SLIPPAGE > _slippage || _slippage > RATIO_DIVISOR) revert SpecifiedSlippageExceedLimit();\\n\\t\\t}\\n\\t\\tbool isAssetWeth = _asset == address(weth_);\\n\\n\\t\\t// Handle pure ETH\\n\\t\\tif (msg.value > 0) {\\n\\t\\t\\tif (!isAssetWeth) revert ReceivedETHOnAlternativeAssetZap();\\n\\t\\t\\tif (_borrow) revert InvalidZapETHSource();\\n\\t\\t\\t_assetAmt = msg.value;\\n\\t\\t\\tweth_.deposit{value: _assetAmt}();\\n\\t\\t}\\n\\t\\tif (_assetAmt == 0) revert AmountZero();\\n\\t\\tuint256 assetAmountValueUsd = (_assetAmt * aaveOracle.getAssetPrice(_asset)) /\\n\\t\\t\\t(10 ** IERC20Metadata(_asset).decimals());\\n\\n\\t\\t// Handle borrowing logic\\n\\t\\tif (_borrow) {\\n\\t\\t\\t// Borrow the asset on the users behalf\\n\\t\\t\\tlendingPool.borrow(_asset, _assetAmt, VARIABLE_INTEREST_RATE_MODE, REFERRAL_CODE, msg.sender);\\n\\n\\t\\t\\t// If asset isn't WETH, swap for WETH\\n\\t\\t\\tif (!isAssetWeth) {\\n\\t\\t\\t\\t_assetAmt = UniV2Helper._swap(uniRouter, _asset, address(weth_), _assetAmt);\\n\\t\\t\\t}\\n\\t\\t} else if (msg.value == 0) {\\n\\t\\t\\t// Transfer asset from user\\n\\t\\t\\tIERC20(_asset).transferFrom(msg.sender, address(this), _assetAmt);\\n\\t\\t\\tif (!isAssetWeth) {\\n\\t\\t\\t\\t_assetAmt = UniV2Helper._swap(uniRouter, _asset, address(weth_), _assetAmt);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tweth_.approve(address(poolHelper), _assetAmt);\\n\\t\\t//case where prnt is matched with provided ETH\\n\\t\\tif (_prntAmt != 0) {\\n\\t\\t\\t// _from == this when zapping from vesting\\n\\t\\t\\tif (_from != address(this)) {\\n\\t\\t\\t\\tIERC20(prntAddr).safeTransferFrom(msg.sender, address(this), _prntAmt);\\n\\t\\t\\t}\\n\\n\\t\\t\\tIERC20(prntAddr).forceApprove(address(poolHelper), _prntAmt);\\n\\t\\t\\tliquidity = poolHelper.zapTokens(_assetAmt, _prntAmt);\\n\\t\\t\\tassetAmountValueUsd = (assetAmountValueUsd * RATIO_DIVISOR) / ethLPRatio;\\n\\t\\t} else {\\n\\t\\t\\tliquidity = poolHelper.zapWETH(_assetAmt);\\n\\t\\t}\\n\\n\\t\\tif (address(priceProvider) != address(0)) {\\n\\t\\t\\tif (_calcSlippage(assetAmountValueUsd, liquidity) < _slippage) revert SlippageTooHigh();\\n\\t\\t}\\n\\n\\t\\tIERC20(poolHelper.lpTokenAddr()).forceApprove(address(mfd), liquidity);\\n\\t\\tmfd.stake(liquidity, _onBehalf, _lockTypeIndex);\\n\\t\\temit Zapped(_borrow, _assetAmt, _prntAmt, _from, _onBehalf, _lockTypeIndex);\\n\\n\\t\\t_refundDust(prntAddr, _asset, _refundAddress);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Pause zapping operation.\\n\\t */\\n\\tfunction pause() external onlyOwner {\\n\\t\\t_pause();\\n\\t}\\n\\n\\t/**\\n\\t * @notice Unpause zapping operation.\\n\\t */\\n\\tfunction unpause() external onlyOwner {\\n\\t\\t_unpause();\\n\\t}\\n\\n\\t/**\\n\\t * @notice Allows owner to recover ETH locked in this contract.\\n\\t * @param to ETH receiver\\n\\t * @param value ETH amount\\n\\t */\\n\\tfunction withdrawLockedETH(address to, uint256 value) external onlyOwner {\\n\\t\\tTransferHelper.safeTransferETH(to, value);\\n\\t}\\n}\\n\",\"keccak256\":\"0x37939b669759816ffdb21a3b6f40a3a1fa438d328310f32fa2518c7299b45978\",\"license\":\"MIT\"},\"contracts/prime/zap/helpers/DustRefunder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport {IWETH} from \\\"../../../interfaces/IWETH.sol\\\";\\n\\n/// @title Dust Refunder Contract\\n/// @dev Refunds dust tokens remaining from zapping.\\n/// @author Prime\\ncontract DustRefunder {\\n\\tusing SafeERC20 for IERC20;\\n\\n\\t/**\\n\\t * @notice Refunds PRNT and WETH.\\n\\t * @param _prnt PRNT address\\n\\t * @param _weth WETH address\\n\\t * @param _refundAddress Address for refund\\n\\t */\\n\\tfunction _refundDust(address _prnt, address _weth, address _refundAddress) internal {\\n\\t\\tIERC20 prnt = IERC20(_prnt);\\n\\t\\tIWETH weth = IWETH(_weth);\\n\\n\\t\\tuint256 dustWETH = weth.balanceOf(address(this));\\n\\t\\tif (dustWETH > 0) {\\n\\t\\t\\tweth.transfer(_refundAddress, dustWETH);\\n\\t\\t}\\n\\t\\tuint256 dustPrnt = prnt.balanceOf(address(this));\\n\\t\\tif (dustPrnt > 0) {\\n\\t\\t\\tprnt.safeTransfer(_refundAddress, dustPrnt);\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0xd80f8d69da295a3394dd1206539440c5a9b6f87cc1e2121cfee50f58e1d8f892\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000022565b620000e3565b600054610100900460ff16156200008f5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811614620000e1576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b612c5280620000f36000396000f3fe60806040526004361061021d5760003560e01c8063715018a61161011d578063b50bf85c116100b0578063eabcca101161007f578063f2fde38b11610064578063f2fde38b146105d0578063f9759518146105f0578063f9dc1f871461060657600080fd5b8063eabcca1014610590578063ee4e2687146105b057600080fd5b8063b50bf85c1461051f578063b559777a1461053d578063b888879e14610550578063c7d398d21461057057600080fd5b80639506f05f116100ec5780639506f05f146104ac578063a0e47bf6146104bf578063a59a9973146104df578063b0c634ee146104ff57600080fd5b8063715018a61461045157806373809625146104665780638456cb59146104795780638da5cb5b1461048e57600080fd5b806355ac8d30116101b05780636372b2811161017f57806367dbf15d1161016457806367dbf15d146104055780636a7e9f33146104255780636ac3ac8f1461043b57600080fd5b80636372b281146103c5578063667f3745146103e557600080fd5b806355ac8d301461033f5780635c975abb1461035f578063625045ad1461038257806362f3765e146103a257600080fd5b80633f4ba83a116101ec5780633f4ba83a146102ca5780633fc8cef3146102df5780634053b9ea146102ff578063408e6fb81461031f57600080fd5b8063228a1c67146102295780632cd35475146102605780633583849a14610282578063372aa224146102aa57600080fd5b3661022457005b600080fd5b34801561023557600080fd5b50609f546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b34801561026c57600080fd5b5061028061027b3660046124ae565b61061b565b005b34801561028e57600080fd5b50610297600081565b60405161ffff9091168152602001610257565b3480156102b657600080fd5b506102806102c53660046124ae565b610694565b3480156102d657600080fd5b5061028061070d565b3480156102eb57600080fd5b50609754610243906001600160a01b031681565b34801561030b57600080fd5b50609854610243906001600160a01b031681565b34801561032b57600080fd5b5061028061033a3660046124d2565b61071f565b34801561034b57600080fd5b50609b54610243906001600160a01b031681565b34801561036b57600080fd5b5060655460ff166040519015158152602001610257565b34801561038e57600080fd5b5061028061039d3660046124ae565b610735565b3480156103ae57600080fd5b506103b7606481565b604051908152602001610257565b3480156103d157600080fd5b50609d54610243906001600160a01b031681565b3480156103f157600080fd5b506102436104003660046124ae565b610786565b34801561041157600080fd5b506102806104203660046124ae565b61081e565b34801561043157600080fd5b506103b761271081565b34801561044757600080fd5b506103b7609e5481565b34801561045d57600080fd5b50610280610897565b6103b761047436600461250c565b6108a9565b34801561048557600080fd5b506102806108cf565b34801561049a57600080fd5b506033546001600160a01b0316610243565b6103b76104ba366004612565565b6108df565b3480156104cb57600080fd5b50609f54610243906001600160a01b031681565b3480156104eb57600080fd5b50609a54610243906001600160a01b031681565b34801561050b57600080fd5b50609954610243906001600160a01b031681565b34801561052b57600080fd5b50609b546001600160a01b0316610243565b6103b761054b3660046125cc565b610990565b34801561055c57600080fd5b50609c54610243906001600160a01b031681565b34801561057c57600080fd5b506103b761058b3660046124d2565b610a6c565b34801561059c57600080fd5b506102806105ab36600461261d565b610b8f565b3480156105bc57600080fd5b506102806105cb3660046124ae565b610e5a565b3480156105dc57600080fd5b506102806105eb3660046124ae565b610ed3565b3480156105fc57600080fd5b506103b761213481565b34801561061257600080fd5b506103b7600281565b610623610f63565b6001600160a01b03811661064a57604051639fabe1c160e01b815260040160405180910390fd5b609b80546001600160a01b0319166001600160a01b0383169081179091556040517fce3a680d01747abb9461a3d05f1da77c9cfb9a5b7a6cc1828c733dc52b15479790600090a250565b61069c610f63565b6001600160a01b0381166106c357604051639fabe1c160e01b815260040160405180910390fd5b609c80546001600160a01b0319166001600160a01b0383169081179091556040517fb266add5f3044b17d27db796af992cecbe413921b4e8aaaee03c719e16b9806a90600090a250565b610715610f63565b61071d610fbd565b565b610727610f63565b610731828261100f565b5050565b61073d610f63565b6001600160a01b03811661076457604051639fabe1c160e01b815260040160405180910390fd5b609d80546001600160a01b0319166001600160a01b0392909216919091179055565b609a546040517f35ea6a750000000000000000000000000000000000000000000000000000000081526001600160a01b03838116600483015260009283929116906335ea6a759060240161018060405180830381865afa1580156107ee573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081291906127b3565b61012001519392505050565b610826610f63565b6001600160a01b03811661084d57604051639fabe1c160e01b815260040160405180910390fd5b609980546001600160a01b0319166001600160a01b0383169081179091556040517fdee3317c3fa3792a879d5a8f63b6fcfa425fae71a9cccaba4ebaa7d279c99ce690600090a250565b61089f610f63565b61071d60006110bb565b60006108b361110d565b6108c487878787333389338a611160565b979650505050505050565b6108d7610f63565b61071d61195a565b60006108e961110d565b6099546040517f2e88caa10000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301526000921690632e88caa190602401602060405180830381865afa15801561094d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097191906128a0565b9050610984888888883389878b8b611160565b98975050505050505050565b600061099a61110d565b826109d1576040517f1d18e2c100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6099546040517f2843b0190000000000000000000000000000000000000000000000000000000081523360048201526000916001600160a01b031690632843b019906024016020604051808303816000875af1158015610a35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5991906128a0565b90506108c48787878430338a338b611160565b6097546000906001600160a01b039081169084168114610b1857609b54604051637eb8303160e11b8152600481018590526000916001600160a01b03169063fd70606290602401602060405180830381865afa158015610ad0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af491906128a0565b609f54909150610b0f906001600160a01b0316838784611997565b92505050610b89565b609b54604051637eb8303160e11b8152600481018590526001600160a01b039091169063fd70606290602401602060405180830381865afa158015610b61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8591906128a0565b9150505b92915050565b600054610100900460ff1615808015610baf5750600054600160ff909116105b80610bc95750303b158015610bc9575060005460ff166001145b610c405760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b6000805460ff191660011790558015610c63576000805461ff0019166101001790555b6001600160a01b038816610c8a57604051639fabe1c160e01b815260040160405180910390fd5b6001600160a01b038716610cb157604051639fabe1c160e01b815260040160405180910390fd5b6001600160a01b038616610cd857604051639fabe1c160e01b815260040160405180910390fd5b6001600160a01b038516610cff57604051639fabe1c160e01b815260040160405180910390fd5b6001600160a01b038416610d2657604051639fabe1c160e01b815260040160405180910390fd5b821580610d3557506127108310155b15610d6c576040517f648564d300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038216610d9357604051639fabe1c160e01b815260040160405180910390fd5b610d9b611ac5565b610da3611b38565b609a80546001600160a01b03199081166001600160a01b0389811691909117909255609b805482168b8416179055609f805482168a8416179055609780548216888416179055609880548216878416179055609e859055609d80549091169184169190911790558015610e50576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b610e62610f63565b6001600160a01b038116610e8957604051639fabe1c160e01b815260040160405180910390fd5b609f80546001600160a01b0319166001600160a01b0383169081179091556040517f7189a0ba279a96a44871ae8306133ff5ccdb353b75897c09c47e34610cac5fc290600090a250565b610edb610f63565b6001600160a01b038116610f575760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610c37565b610f60816110bb565b50565b6033546001600160a01b0316331461071d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610c37565b610fc5611bab565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b604080516000808252602082019092526001600160a01b03841690839060405161103991906128e5565b60006040518083038185875af1925050503d8060008114611076576040519150601f19603f3d011682016040523d82523d6000602084013e61107b565b606091505b50509050806110b6576040517fb12d13eb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60655460ff161561071d5760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610c37565b6097546000906001600160a01b03908116908a1661117c578099505b8261118b5761213492506111d3565b82612134118061119c575061271083115b156111d3576040517fc82bafc900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038a81169082161434156112af578061121f576040517f7fef56e900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8b15611257576040517fd3555def00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b349950816001600160a01b031663d0e30db08b6040518263ffffffff1660e01b81526004016000604051808303818588803b15801561129557600080fd5b505af11580156112a9573d6000803e3d6000fd5b50505050505b896112e6576040517fcbca5aa200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008b6001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611326573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134a9190612901565b61135590600a612a16565b609d546040517fb3596f070000000000000000000000000000000000000000000000000000000081526001600160a01b038f811660048301529091169063b3596f0790602401602060405180830381865afa1580156113b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113dc91906128a0565b6113e6908d612a25565b6113f09190612a44565b90508c156114b057609a546040517fa415bcad0000000000000000000000000000000000000000000000000000000081526001600160a01b038e81166004830152602482018e905260026044830152600060648301523360848301529091169063a415bcad9060a401600060405180830381600087803b15801561147357600080fd5b505af1158015611487573d6000803e3d6000fd5b50505050816114ab57609f546114a8906001600160a01b03168d858e611bfd565b9a505b61154d565b3461154d576040516323b872dd60e01b8152336004820152306024820152604481018c90526001600160a01b038d16906323b872dd906064016020604051808303816000875af1158015611508573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061152c9190612a66565b508161154d57609f5461154a906001600160a01b03168d858e611bfd565b9a505b609b5460405163095ea7b360e01b81526001600160a01b039182166004820152602481018d90529084169063095ea7b3906044016020604051808303816000875af11580156115a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c49190612a66565b5089156116c2576001600160a01b03891630146115f3576098546115f3906001600160a01b031633308d611cfa565b609b54609854611610916001600160a01b0391821691168c611d98565b609b546040517f753983d6000000000000000000000000000000000000000000000000000000008152600481018d9052602481018c90526001600160a01b039091169063753983d6906044016020604051808303816000875af115801561167b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061169f91906128a0565b609e549094506116b161271083612a25565b6116bb9190612a44565b905061174d565b609b546040517fc829bfda000000000000000000000000000000000000000000000000000000008152600481018d90526001600160a01b039091169063c829bfda906024016020604051808303816000875af1158015611726573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061174a91906128a0565b93505b609c546001600160a01b0316156117a157846117698286611e3c565b10156117a1576040517f850c6f7600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b609954609b54604080517f439e50160000000000000000000000000000000000000000000000000000000081529051611844936001600160a01b0390811693899391169163439e5016916004808201926020929091908290030181865afa158015611810573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118349190612a83565b6001600160a01b03169190611d98565b6099546040517f6e9c931c000000000000000000000000000000000000000000000000000000008152600481018690526001600160a01b038a81166024830152604482018a905290911690636e9c931c90606401600060405180830381600087803b1580156118b257600080fd5b505af11580156118c6573d6000803e3d6000fd5b50505050876001600160a01b0316896001600160a01b03167f185f471aee8e22c0f6772d9076b984cb8394859d474a9799c1421f440262d5818f8e8e8c60405161192b9493929190931515845260208401929092526040830152606082015260800190565b60405180910390a360985461194a906001600160a01b03168d88611f61565b5050509998505050505050505050565b61196261110d565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610ff23390565b6040805160028082526060820183526000928392919060208301908036833701905050905084816000815181106119d0576119d0612aa0565b60200260200101906001600160a01b031690816001600160a01b0316815250508381600181518110611a0457611a04612aa0565b6001600160a01b0392831660209182029290920101526040517fd06ca61f0000000000000000000000000000000000000000000000000000000081529087169063d06ca61f90611a5a9086908590600401612afa565b600060405180830381865afa158015611a77573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611a9f9190810190612b13565b600181518110611ab157611ab1612aa0565b60200260200101519150505b949350505050565b600054610100900460ff16611b305760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610c37565b61071d6120df565b600054610100900460ff16611ba35760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610c37565b61071d612153565b60655460ff1661071d5760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610c37565b604080516002808252606082018352600092839291906020830190803683370190505090508481600081518110611c3657611c36612aa0565b60200260200101906001600160a01b031690816001600160a01b0316815250508381600181518110611c6a57611c6a612aa0565b6001600160a01b039283166020918202929092010152611c8d9086168785611d98565b6040517f38ed17390000000000000000000000000000000000000000000000000000000081526001600160a01b038716906338ed173990611cdb908690600090869030904290600401612bad565b6000604051808303816000875af1158015611a77573d6000803e3d6000fd5b6040516001600160a01b0380851660248301528316604482015260648101829052611d929085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526121ca565b50505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663095ea7b360e01b179052611dfe84826122b2565b611d92576040516001600160a01b038416602482015260006044820152611e3290859063095ea7b360e01b90606401611d2e565b611d9284826121ca565b609c54604080517fa2e6204500000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163a2e62045916004808301928692919082900301818387803b158015611e9a57600080fd5b505af1158015611eae573d6000803e3d6000fd5b505050506000670de0b6b3a7640000609c60009054906101000a90046001600160a01b03166001600160a01b0316636e9a05c56040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f3491906128a0565b611f3e9085612a25565b611f489190612a44565b905083611f5761271083612a25565b610b859190612a44565b6040516370a0823160e01b8152306004820152839083906000906001600160a01b038316906370a08231906024016020604051808303816000875af1158015611fae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fd291906128a0565b9050801561204f5760405163a9059cbb60e01b81526001600160a01b0385811660048301526024820183905283169063a9059cbb906044016020604051808303816000875af1158015612029573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061204d9190612a66565b505b6040516370a0823160e01b81523060048201526000906001600160a01b038516906370a0823190602401602060405180830381865afa158015612096573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120ba91906128a0565b905080156120d6576120d66001600160a01b0385168683612359565b50505050505050565b600054610100900460ff1661214a5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610c37565b61071d336110bb565b600054610100900460ff166121be5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610c37565b6065805460ff19169055565b600061221f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166123899092919063ffffffff16565b90508051600014806122405750808060200190518101906122409190612a66565b6110b65760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610c37565b6000806000846001600160a01b0316846040516122cf91906128e5565b6000604051808303816000865af19150503d806000811461230c576040519150601f19603f3d011682016040523d82523d6000602084013e612311565b606091505b509150915081801561233b57508051158061233b57508080602001905181019061233b9190612a66565b801561235057506001600160a01b0385163b15155b95945050505050565b6040516001600160a01b0383166024820152604481018290526110b690849063a9059cbb60e01b90606401611d2e565b6060611abd848460008585600080866001600160a01b031685876040516123b091906128e5565b60006040518083038185875af1925050503d80600081146123ed576040519150601f19603f3d011682016040523d82523d6000602084013e6123f2565b606091505b50915091506108c4878383876060831561246a578251612463576001600160a01b0385163b6124635760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610c37565b5081611abd565b611abd838381511561247f5781518083602001fd5b8060405162461bcd60e51b8152600401610c379190612be9565b6001600160a01b0381168114610f6057600080fd5b6000602082840312156124c057600080fd5b81356124cb81612499565b9392505050565b600080604083850312156124e557600080fd5b82356124f081612499565b946020939093013593505050565b8015158114610f6057600080fd5b60008060008060008060c0878903121561252557600080fd5b8635612530816124fe565b9550602087013561254081612499565b95989597505050506040840135936060810135936080820135935060a0909101359150565b60008060008060008060c0878903121561257e57600080fd5b8635612589816124fe565b9550602087013561259981612499565b9450604087013593506060870135925060808701356125b781612499565b8092505060a087013590509295509295509295565b600080600080600060a086880312156125e457600080fd5b85356125ef816124fe565b945060208601356125ff81612499565b94979496505050506040830135926060810135926080909101359150565b600080600080600080600060e0888a03121561263857600080fd5b873561264381612499565b9650602088013561265381612499565b9550604088013561266381612499565b9450606088013561267381612499565b9350608088013561268381612499565b925060a0880135915060c088013561269a81612499565b8091505092959891949750929550565b634e487b7160e01b600052604160045260246000fd5b604051610180810167ffffffffffffffff811182821017156126e4576126e46126aa565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715612713576127136126aa565b604052919050565b60006020828403121561272d57600080fd5b6040516020810181811067ffffffffffffffff82111715612750576127506126aa565b6040529151825250919050565b80516fffffffffffffffffffffffffffffffff8116811461277d57600080fd5b919050565b805164ffffffffff8116811461277d57600080fd5b805161277d81612499565b805160ff8116811461277d57600080fd5b600061018082840312156127c657600080fd5b6127ce6126c0565b6127d8848461271b565b81526127e66020840161275d565b60208201526127f76040840161275d565b60408201526128086060840161275d565b60608201526128196080840161275d565b608082015261282a60a0840161275d565b60a082015261283b60c08401612782565b60c082015261284c60e08401612797565b60e082015261010061285f818501612797565b90820152610120612871848201612797565b90820152610140612883848201612797565b908201526101606128958482016127a2565b908201529392505050565b6000602082840312156128b257600080fd5b5051919050565b60005b838110156128d45781810151838201526020016128bc565b83811115611d925750506000910152565b600082516128f78184602087016128b9565b9190910192915050565b60006020828403121561291357600080fd5b6124cb826127a2565b634e487b7160e01b600052601160045260246000fd5b600181815b8085111561296d5781600019048211156129535761295361291c565b8085161561296057918102915b93841c9390800290612937565b509250929050565b60008261298457506001610b89565b8161299157506000610b89565b81600181146129a757600281146129b1576129cd565b6001915050610b89565b60ff8411156129c2576129c261291c565b50506001821b610b89565b5060208310610133831016604e8410600b84101617156129f0575081810a610b89565b6129fa8383612932565b8060001904821115612a0e57612a0e61291c565b029392505050565b60006124cb60ff841683612975565b6000816000190483118215151615612a3f57612a3f61291c565b500290565b600082612a6157634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215612a7857600080fd5b81516124cb816124fe565b600060208284031215612a9557600080fd5b81516124cb81612499565b634e487b7160e01b600052603260045260246000fd5b600081518084526020808501945080840160005b83811015612aef5781516001600160a01b031687529582019590820190600101612aca565b509495945050505050565b828152604060208201526000611abd6040830184612ab6565b60006020808385031215612b2657600080fd5b825167ffffffffffffffff80821115612b3e57600080fd5b818501915085601f830112612b5257600080fd5b815181811115612b6457612b646126aa565b8060051b9150612b758483016126ea565b8181529183018401918481019088841115612b8f57600080fd5b938501935b8385101561098457845182529385019390850190612b94565b85815284602082015260a060408201526000612bcc60a0830186612ab6565b6001600160a01b0394909416606083015250608001529392505050565b6020815260008251806020840152612c088160408501602087016128b9565b601f01601f1916919091016040019291505056fea26469706673582212203ec373d799857fa45fad4374a42af2728af28662ec1d4357579c4544299cbfe564736f6c634300080c0033",
  "deployedBytecode": "0x60806040526004361061021d5760003560e01c8063715018a61161011d578063b50bf85c116100b0578063eabcca101161007f578063f2fde38b11610064578063f2fde38b146105d0578063f9759518146105f0578063f9dc1f871461060657600080fd5b8063eabcca1014610590578063ee4e2687146105b057600080fd5b8063b50bf85c1461051f578063b559777a1461053d578063b888879e14610550578063c7d398d21461057057600080fd5b80639506f05f116100ec5780639506f05f146104ac578063a0e47bf6146104bf578063a59a9973146104df578063b0c634ee146104ff57600080fd5b8063715018a61461045157806373809625146104665780638456cb59146104795780638da5cb5b1461048e57600080fd5b806355ac8d30116101b05780636372b2811161017f57806367dbf15d1161016457806367dbf15d146104055780636a7e9f33146104255780636ac3ac8f1461043b57600080fd5b80636372b281146103c5578063667f3745146103e557600080fd5b806355ac8d301461033f5780635c975abb1461035f578063625045ad1461038257806362f3765e146103a257600080fd5b80633f4ba83a116101ec5780633f4ba83a146102ca5780633fc8cef3146102df5780634053b9ea146102ff578063408e6fb81461031f57600080fd5b8063228a1c67146102295780632cd35475146102605780633583849a14610282578063372aa224146102aa57600080fd5b3661022457005b600080fd5b34801561023557600080fd5b50609f546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b34801561026c57600080fd5b5061028061027b3660046124ae565b61061b565b005b34801561028e57600080fd5b50610297600081565b60405161ffff9091168152602001610257565b3480156102b657600080fd5b506102806102c53660046124ae565b610694565b3480156102d657600080fd5b5061028061070d565b3480156102eb57600080fd5b50609754610243906001600160a01b031681565b34801561030b57600080fd5b50609854610243906001600160a01b031681565b34801561032b57600080fd5b5061028061033a3660046124d2565b61071f565b34801561034b57600080fd5b50609b54610243906001600160a01b031681565b34801561036b57600080fd5b5060655460ff166040519015158152602001610257565b34801561038e57600080fd5b5061028061039d3660046124ae565b610735565b3480156103ae57600080fd5b506103b7606481565b604051908152602001610257565b3480156103d157600080fd5b50609d54610243906001600160a01b031681565b3480156103f157600080fd5b506102436104003660046124ae565b610786565b34801561041157600080fd5b506102806104203660046124ae565b61081e565b34801561043157600080fd5b506103b761271081565b34801561044757600080fd5b506103b7609e5481565b34801561045d57600080fd5b50610280610897565b6103b761047436600461250c565b6108a9565b34801561048557600080fd5b506102806108cf565b34801561049a57600080fd5b506033546001600160a01b0316610243565b6103b76104ba366004612565565b6108df565b3480156104cb57600080fd5b50609f54610243906001600160a01b031681565b3480156104eb57600080fd5b50609a54610243906001600160a01b031681565b34801561050b57600080fd5b50609954610243906001600160a01b031681565b34801561052b57600080fd5b50609b546001600160a01b0316610243565b6103b761054b3660046125cc565b610990565b34801561055c57600080fd5b50609c54610243906001600160a01b031681565b34801561057c57600080fd5b506103b761058b3660046124d2565b610a6c565b34801561059c57600080fd5b506102806105ab36600461261d565b610b8f565b3480156105bc57600080fd5b506102806105cb3660046124ae565b610e5a565b3480156105dc57600080fd5b506102806105eb3660046124ae565b610ed3565b3480156105fc57600080fd5b506103b761213481565b34801561061257600080fd5b506103b7600281565b610623610f63565b6001600160a01b03811661064a57604051639fabe1c160e01b815260040160405180910390fd5b609b80546001600160a01b0319166001600160a01b0383169081179091556040517fce3a680d01747abb9461a3d05f1da77c9cfb9a5b7a6cc1828c733dc52b15479790600090a250565b61069c610f63565b6001600160a01b0381166106c357604051639fabe1c160e01b815260040160405180910390fd5b609c80546001600160a01b0319166001600160a01b0383169081179091556040517fb266add5f3044b17d27db796af992cecbe413921b4e8aaaee03c719e16b9806a90600090a250565b610715610f63565b61071d610fbd565b565b610727610f63565b610731828261100f565b5050565b61073d610f63565b6001600160a01b03811661076457604051639fabe1c160e01b815260040160405180910390fd5b609d80546001600160a01b0319166001600160a01b0392909216919091179055565b609a546040517f35ea6a750000000000000000000000000000000000000000000000000000000081526001600160a01b03838116600483015260009283929116906335ea6a759060240161018060405180830381865afa1580156107ee573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081291906127b3565b61012001519392505050565b610826610f63565b6001600160a01b03811661084d57604051639fabe1c160e01b815260040160405180910390fd5b609980546001600160a01b0319166001600160a01b0383169081179091556040517fdee3317c3fa3792a879d5a8f63b6fcfa425fae71a9cccaba4ebaa7d279c99ce690600090a250565b61089f610f63565b61071d60006110bb565b60006108b361110d565b6108c487878787333389338a611160565b979650505050505050565b6108d7610f63565b61071d61195a565b60006108e961110d565b6099546040517f2e88caa10000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301526000921690632e88caa190602401602060405180830381865afa15801561094d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097191906128a0565b9050610984888888883389878b8b611160565b98975050505050505050565b600061099a61110d565b826109d1576040517f1d18e2c100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6099546040517f2843b0190000000000000000000000000000000000000000000000000000000081523360048201526000916001600160a01b031690632843b019906024016020604051808303816000875af1158015610a35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5991906128a0565b90506108c48787878430338a338b611160565b6097546000906001600160a01b039081169084168114610b1857609b54604051637eb8303160e11b8152600481018590526000916001600160a01b03169063fd70606290602401602060405180830381865afa158015610ad0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af491906128a0565b609f54909150610b0f906001600160a01b0316838784611997565b92505050610b89565b609b54604051637eb8303160e11b8152600481018590526001600160a01b039091169063fd70606290602401602060405180830381865afa158015610b61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8591906128a0565b9150505b92915050565b600054610100900460ff1615808015610baf5750600054600160ff909116105b80610bc95750303b158015610bc9575060005460ff166001145b610c405760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b6000805460ff191660011790558015610c63576000805461ff0019166101001790555b6001600160a01b038816610c8a57604051639fabe1c160e01b815260040160405180910390fd5b6001600160a01b038716610cb157604051639fabe1c160e01b815260040160405180910390fd5b6001600160a01b038616610cd857604051639fabe1c160e01b815260040160405180910390fd5b6001600160a01b038516610cff57604051639fabe1c160e01b815260040160405180910390fd5b6001600160a01b038416610d2657604051639fabe1c160e01b815260040160405180910390fd5b821580610d3557506127108310155b15610d6c576040517f648564d300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038216610d9357604051639fabe1c160e01b815260040160405180910390fd5b610d9b611ac5565b610da3611b38565b609a80546001600160a01b03199081166001600160a01b0389811691909117909255609b805482168b8416179055609f805482168a8416179055609780548216888416179055609880548216878416179055609e859055609d80549091169184169190911790558015610e50576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b610e62610f63565b6001600160a01b038116610e8957604051639fabe1c160e01b815260040160405180910390fd5b609f80546001600160a01b0319166001600160a01b0383169081179091556040517f7189a0ba279a96a44871ae8306133ff5ccdb353b75897c09c47e34610cac5fc290600090a250565b610edb610f63565b6001600160a01b038116610f575760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610c37565b610f60816110bb565b50565b6033546001600160a01b0316331461071d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610c37565b610fc5611bab565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b604080516000808252602082019092526001600160a01b03841690839060405161103991906128e5565b60006040518083038185875af1925050503d8060008114611076576040519150601f19603f3d011682016040523d82523d6000602084013e61107b565b606091505b50509050806110b6576040517fb12d13eb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60655460ff161561071d5760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610c37565b6097546000906001600160a01b03908116908a1661117c578099505b8261118b5761213492506111d3565b82612134118061119c575061271083115b156111d3576040517fc82bafc900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038a81169082161434156112af578061121f576040517f7fef56e900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8b15611257576040517fd3555def00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b349950816001600160a01b031663d0e30db08b6040518263ffffffff1660e01b81526004016000604051808303818588803b15801561129557600080fd5b505af11580156112a9573d6000803e3d6000fd5b50505050505b896112e6576040517fcbca5aa200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008b6001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611326573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134a9190612901565b61135590600a612a16565b609d546040517fb3596f070000000000000000000000000000000000000000000000000000000081526001600160a01b038f811660048301529091169063b3596f0790602401602060405180830381865afa1580156113b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113dc91906128a0565b6113e6908d612a25565b6113f09190612a44565b90508c156114b057609a546040517fa415bcad0000000000000000000000000000000000000000000000000000000081526001600160a01b038e81166004830152602482018e905260026044830152600060648301523360848301529091169063a415bcad9060a401600060405180830381600087803b15801561147357600080fd5b505af1158015611487573d6000803e3d6000fd5b50505050816114ab57609f546114a8906001600160a01b03168d858e611bfd565b9a505b61154d565b3461154d576040516323b872dd60e01b8152336004820152306024820152604481018c90526001600160a01b038d16906323b872dd906064016020604051808303816000875af1158015611508573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061152c9190612a66565b508161154d57609f5461154a906001600160a01b03168d858e611bfd565b9a505b609b5460405163095ea7b360e01b81526001600160a01b039182166004820152602481018d90529084169063095ea7b3906044016020604051808303816000875af11580156115a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c49190612a66565b5089156116c2576001600160a01b03891630146115f3576098546115f3906001600160a01b031633308d611cfa565b609b54609854611610916001600160a01b0391821691168c611d98565b609b546040517f753983d6000000000000000000000000000000000000000000000000000000008152600481018d9052602481018c90526001600160a01b039091169063753983d6906044016020604051808303816000875af115801561167b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061169f91906128a0565b609e549094506116b161271083612a25565b6116bb9190612a44565b905061174d565b609b546040517fc829bfda000000000000000000000000000000000000000000000000000000008152600481018d90526001600160a01b039091169063c829bfda906024016020604051808303816000875af1158015611726573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061174a91906128a0565b93505b609c546001600160a01b0316156117a157846117698286611e3c565b10156117a1576040517f850c6f7600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b609954609b54604080517f439e50160000000000000000000000000000000000000000000000000000000081529051611844936001600160a01b0390811693899391169163439e5016916004808201926020929091908290030181865afa158015611810573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118349190612a83565b6001600160a01b03169190611d98565b6099546040517f6e9c931c000000000000000000000000000000000000000000000000000000008152600481018690526001600160a01b038a81166024830152604482018a905290911690636e9c931c90606401600060405180830381600087803b1580156118b257600080fd5b505af11580156118c6573d6000803e3d6000fd5b50505050876001600160a01b0316896001600160a01b03167f185f471aee8e22c0f6772d9076b984cb8394859d474a9799c1421f440262d5818f8e8e8c60405161192b9493929190931515845260208401929092526040830152606082015260800190565b60405180910390a360985461194a906001600160a01b03168d88611f61565b5050509998505050505050505050565b61196261110d565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610ff23390565b6040805160028082526060820183526000928392919060208301908036833701905050905084816000815181106119d0576119d0612aa0565b60200260200101906001600160a01b031690816001600160a01b0316815250508381600181518110611a0457611a04612aa0565b6001600160a01b0392831660209182029290920101526040517fd06ca61f0000000000000000000000000000000000000000000000000000000081529087169063d06ca61f90611a5a9086908590600401612afa565b600060405180830381865afa158015611a77573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611a9f9190810190612b13565b600181518110611ab157611ab1612aa0565b60200260200101519150505b949350505050565b600054610100900460ff16611b305760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610c37565b61071d6120df565b600054610100900460ff16611ba35760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610c37565b61071d612153565b60655460ff1661071d5760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610c37565b604080516002808252606082018352600092839291906020830190803683370190505090508481600081518110611c3657611c36612aa0565b60200260200101906001600160a01b031690816001600160a01b0316815250508381600181518110611c6a57611c6a612aa0565b6001600160a01b039283166020918202929092010152611c8d9086168785611d98565b6040517f38ed17390000000000000000000000000000000000000000000000000000000081526001600160a01b038716906338ed173990611cdb908690600090869030904290600401612bad565b6000604051808303816000875af1158015611a77573d6000803e3d6000fd5b6040516001600160a01b0380851660248301528316604482015260648101829052611d929085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526121ca565b50505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663095ea7b360e01b179052611dfe84826122b2565b611d92576040516001600160a01b038416602482015260006044820152611e3290859063095ea7b360e01b90606401611d2e565b611d9284826121ca565b609c54604080517fa2e6204500000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163a2e62045916004808301928692919082900301818387803b158015611e9a57600080fd5b505af1158015611eae573d6000803e3d6000fd5b505050506000670de0b6b3a7640000609c60009054906101000a90046001600160a01b03166001600160a01b0316636e9a05c56040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f3491906128a0565b611f3e9085612a25565b611f489190612a44565b905083611f5761271083612a25565b610b859190612a44565b6040516370a0823160e01b8152306004820152839083906000906001600160a01b038316906370a08231906024016020604051808303816000875af1158015611fae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fd291906128a0565b9050801561204f5760405163a9059cbb60e01b81526001600160a01b0385811660048301526024820183905283169063a9059cbb906044016020604051808303816000875af1158015612029573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061204d9190612a66565b505b6040516370a0823160e01b81523060048201526000906001600160a01b038516906370a0823190602401602060405180830381865afa158015612096573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120ba91906128a0565b905080156120d6576120d66001600160a01b0385168683612359565b50505050505050565b600054610100900460ff1661214a5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610c37565b61071d336110bb565b600054610100900460ff166121be5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610c37565b6065805460ff19169055565b600061221f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166123899092919063ffffffff16565b90508051600014806122405750808060200190518101906122409190612a66565b6110b65760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610c37565b6000806000846001600160a01b0316846040516122cf91906128e5565b6000604051808303816000865af19150503d806000811461230c576040519150601f19603f3d011682016040523d82523d6000602084013e612311565b606091505b509150915081801561233b57508051158061233b57508080602001905181019061233b9190612a66565b801561235057506001600160a01b0385163b15155b95945050505050565b6040516001600160a01b0383166024820152604481018290526110b690849063a9059cbb60e01b90606401611d2e565b6060611abd848460008585600080866001600160a01b031685876040516123b091906128e5565b60006040518083038185875af1925050503d80600081146123ed576040519150601f19603f3d011682016040523d82523d6000602084013e6123f2565b606091505b50915091506108c4878383876060831561246a578251612463576001600160a01b0385163b6124635760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610c37565b5081611abd565b611abd838381511561247f5781518083602001fd5b8060405162461bcd60e51b8152600401610c379190612be9565b6001600160a01b0381168114610f6057600080fd5b6000602082840312156124c057600080fd5b81356124cb81612499565b9392505050565b600080604083850312156124e557600080fd5b82356124f081612499565b946020939093013593505050565b8015158114610f6057600080fd5b60008060008060008060c0878903121561252557600080fd5b8635612530816124fe565b9550602087013561254081612499565b95989597505050506040840135936060810135936080820135935060a0909101359150565b60008060008060008060c0878903121561257e57600080fd5b8635612589816124fe565b9550602087013561259981612499565b9450604087013593506060870135925060808701356125b781612499565b8092505060a087013590509295509295509295565b600080600080600060a086880312156125e457600080fd5b85356125ef816124fe565b945060208601356125ff81612499565b94979496505050506040830135926060810135926080909101359150565b600080600080600080600060e0888a03121561263857600080fd5b873561264381612499565b9650602088013561265381612499565b9550604088013561266381612499565b9450606088013561267381612499565b9350608088013561268381612499565b925060a0880135915060c088013561269a81612499565b8091505092959891949750929550565b634e487b7160e01b600052604160045260246000fd5b604051610180810167ffffffffffffffff811182821017156126e4576126e46126aa565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715612713576127136126aa565b604052919050565b60006020828403121561272d57600080fd5b6040516020810181811067ffffffffffffffff82111715612750576127506126aa565b6040529151825250919050565b80516fffffffffffffffffffffffffffffffff8116811461277d57600080fd5b919050565b805164ffffffffff8116811461277d57600080fd5b805161277d81612499565b805160ff8116811461277d57600080fd5b600061018082840312156127c657600080fd5b6127ce6126c0565b6127d8848461271b565b81526127e66020840161275d565b60208201526127f76040840161275d565b60408201526128086060840161275d565b60608201526128196080840161275d565b608082015261282a60a0840161275d565b60a082015261283b60c08401612782565b60c082015261284c60e08401612797565b60e082015261010061285f818501612797565b90820152610120612871848201612797565b90820152610140612883848201612797565b908201526101606128958482016127a2565b908201529392505050565b6000602082840312156128b257600080fd5b5051919050565b60005b838110156128d45781810151838201526020016128bc565b83811115611d925750506000910152565b600082516128f78184602087016128b9565b9190910192915050565b60006020828403121561291357600080fd5b6124cb826127a2565b634e487b7160e01b600052601160045260246000fd5b600181815b8085111561296d5781600019048211156129535761295361291c565b8085161561296057918102915b93841c9390800290612937565b509250929050565b60008261298457506001610b89565b8161299157506000610b89565b81600181146129a757600281146129b1576129cd565b6001915050610b89565b60ff8411156129c2576129c261291c565b50506001821b610b89565b5060208310610133831016604e8410600b84101617156129f0575081810a610b89565b6129fa8383612932565b8060001904821115612a0e57612a0e61291c565b029392505050565b60006124cb60ff841683612975565b6000816000190483118215151615612a3f57612a3f61291c565b500290565b600082612a6157634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215612a7857600080fd5b81516124cb816124fe565b600060208284031215612a9557600080fd5b81516124cb81612499565b634e487b7160e01b600052603260045260246000fd5b600081518084526020808501945080840160005b83811015612aef5781516001600160a01b031687529582019590820190600101612aca565b509495945050505050565b828152604060208201526000611abd6040830184612ab6565b60006020808385031215612b2657600080fd5b825167ffffffffffffffff80821115612b3e57600080fd5b818501915085601f830112612b5257600080fd5b815181811115612b6457612b646126aa565b8060051b9150612b758483016126ea565b8181529183018401918481019088841115612b8f57600080fd5b938501935b8385101561098457845182529385019390850190612b94565b85815284602082015260a060408201526000612bcc60a0830186612ab6565b6001600160a01b0394909416606083015250608001529392505050565b6020815260008251806020840152612c088160408501602087016128b9565b601f01601f1916919091016040019291505056fea26469706673582212203ec373d799857fa45fad4374a42af2728af28662ec1d4357579c4544299cbfe564736f6c634300080c0033",
  "devdoc": {
    "author": "Prime",
    "kind": "dev",
    "methods": {
      "getVDebtToken(address)": {
        "params": {
          "_asset": "underlying."
        }
      },
      "initialize(address,address,address,address,address,uint256,address)": {
        "params": {
          "_aaveOracle": "Aave oracle address",
          "_ethLPRatio": "ratio of ETH in the LP token, can be 2000 for an 80/20 bal lp",
          "_lendingPool": "Lending pool",
          "_prntAddr": "PRNT token address",
          "_rndtPoolHelper": "Pool helper address used for PRNT-WETH swaps",
          "_uniRouter": "UniV2 router address used for all non PRNT-WETH swaps",
          "_weth": "weth address"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "quoteFromToken(address,uint256)": {
        "details": "this function is mainly used to calculate how much of the specified token is needed to match the provided PRNT amount when providing liquidity to an AMM",
        "params": {
          "_amount": "of PRNT to be sold",
          "_token": "address of the token that would be received"
        },
        "returns": {
          "_0": "amount of _token received"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setAaveOracle(address)": {
        "params": {
          "_aaveOracle": "oracle contract address."
        }
      },
      "setMfd(address)": {
        "params": {
          "_mfdAddr": "New contract address."
        }
      },
      "setPoolHelper(address)": {
        "params": {
          "_poolHelper": "New PoolHelper contract address."
        }
      },
      "setPriceProvider(address)": {
        "params": {
          "_provider": "Price provider contract address."
        }
      },
      "setUniRouter(address)": {
        "params": {
          "_uniRouter": "New PoolHelper contract address."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawLockedETH(address,uint256)": {
        "params": {
          "to": "ETH receiver",
          "value": "ETH amount"
        }
      },
      "zap(bool,address,uint256,uint256,uint256,uint256)": {
        "params": {
          "_asset": "to be used for zapping",
          "_assetAmt": "amount of weth.",
          "_borrow": "option to borrow ETH",
          "_lockTypeIndex": "lock length index.",
          "_prntAmt": "amount of PRNT.",
          "_slippage": "maximum amount of slippage allowed for any occurring trades"
        },
        "returns": {
          "_0": "LP amount"
        }
      },
      "zapFromVesting(bool,address,uint256,uint256,uint256)": {
        "params": {
          "_asset": "to be used for zapping",
          "_assetAmt": "amount of _asset tokens used to create dLP position",
          "_borrow": "option to borrow ETH",
          "_lockTypeIndex": "lock length index. cannot be shortest option (index 0)",
          "_slippage": "maximum amount of slippage allowed for any occurring trades"
        },
        "returns": {
          "_0": "LP amount"
        }
      },
      "zapOnBehalf(bool,address,uint256,uint256,address,uint256)": {
        "details": "It will use default lock index",
        "params": {
          "_asset": "to be used for zapping",
          "_assetAmt": "amount of weth.",
          "_borrow": "option to borrow ETH",
          "_onBehalf": "user address to be zapped.",
          "_prntAmt": "amount of PRNT.",
          "_slippage": "maximum amount of slippage allowed for any occurring trades"
        },
        "returns": {
          "_0": "LP amount"
        }
      }
    },
    "stateVariables": {
      "MAX_SLIPPAGE": {
        "details": "If the slippage limit of the LockZap contract is lower then that of the Compounder, transactions might fail unexpectedly.      Therefore ensure that this slippage limit is equal to that of the Compounder contract."
      }
    },
    "title": "LockZap contract",
    "version": 1
  },
  "userdoc": {
    "events": {
      "Zapped(bool,uint256,uint256,address,address,uint256)": {
        "notice": "Emitted when zap is done"
      }
    },
    "kind": "user",
    "methods": {
      "BASE_PERCENT()": {
        "notice": "Base Percent"
      },
      "MAX_SLIPPAGE()": {
        "notice": "The maximum amount of slippage that a user can set for the execution of Zaps"
      },
      "RATIO_DIVISOR()": {
        "notice": "RATIO Divisor"
      },
      "REFERRAL_CODE()": {
        "notice": "We don't utilize any specific referral code for borrows perfomed via zaps"
      },
      "VARIABLE_INTEREST_RATE_MODE()": {
        "notice": "Borrow rate mode"
      },
      "aaveOracle()": {
        "notice": "aave oracle contract"
      },
      "ethLPRatio()": {
        "notice": "parameter to set the ratio of ETH in the LP token, can be 2000 for an 80/20 bal lp"
      },
      "getPoolHelper()": {
        "notice": "Returns pool helper address used for PRNT-WETH swaps"
      },
      "getUniRouter()": {
        "notice": "Returns uni router address used for all non PRNT-WETH swaps"
      },
      "getVDebtToken(address)": {
        "notice": "Get Variable debt token address"
      },
      "initialize(address,address,address,address,address,uint256,address)": {
        "notice": "Initializer"
      },
      "lendingPool()": {
        "notice": "Lending Pool contract"
      },
      "mfd()": {
        "notice": "Multi Fee distribution contract"
      },
      "pause()": {
        "notice": "Pause zapping operation."
      },
      "poolHelper()": {
        "notice": "Pool helper contract used for PRNT-WETH swaps"
      },
      "priceProvider()": {
        "notice": "Price provider contract"
      },
      "prntAddr()": {
        "notice": "PRNT token address"
      },
      "quoteFromToken(address,uint256)": {
        "notice": "Calculate amount of specified tokens received for selling PRNT"
      },
      "setAaveOracle(address)": {
        "notice": "Set AAVE Oracle used to fetch asset prices in USD."
      },
      "setMfd(address)": {
        "notice": "Set Multi fee distribution contract."
      },
      "setPoolHelper(address)": {
        "notice": "Set Pool Helper contract used fror WETH-PRNT swaps"
      },
      "setPriceProvider(address)": {
        "notice": "Set Price Provider."
      },
      "setUniRouter(address)": {
        "notice": "Set Univ2 style router contract address used for all non PRNT<>WETH swaps"
      },
      "uniRouter()": {
        "notice": "AMM router used for all non PRNT-WETH swaps on Arbitrum"
      },
      "unpause()": {
        "notice": "Unpause zapping operation."
      },
      "weth()": {
        "notice": "Wrapped ETH"
      },
      "withdrawLockedETH(address,uint256)": {
        "notice": "Allows owner to recover ETH locked in this contract."
      },
      "zap(bool,address,uint256,uint256,uint256,uint256)": {
        "notice": "Zap tokens to stake LP"
      },
      "zapFromVesting(bool,address,uint256,uint256,uint256)": {
        "notice": "Zap tokens from vesting"
      },
      "zapOnBehalf(bool,address,uint256,uint256,address,uint256)": {
        "notice": "Zap tokens to stake LP"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 139,
        "contract": "contracts/prime/zap/LockZap.sol:LockZap",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 142,
        "contract": "contracts/prime/zap/LockZap.sol:LockZap",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 809,
        "contract": "contracts/prime/zap/LockZap.sol:LockZap",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 11,
        "contract": "contracts/prime/zap/LockZap.sol:LockZap",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 131,
        "contract": "contracts/prime/zap/LockZap.sol:LockZap",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 323,
        "contract": "contracts/prime/zap/LockZap.sol:LockZap",
        "label": "_paused",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 428,
        "contract": "contracts/prime/zap/LockZap.sol:LockZap",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 9029,
        "contract": "contracts/prime/zap/LockZap.sol:LockZap",
        "label": "weth",
        "offset": 0,
        "slot": "151",
        "type": "t_contract(IWETH)5412"
      },
      {
        "astId": 9032,
        "contract": "contracts/prime/zap/LockZap.sol:LockZap",
        "label": "prntAddr",
        "offset": 0,
        "slot": "152",
        "type": "t_address"
      },
      {
        "astId": 9036,
        "contract": "contracts/prime/zap/LockZap.sol:LockZap",
        "label": "mfd",
        "offset": 0,
        "slot": "153",
        "type": "t_contract(IMultiFeeDistribution)5130"
      },
      {
        "astId": 9040,
        "contract": "contracts/prime/zap/LockZap.sol:LockZap",
        "label": "lendingPool",
        "offset": 0,
        "slot": "154",
        "type": "t_contract(ILendingPool)4536"
      },
      {
        "astId": 9044,
        "contract": "contracts/prime/zap/LockZap.sol:LockZap",
        "label": "poolHelper",
        "offset": 0,
        "slot": "155",
        "type": "t_contract(IPoolHelper)5250"
      },
      {
        "astId": 9048,
        "contract": "contracts/prime/zap/LockZap.sol:LockZap",
        "label": "priceProvider",
        "offset": 0,
        "slot": "156",
        "type": "t_contract(IPriceProvider)5329"
      },
      {
        "astId": 9052,
        "contract": "contracts/prime/zap/LockZap.sol:LockZap",
        "label": "aaveOracle",
        "offset": 0,
        "slot": "157",
        "type": "t_contract(IAaveOracle)3808"
      },
      {
        "astId": 9055,
        "contract": "contracts/prime/zap/LockZap.sol:LockZap",
        "label": "ethLPRatio",
        "offset": 0,
        "slot": "158",
        "type": "t_uint256"
      },
      {
        "astId": 9058,
        "contract": "contracts/prime/zap/LockZap.sol:LockZap",
        "label": "uniRouter",
        "offset": 0,
        "slot": "159",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAaveOracle)3808": {
        "encoding": "inplace",
        "label": "contract IAaveOracle",
        "numberOfBytes": "20"
      },
      "t_contract(ILendingPool)4536": {
        "encoding": "inplace",
        "label": "contract ILendingPool",
        "numberOfBytes": "20"
      },
      "t_contract(IMultiFeeDistribution)5130": {
        "encoding": "inplace",
        "label": "contract IMultiFeeDistribution",
        "numberOfBytes": "20"
      },
      "t_contract(IPoolHelper)5250": {
        "encoding": "inplace",
        "label": "contract IPoolHelper",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceProvider)5329": {
        "encoding": "inplace",
        "label": "contract IPriceProvider",
        "numberOfBytes": "20"
      },
      "t_contract(IWETH)5412": {
        "encoding": "inplace",
        "label": "contract IWETH",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}