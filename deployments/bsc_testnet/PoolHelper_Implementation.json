{
  "address": "0xAF0528A1aA2e4F2880793e552b0e3b9aFbCa42c4",
  "abi": [
    {
      "inputs": [],
      "name": "AddressZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientPermission",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_liquidityZap",
          "type": "address"
        }
      ],
      "name": "LiquidityZapUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_lockZap",
          "type": "address"
        }
      ],
      "name": "LockZapUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "getLiquidityZap",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prntPriceInEth",
          "type": "uint256"
        }
      ],
      "name": "getLpPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "priceInEth",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "priceInEth",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "prnt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "weth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lpTokenSupply",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_prntAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wethAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_routerAddr",
          "type": "address"
        },
        {
          "internalType": "contract ILiquidityZap",
          "name": "_liquidityZap",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initializePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidityZap",
      "outputs": [
        {
          "internalType": "contract ILiquidityZap",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockZap",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpTokenAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "prntAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "quoteFromToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "optimalWETHAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_inToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_wethAmount",
          "type": "uint256"
        }
      ],
      "name": "quoteSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lpAmount",
          "type": "uint256"
        }
      ],
      "name": "quoteWETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "wethAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router02",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "sell",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_liquidityZap",
          "type": "address"
        }
      ],
      "name": "setLiquidityZap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lockZap",
          "type": "address"
        }
      ],
      "name": "setLockZap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_inToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minAmountOut",
          "type": "uint256"
        }
      ],
      "name": "swapToWeth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wethAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_wethAmt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_prntAmt",
          "type": "uint256"
        }
      ],
      "name": "zapTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "zapWETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdac7c0d4dd8b3f7c43fe5fa1b81d247bb80cd4a8a0ec79219d70126ec19ac983",
  "receipt": {
    "to": null,
    "from": "0xdE8023f05d831Fb7381486D041237ddEB06c1BA2",
    "contractAddress": "0xAF0528A1aA2e4F2880793e552b0e3b9aFbCa42c4",
    "transactionIndex": 1,
    "gasUsed": "2525530",
    "logsBloom": "0x
    "blockHash": "0xfa298cf5654ffc9a4ff3c442d6c27d3e17f51c342d2cf2cf2b8f020891807855",
    "transactionHash": "0xdac7c0d4dd8b3f7c43fe5fa1b81d247bb80cd4a8a0ec79219d70126ec19ac983",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 43439903,
        "transactionHash": "0xdac7c0d4dd8b3f7c43fe5fa1b81d247bb80cd4a8a0ec79219d70126ec19ac983",
        "address": "0xAF0528A1aA2e4F2880793e552b0e3b9aFbCa42c4",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 1,
        "blockHash": "0xfa298cf5654ffc9a4ff3c442d6c27d3e17f51c342d2cf2cf2b8f020891807855"
      }
    ],
    "blockNumber": 43439903,
    "cumulativeGasUsed": "2607490",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "020d9b74d42e6778f21da7cf9b78ad0f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientPermission\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_liquidityZap\",\"type\":\"address\"}],\"name\":\"LiquidityZapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_lockZap\",\"type\":\"address\"}],\"name\":\"LockZapUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getLiquidityZap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prntPriceInEth\",\"type\":\"uint256\"}],\"name\":\"getLpPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"priceInEth\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"priceInEth\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"prnt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpTokenSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_prntAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wethAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_routerAddr\",\"type\":\"address\"},{\"internalType\":\"contract ILiquidityZap\",\"name\":\"_liquidityZap\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityZap\",\"outputs\":[{\"internalType\":\"contract ILiquidityZap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockZap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpTokenAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prntAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"quoteFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"optimalWETHAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_wethAmount\",\"type\":\"uint256\"}],\"name\":\"quoteSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpAmount\",\"type\":\"uint256\"}],\"name\":\"quoteWETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"wethAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidityZap\",\"type\":\"address\"}],\"name\":\"setLiquidityZap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockZap\",\"type\":\"address\"}],\"name\":\"setLockZap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmountOut\",\"type\":\"uint256\"}],\"name\":\"swapToWeth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wethAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_prntAmt\",\"type\":\"uint256\"}],\"name\":\"zapTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"zapWETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getLpPrice(uint256)\":{\"params\":{\"prntPriceInEth\":\"price of PRNT in ETH\"},\"returns\":{\"priceInEth\":\"LP price in ETH\"}},\"getPrice()\":{\"returns\":{\"priceInEth\":\"price of PRNT\"}},\"getReserves()\":{\"returns\":{\"lpTokenSupply\":\"LP token supply\",\"prnt\":\"PRNT amount\",\"weth\":\"WETH amount\"}},\"initialize(address,address,address,address)\":{\"params\":{\"_liquidityZap\":\"LiquidityZap addrress\",\"_prntAddr\":\"PRNT address\",\"_routerAddr\":\"Uniswap router address\",\"_wethAddr\":\"WETH address\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"quoteFromToken(uint256)\":{\"params\":{\"tokenAmount\":\"amount of PRNT\"},\"returns\":{\"optimalWETHAmount\":\"WETH amount\"}},\"quoteSwap(address,uint256)\":{\"params\":{\"_inToken\":\"input token\",\"_wethAmount\":\"WETH amount\"},\"returns\":{\"tokenAmount\":\"token amount\"}},\"quoteWETH(uint256)\":{\"params\":{\"lpAmount\":\"LP amount\"},\"returns\":{\"wethAmount\":\"WETH amount\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setLiquidityZap(address)\":{\"params\":{\"_liquidityZap\":\"LiquidityZap address\"}},\"setLockZap(address)\":{\"params\":{\"_lockZap\":\"LockZap address\"}},\"swapToWeth(address,uint256,uint256)\":{\"details\":\"Helper function to swap a token to weth given an {_inToken} and swap {_amount}. Will revert if the output is under the {_minAmountOut}\",\"params\":{\"_amount\":\"Amount of input tokens\",\"_inToken\":\"Input token for swap\",\"_minAmountOut\":\"Minimum output amount\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"zapTokens(uint256,uint256)\":{\"params\":{\"_prntAmt\":\"amount of PRNT\",\"_wethAmt\":\"amount of WETH\"},\"returns\":{\"liquidity\":\"LP token amount\"}},\"zapWETH(uint256)\":{\"params\":{\"amount\":\"of WETH\"},\"returns\":{\"liquidity\":\"LP token amount\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getLiquidityZap()\":{\"notice\":\"Returns LiquidityZap address\"},\"getLpPrice(uint256)\":{\"notice\":\"Returns LP price\"},\"getPrice()\":{\"notice\":\"Returns PRNT price in ETH\"},\"getReserves()\":{\"notice\":\"Returns reserve information.\"},\"initialize(address,address,address,address)\":{\"notice\":\"Initializer\"},\"initializePool()\":{\"notice\":\"Initialize PRNT/WETH pool and liquidity zap\"},\"quoteFromToken(uint256)\":{\"notice\":\"Returns `quote` of PRNT in WETH\"},\"quoteSwap(address,uint256)\":{\"notice\":\"Calculate quote in WETH from token\"},\"quoteWETH(uint256)\":{\"notice\":\"Gets needed WETH for adding LP\"},\"setLiquidityZap(address)\":{\"notice\":\"Sets new LiquidityZap address\"},\"setLockZap(address)\":{\"notice\":\"Sets new LockZap address\"},\"zapTokens(uint256,uint256)\":{\"notice\":\"Zap WETH and PRNT into LP\"},\"zapWETH(uint256)\":{\"notice\":\"Zap WETH into LP\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test/TestUniswapPoolHelper.sol\":\"TestUniswapPoolHelper\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x359a1ab89b46b9aba7bcad3fb651924baf4893d15153049b9976b0fc9be1358e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0xe5905c0989cf5a865ed9bb7b9252536ca011c5b744017a82a7d4443b9c00a891\"},\"contracts/dependencies/math/HomoraMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nlibrary HomoraMath {\\n\\tusing SafeMath for uint;\\n\\n\\tfunction divCeil(uint lhs, uint rhs) internal pure returns (uint) {\\n\\t\\treturn lhs.add(rhs).sub(1) / rhs;\\n\\t}\\n\\n\\tfunction fmul(uint lhs, uint rhs) internal pure returns (uint) {\\n\\t\\treturn lhs.mul(rhs) / (2 ** 112);\\n\\t}\\n\\n\\tfunction fdiv(uint lhs, uint rhs) internal pure returns (uint) {\\n\\t\\treturn lhs.mul(2 ** 112) / rhs;\\n\\t}\\n\\n\\t// implementation from https://github.com/Uniswap/uniswap-lib/commit/99f3f28770640ba1bb1ff460ac7c5292fb8291a0\\n\\t// original implementation: https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMath64x64.sol#L687\\n\\tfunction sqrt(uint x) internal pure returns (uint) {\\n\\t\\tif (x == 0) return 0;\\n\\t\\tuint xx = x;\\n\\t\\tuint r = 1;\\n\\n\\t\\tif (xx >= 0x100000000000000000000000000000000) {\\n\\t\\t\\txx >>= 128;\\n\\t\\t\\tr <<= 64;\\n\\t\\t}\\n\\n\\t\\tif (xx >= 0x10000000000000000) {\\n\\t\\t\\txx >>= 64;\\n\\t\\t\\tr <<= 32;\\n\\t\\t}\\n\\t\\tif (xx >= 0x100000000) {\\n\\t\\t\\txx >>= 32;\\n\\t\\t\\tr <<= 16;\\n\\t\\t}\\n\\t\\tif (xx >= 0x10000) {\\n\\t\\t\\txx >>= 16;\\n\\t\\t\\tr <<= 8;\\n\\t\\t}\\n\\t\\tif (xx >= 0x100) {\\n\\t\\t\\txx >>= 8;\\n\\t\\t\\tr <<= 4;\\n\\t\\t}\\n\\t\\tif (xx >= 0x10) {\\n\\t\\t\\txx >>= 4;\\n\\t\\t\\tr <<= 2;\\n\\t\\t}\\n\\t\\tif (xx >= 0x8) {\\n\\t\\t\\tr <<= 1;\\n\\t\\t}\\n\\n\\t\\tr = (r + x / r) >> 1;\\n\\t\\tr = (r + x / r) >> 1;\\n\\t\\tr = (r + x / r) >> 1;\\n\\t\\tr = (r + x / r) >> 1;\\n\\t\\tr = (r + x / r) >> 1;\\n\\t\\tr = (r + x / r) >> 1;\\n\\t\\tr = (r + x / r) >> 1; // Seven iterations should be enough\\n\\t\\tuint r1 = x / r;\\n\\t\\treturn (r < r1 ? r : r1);\\n\\t}\\n}\\n\",\"keccak256\":\"0x824bca2c644c8cdc5528f95a93285f73fd3aab511a43ecb5b71d2751df1ab7b6\",\"license\":\"MIT\"},\"contracts/interfaces/ILiquidityZap.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\ninterface ILiquidityZap {\\n\\tfunction _WETH() external view returns (address);\\n\\n\\tfunction token() external view returns (address);\\n\\n\\tfunction tokenWETHPair() external view returns (address);\\n\\n\\tfunction addLiquidityETHOnly(address to) external returns (uint256 liquidity);\\n\\n\\tfunction addLiquidityTokensOnly(address from, address to, uint256 amount) external returns (uint256 liquidity);\\n\\n\\tfunction getLPTokenPerEthUnit(uint256 ethAmt) external view returns (uint256 liquidity);\\n\\n\\tfunction initLiquidityZap(address token, address WETH, address tokenWethPair, address helper) external;\\n\\n\\tfunction quote(uint256 wethAmount) external view returns (uint256 optimalTokenAmount);\\n\\n\\tfunction quoteFromToken(uint256 tokenAmount) external view returns (uint256 optimalWETHAmount);\\n\\n\\tfunction removeAllLiquidityETHOnly(address to) external returns (uint256 amount);\\n\\n\\tfunction removeAllLiquidityTokenOnly(address to) external returns (uint256 amount);\\n\\n\\tfunction removeLiquidity(\\n\\t\\taddress tokenA,\\n\\t\\taddress tokenB,\\n\\t\\tuint256 liquidity,\\n\\t\\taddress to\\n\\t) external returns (uint256 amountA, uint256 amountB);\\n\\n\\tfunction removeLiquidityETHOnly(address to, uint256 liquidity) external returns (uint256 amountOut);\\n\\n\\tfunction removeLiquidityTokenOnly(address to, uint256 liquidity) external returns (uint256 amount);\\n\\n\\tfunction standardAdd(\\n\\t\\tuint256 tokenAmount,\\n\\t\\tuint256 _wethAmt,\\n\\t\\taddress to\\n\\t) external payable returns (uint256 liquidity);\\n\\n\\tfunction unzap() external returns (uint256 amountToken, uint256 amountETH);\\n\\n\\tfunction unzapToETH() external returns (uint256 amount);\\n\\n\\tfunction unzapToTokens() external returns (uint256 amount);\\n\\n\\tfunction zapETH(address payable _onBehalf) external payable returns (uint256 liquidity);\\n\\n\\tfunction zapTokens(uint256 amount) external returns (uint256 liquidity);\\n\\n\\tfunction addLiquidityWETHOnly(uint256 _amount, address payable to) external returns (uint256 liquidity);\\n}\\n\",\"keccak256\":\"0xeb54077685d53e2fcedf39484911016862b7c861935d4582c32ebec44e31ba19\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\ninterface IWETH {\\n\\tfunction balanceOf(address) external returns (uint256);\\n\\n\\tfunction deposit() external payable;\\n\\n\\tfunction withdraw(uint256) external;\\n\\n\\tfunction approve(address guy, uint256 wad) external returns (bool);\\n\\n\\tfunction transferFrom(address src, address dst, uint256 wad) external returns (bool);\\n\\n\\tfunction transfer(address to, uint256 value) external returns (bool);\\n\\n\\tfunction allowance(address owner, address spender) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x81802458b401654d7b326cc74c7589fc1ca979ba7f4762684f1c28d775a291f6\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/uniswap/IUniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\ninterface IUniswapV2Router01 {\\n\\tfunction factory() external view returns (address);\\n\\n\\tfunction WETH() external view returns (address);\\n\\n\\tfunction addLiquidity(\\n\\t\\taddress tokenA,\\n\\t\\taddress tokenB,\\n\\t\\tuint256 amountADesired,\\n\\t\\tuint256 amountBDesired,\\n\\t\\tuint256 amountAMin,\\n\\t\\tuint256 amountBMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\\n\\n\\tfunction addLiquidityETH(\\n\\t\\taddress token,\\n\\t\\tuint256 amountTokenDesired,\\n\\t\\tuint256 amountTokenMin,\\n\\t\\tuint256 amountETHMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\\n\\n\\tfunction removeLiquidity(\\n\\t\\taddress tokenA,\\n\\t\\taddress tokenB,\\n\\t\\tuint256 liquidity,\\n\\t\\tuint256 amountAMin,\\n\\t\\tuint256 amountBMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external returns (uint256 amountA, uint256 amountB);\\n\\n\\tfunction removeLiquidityETH(\\n\\t\\taddress token,\\n\\t\\tuint256 liquidity,\\n\\t\\tuint256 amountTokenMin,\\n\\t\\tuint256 amountETHMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external returns (uint256 amountToken, uint256 amountETH);\\n\\n\\tfunction removeLiquidityWithPermit(\\n\\t\\taddress tokenA,\\n\\t\\taddress tokenB,\\n\\t\\tuint256 liquidity,\\n\\t\\tuint256 amountAMin,\\n\\t\\tuint256 amountBMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline,\\n\\t\\tbool approveMax,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) external returns (uint256 amountA, uint256 amountB);\\n\\n\\tfunction removeLiquidityETHWithPermit(\\n\\t\\taddress token,\\n\\t\\tuint256 liquidity,\\n\\t\\tuint256 amountTokenMin,\\n\\t\\tuint256 amountETHMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline,\\n\\t\\tbool approveMax,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) external returns (uint256 amountToken, uint256 amountETH);\\n\\n\\tfunction swapExactTokensForTokens(\\n\\t\\tuint256 amountIn,\\n\\t\\tuint256 amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external returns (uint256[] memory amounts);\\n\\n\\tfunction swapTokensForExactTokens(\\n\\t\\tuint256 amountOut,\\n\\t\\tuint256 amountInMax,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external returns (uint256[] memory amounts);\\n\\n\\tfunction swapExactETHForTokens(\\n\\t\\tuint256 amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external payable returns (uint256[] memory amounts);\\n\\n\\tfunction swapTokensForExactETH(\\n\\t\\tuint256 amountOut,\\n\\t\\tuint256 amountInMax,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external returns (uint256[] memory amounts);\\n\\n\\tfunction swapExactTokensForETH(\\n\\t\\tuint256 amountIn,\\n\\t\\tuint256 amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external returns (uint256[] memory amounts);\\n\\n\\tfunction swapETHForExactTokens(\\n\\t\\tuint256 amountOut,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external payable returns (uint256[] memory amounts);\\n\\n\\tfunction quote(uint256 amountA, uint256 reserveA, uint256 reserveB) external pure returns (uint256 amountB);\\n\\n\\tfunction getAmountOut(\\n\\t\\tuint256 amountIn,\\n\\t\\tuint256 reserveIn,\\n\\t\\tuint256 reserveOut\\n\\t) external pure returns (uint256 amountOut);\\n\\n\\tfunction getAmountIn(\\n\\t\\tuint256 amountOut,\\n\\t\\tuint256 reserveIn,\\n\\t\\tuint256 reserveOut\\n\\t) external pure returns (uint256 amountIn);\\n\\n\\tfunction getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n\\tfunction getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0x12715f66054e7081b901c5e86acfb36112f31f64590b19a1b75ed7f0d20d4e87\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/uniswap/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport \\\"./IUniswapV2Router01.sol\\\";\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n\\tfunction removeLiquidityETHSupportingFeeOnTransferTokens(\\n\\t\\taddress token,\\n\\t\\tuint256 liquidity,\\n\\t\\tuint256 amountTokenMin,\\n\\t\\tuint256 amountETHMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external returns (uint256 amountETH);\\n\\n\\tfunction removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n\\t\\taddress token,\\n\\t\\tuint256 liquidity,\\n\\t\\tuint256 amountTokenMin,\\n\\t\\tuint256 amountETHMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline,\\n\\t\\tbool approveMax,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) external returns (uint256 amountETH);\\n\\n\\tfunction swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n\\t\\tuint256 amountIn,\\n\\t\\tuint256 amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external;\\n\\n\\tfunction swapExactETHForTokensSupportingFeeOnTransferTokens(\\n\\t\\tuint256 amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external payable;\\n\\n\\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\\n\\t\\tuint256 amountIn,\\n\\t\\tuint256 amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external;\\n}\\n\",\"keccak256\":\"0x282f6962e74db85aa52cd5884c274a3b7c2c0aa1373c8f258c4b7534053997ad\",\"license\":\"agpl-3.0\"},\"contracts/prime/zap/helpers/DustRefunder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport {IWETH} from \\\"../../../interfaces/IWETH.sol\\\";\\n\\n/// @title Dust Refunder Contract\\n/// @dev Refunds dust tokens remaining from zapping.\\n/// @author Prime\\ncontract DustRefunder {\\n\\tusing SafeERC20 for IERC20;\\n\\n\\t/**\\n\\t * @notice Refunds PRNT and WETH.\\n\\t * @param _prnt PRNT address\\n\\t * @param _weth WETH address\\n\\t * @param _refundAddress Address for refund\\n\\t */\\n\\tfunction _refundDust(address _prnt, address _weth, address _refundAddress) internal {\\n\\t\\tIERC20 prnt = IERC20(_prnt);\\n\\t\\tIWETH weth = IWETH(_weth);\\n\\n\\t\\tuint256 dustWETH = weth.balanceOf(address(this));\\n\\t\\tif (dustWETH > 0) {\\n\\t\\t\\tweth.transfer(_refundAddress, dustWETH);\\n\\t\\t}\\n\\t\\tuint256 dustPrnt = prnt.balanceOf(address(this));\\n\\t\\tif (dustPrnt > 0) {\\n\\t\\t\\tprnt.safeTransfer(_refundAddress, dustPrnt);\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0xd80f8d69da295a3394dd1206539440c5a9b6f87cc1e2121cfee50f58e1d8f892\",\"license\":\"MIT\"},\"contracts/prime/zap/helpers/UniswapPoolHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\nimport {DustRefunder} from \\\"./DustRefunder.sol\\\";\\nimport {UniswapV2Library} from \\\"../../../uniswap-solc-0.8/libraries/UniswapV2Library.sol\\\";\\nimport {IUniswapV2Pair} from \\\"../../../uniswap-solc-0.8/interfaces/IUniswapV2Pair.sol\\\";\\nimport {IUniswapV2Factory} from \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {HomoraMath} from \\\"../../../dependencies/math/HomoraMath.sol\\\";\\nimport {IUniswapV2Router02} from \\\"../../../interfaces/uniswap/IUniswapV2Router02.sol\\\";\\nimport {ILiquidityZap} from \\\"../../../interfaces/ILiquidityZap.sol\\\";\\nimport {IWETH} from \\\"../../../interfaces/IWETH.sol\\\";\\n\\n/// @title Uniswap Pool Helper Contract\\n/// @author Prime\\ncontract UniswapPoolHelper is Initializable, OwnableUpgradeable, DustRefunder {\\n\\tusing SafeERC20 for IERC20;\\n\\tusing HomoraMath for uint256;\\n\\n\\t/********************** Events ***********************/\\n\\tevent LiquidityZapUpdated(address indexed _liquidityZap);\\n\\n\\tevent LockZapUpdated(address indexed _lockZap);\\n\\n\\t/********************** Errors ***********************/\\n\\terror AddressZero();\\n\\terror InsufficientPermission();\\n\\n\\taddress public lpTokenAddr;\\n\\taddress public prntAddr;\\n\\taddress public wethAddr;\\n\\n\\tIUniswapV2Router02 public router;\\n\\tILiquidityZap public liquidityZap;\\n\\taddress public lockZap;\\n\\n\\tconstructor() {\\n\\t\\t_disableInitializers();\\n\\t}\\n\\n\\t/**\\n\\t * @notice Initializer\\n\\t * @param _prntAddr PRNT address\\n\\t * @param _wethAddr WETH address\\n\\t * @param _routerAddr Uniswap router address\\n\\t * @param _liquidityZap LiquidityZap addrress\\n\\t */\\n\\tfunction initialize(\\n\\t\\taddress _prntAddr,\\n\\t\\taddress _wethAddr,\\n\\t\\taddress _routerAddr,\\n\\t\\tILiquidityZap _liquidityZap\\n\\t) external initializer {\\n\\t\\tif (_prntAddr == address(0)) revert AddressZero();\\n\\t\\tif (_wethAddr == address(0)) revert AddressZero();\\n\\t\\tif (_routerAddr == address(0)) revert AddressZero();\\n\\t\\tif (address(_liquidityZap) == address(0)) revert AddressZero();\\n\\n\\t\\t__Ownable_init();\\n\\n\\t\\tprntAddr = _prntAddr;\\n\\t\\twethAddr = _wethAddr;\\n\\n\\t\\trouter = IUniswapV2Router02(_routerAddr);\\n\\t\\tliquidityZap = _liquidityZap;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Initialize PRNT/WETH pool and liquidity zap\\n\\t */\\n\\tfunction initializePool() public onlyOwner {\\n\\t\\tlpTokenAddr = IUniswapV2Factory(router.factory()).createPair(prntAddr, wethAddr);\\n\\n\\t\\tIERC20 prnt = IERC20(prntAddr);\\n\\t\\tprnt.forceApprove(address(router), type(uint256).max);\\n\\t\\tprnt.forceApprove(address(liquidityZap), type(uint256).max);\\n\\t\\tIERC20(wethAddr).approve(address(liquidityZap), type(uint256).max);\\n\\t\\tIERC20(wethAddr).approve(address(router), type(uint256).max);\\n\\n\\t\\trouter.addLiquidity(\\n\\t\\t\\taddress(prnt),\\n\\t\\t\\twethAddr,\\n\\t\\t\\tprnt.balanceOf(address(this)),\\n\\t\\t\\tIERC20(wethAddr).balanceOf(address(this)),\\n\\t\\t\\t0,\\n\\t\\t\\t0,\\n\\t\\t\\taddress(this),\\n\\t\\t\\tblock.timestamp\\n\\t\\t);\\n\\n\\t\\tIERC20 lp = IERC20(lpTokenAddr);\\n\\t\\tlp.safeTransfer(msg.sender, lp.balanceOf(address(this)));\\n\\t}\\n\\n\\t/**\\n\\t * @notice Gets needed WETH for adding LP\\n\\t * @param lpAmount LP amount\\n\\t * @return wethAmount WETH amount\\n\\t */\\n\\tfunction quoteWETH(uint256 lpAmount) public view returns (uint256 wethAmount) {\\n\\t\\tIUniswapV2Pair lpToken = IUniswapV2Pair(lpTokenAddr);\\n\\n\\t\\t(uint256 reserve0, uint256 reserve1, ) = lpToken.getReserves();\\n\\t\\tuint256 weth = lpToken.token0() != address(prntAddr) ? reserve0 : reserve1;\\n\\t\\tuint256 prnt = lpToken.token0() == address(prntAddr) ? reserve0 : reserve1;\\n\\t\\tuint256 lpTokenSupply = lpToken.totalSupply();\\n\\n\\t\\tuint256 neededPrnt = (prnt * lpAmount) / lpTokenSupply;\\n\\t\\tuint256 neededWeth = (prnt * lpAmount) / lpTokenSupply;\\n\\n\\t\\tuint256 neededPrntInWeth = router.getAmountIn(neededPrnt, weth, prnt);\\n\\t\\treturn neededWeth + neededPrntInWeth;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Zap WETH into LP\\n\\t * @param amount of WETH\\n\\t * @return liquidity LP token amount\\n\\t */\\n\\tfunction zapWETH(uint256 amount) public returns (uint256 liquidity) {\\n\\t\\tif (msg.sender != lockZap) revert InsufficientPermission();\\n\\t\\tIWETH weth = IWETH(wethAddr);\\n\\t\\tweth.transferFrom(msg.sender, address(liquidityZap), amount);\\n\\t\\tliquidityZap.addLiquidityWETHOnly(amount, payable(address(this)));\\n\\t\\tIERC20 lp = IERC20(lpTokenAddr);\\n\\n\\t\\tliquidity = lp.balanceOf(address(this));\\n\\t\\tlp.safeTransfer(msg.sender, liquidity);\\n\\t\\t_refundDust(prntAddr, wethAddr, msg.sender);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns reserve information.\\n\\t * @return prnt PRNT amount\\n\\t * @return weth WETH amount\\n\\t * @return lpTokenSupply LP token supply\\n\\t */\\n\\tfunction getReserves() public view returns (uint256 prnt, uint256 weth, uint256 lpTokenSupply) {\\n\\t\\tIUniswapV2Pair lpToken = IUniswapV2Pair(lpTokenAddr);\\n\\n\\t\\t(uint256 reserve0, uint256 reserve1, ) = lpToken.getReserves();\\n\\t\\tweth = lpToken.token0() != address(prntAddr) ? reserve0 : reserve1;\\n\\t\\tprnt = lpToken.token0() == address(prntAddr) ? reserve0 : reserve1;\\n\\n\\t\\tlpTokenSupply = lpToken.totalSupply();\\n\\t}\\n\\n\\t// UniV2 / SLP LP Token Price\\n\\t// Alpha Homora Fair LP Pricing Method (flash loan resistant)\\n\\t// https://cmichel.io/pricing-lp-tokens/\\n\\t// https://blog.alphafinance.io/fair-lp-token-pricing/\\n\\t// https://github.com/AlphaFinanceLab/alpha-homora-v2-contract/blob/master/contracts/oracle/UniswapV2Oracle.sol\\n\\t/**\\n\\t * @notice Returns LP price\\n\\t * @param prntPriceInEth price of PRNT in ETH\\n\\t * @return priceInEth LP price in ETH\\n\\t */\\n\\tfunction getLpPrice(uint256 prntPriceInEth) public view returns (uint256 priceInEth) {\\n\\t\\t(uint256 prntReserve, uint256 wethReserve, uint256 lpSupply) = getReserves();\\n\\n\\t\\tuint256 sqrtK = HomoraMath.sqrt(prntReserve * wethReserve).fdiv(lpSupply); // in 2**112\\n\\n\\t\\t// prnt in eth, decis 8\\n\\t\\tuint256 px0 = prntPriceInEth * (2 ** 112); // in 2**112\\n\\t\\t// eth in eth, decis 8\\n\\t\\tuint256 px1 = uint256(100_000_000) * (2 ** 112); // in 2**112\\n\\n\\t\\t// fair token0 amt: sqrtK * sqrt(px1/px0)\\n\\t\\t// fair token1 amt: sqrtK * sqrt(px0/px1)\\n\\t\\t// fair lp price = 2 * sqrt(px0 * px1)\\n\\t\\t// split into 2 sqrts multiplication to prevent uint256 overflow (note the 2**112)\\n\\t\\tuint256 result = (((sqrtK * 2 * (HomoraMath.sqrt(px0))) / (2 ** 56)) * (HomoraMath.sqrt(px1))) / (2 ** 56);\\n\\t\\tpriceInEth = result / (2 ** 112);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Zap WETH and PRNT into LP\\n\\t * @param _wethAmt amount of WETH\\n\\t * @param _prntAmt amount of PRNT\\n\\t * @return liquidity LP token amount\\n\\t */\\n\\tfunction zapTokens(uint256 _wethAmt, uint256 _prntAmt) public returns (uint256 liquidity) {\\n\\t\\tif (msg.sender != lockZap) revert InsufficientPermission();\\n\\t\\tIWETH weth = IWETH(wethAddr);\\n\\t\\tweth.transferFrom(msg.sender, address(this), _wethAmt);\\n\\t\\tIERC20(prntAddr).safeTransferFrom(msg.sender, address(this), _prntAmt);\\n\\t\\tliquidityZap.standardAdd(_prntAmt, _wethAmt, address(this));\\n\\t\\tIERC20 lp = IERC20(lpTokenAddr);\\n\\t\\tliquidity = lp.balanceOf(address(this));\\n\\t\\tlp.safeTransfer(msg.sender, liquidity);\\n\\t\\t_refundDust(prntAddr, wethAddr, msg.sender);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns `quote` of PRNT in WETH\\n\\t * @param tokenAmount amount of PRNT\\n\\t * @return optimalWETHAmount WETH amount\\n\\t */\\n\\tfunction quoteFromToken(uint256 tokenAmount) public view returns (uint256 optimalWETHAmount) {\\n\\t\\toptimalWETHAmount = liquidityZap.quoteFromToken(tokenAmount);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns LiquidityZap address\\n\\t */\\n\\tfunction getLiquidityZap() public view returns (address) {\\n\\t\\treturn address(liquidityZap);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Sets new LiquidityZap address\\n\\t * @param _liquidityZap LiquidityZap address\\n\\t */\\n\\tfunction setLiquidityZap(address _liquidityZap) external onlyOwner {\\n\\t\\tif (_liquidityZap == address(0)) revert AddressZero();\\n\\t\\tliquidityZap = ILiquidityZap(_liquidityZap);\\n\\t\\temit LiquidityZapUpdated(_liquidityZap);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Sets new LockZap address\\n\\t * @param _lockZap LockZap address\\n\\t */\\n\\tfunction setLockZap(address _lockZap) external onlyOwner {\\n\\t\\tif (_lockZap == address(0)) revert AddressZero();\\n\\t\\tlockZap = _lockZap;\\n\\t\\temit LockZapUpdated(_lockZap);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns PRNT price in ETH\\n\\t * @return priceInEth price of PRNT\\n\\t */\\n\\tfunction getPrice() public view returns (uint256 priceInEth) {\\n\\t\\t(uint256 prnt, uint256 weth, ) = getReserves();\\n\\t\\tif (prnt > 0) {\\n\\t\\t\\tpriceInEth = (weth * (10 ** 8)) / prnt;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Calculate quote in WETH from token\\n\\t * @param _inToken input token\\n\\t * @param _wethAmount WETH amount\\n\\t * @return tokenAmount token amount\\n\\t */\\n\\tfunction quoteSwap(address _inToken, uint256 _wethAmount) public view returns (uint256 tokenAmount) {\\n\\t\\taddress[] memory path = new address[](2);\\n\\t\\tpath[0] = _inToken;\\n\\t\\tpath[1] = wethAddr;\\n\\t\\tuint256[] memory amountsIn = router.getAmountsIn(_wethAmount, path);\\n\\t\\treturn amountsIn[0];\\n\\t}\\n\\n\\t/**\\n\\t * @dev Helper function to swap a token to weth given an {_inToken} and swap {_amount}.\\n\\t * Will revert if the output is under the {_minAmountOut}\\n\\t * @param _inToken Input token for swap\\n\\t * @param _amount Amount of input tokens\\n\\t * @param _minAmountOut Minimum output amount\\n\\t */\\n\\tfunction swapToWeth(address _inToken, uint256 _amount, uint256 _minAmountOut) external {\\n\\t\\tif (msg.sender != lockZap) revert InsufficientPermission();\\n\\t\\taddress[] memory path = new address[](2);\\n\\t\\tpath[0] = _inToken;\\n\\t\\tpath[1] = wethAddr;\\n\\t\\tIERC20(_inToken).forceApprove(address(router), _amount);\\n\\t\\trouter.swapExactTokensForTokens(_amount, _minAmountOut, path, msg.sender, block.timestamp);\\n\\t}\\n}\\n\",\"keccak256\":\"0xbc349b5305c4c4368fe3eac1e102c40fadb04f5caf89288303e6092f35f791e3\",\"license\":\"MIT\"},\"contracts/test/TestUniswapPoolHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../prime/zap/helpers/UniswapPoolHelper.sol\\\";\\n\\ncontract TestUniswapPoolHelper is UniswapPoolHelper {\\n\\tusing SafeERC20 for IERC20;\\n\\n\\tfunction swap(uint256 _amount, address, address, address) public returns (uint256 amountOut) {\\n\\t\\tIUniswapV2Pair lpToken = IUniswapV2Pair(lpTokenAddr);\\n\\t\\t(uint256 reserve0, uint256 reserve1, ) = lpToken.getReserves();\\n\\n\\t\\t(address token0, address token1) = UniswapV2Library.sortTokens(address(wethAddr), prntAddr);\\n\\n\\t\\tuint256 reserveWeth = token0 == address(wethAddr) ? reserve0 : reserve1;\\n\\t\\tuint256 reserveTokens = token0 == address(wethAddr) ? reserve1 : reserve0;\\n\\n\\t\\tuint256 outETH = UniswapV2Library.getAmountOut(_amount, reserveTokens, reserveWeth);\\n\\n\\t\\tIERC20(prntAddr).safeTransfer(lpTokenAddr, _amount);\\n\\n\\t\\tIUniswapV2Pair(lpTokenAddr).swap(\\n\\t\\t\\taddress(wethAddr) == token0 ? outETH : 0,\\n\\t\\t\\taddress(wethAddr) == token1 ? outETH : 0,\\n\\t\\t\\taddress(this),\\n\\t\\t\\t\\\"\\\"\\n\\t\\t);\\n\\n\\t\\tamountOut = IERC20(address(wethAddr)).balanceOf(address(this));\\n\\t}\\n\\n\\tfunction sell(uint256 _amount) public returns (uint256 amountOut) {\\n\\t\\treturn\\n\\t\\t\\tswap(\\n\\t\\t\\t\\t_amount,\\n\\t\\t\\t\\t0x0000000000000000000000000000000000000000,\\n\\t\\t\\t\\t0x0000000000000000000000000000000000000000,\\n\\t\\t\\t\\t0x0000000000000000000000000000000000000000\\n\\t\\t\\t);\\n\\t}\\n}\\n\",\"keccak256\":\"0x97ab4077e139a447931085a7e9d745098514ff7992443dcf621e5c9e533c653d\",\"license\":\"MIT\"},\"contracts/uniswap-solc-0.8/interfaces/IUniswapV2ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n//solhint-disable-next-line compiler-version\\npragma solidity >=0.5.0;\\n\\n//solhint-disable func-name-mixedcase\\ninterface IUniswapV2ERC20 {\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x334d8f0222053d99b649322eb9e3c4f53968522d982d194013c0d760ac25b195\",\"license\":\"GPL-3.0-or-later\"},\"contracts/uniswap-solc-0.8/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n//solhint-disable-next-line compiler-version\\npragma solidity >=0.5.0;\\n\\n//solhint-disable func-name-mixedcase\\n\\nimport \\\"./IUniswapV2ERC20.sol\\\";\\n\\ninterface IUniswapV2Pair is IUniswapV2ERC20 {\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(\\n        address indexed sender,\\n        uint256 amount0,\\n        uint256 amount1,\\n        address indexed to\\n    );\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(\\n        address to\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x8f463e545529ddac7b9b1e7b9bdb3dba5a6a10a19f1d0a66db8edf7e4119be58\",\"license\":\"GPL-3.0-or-later\"},\"contracts/uniswap-solc-0.8/libraries/UniswapV2Library.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.12;\\n\\n//solhint-disable reason-string\\n\\nimport \\\"../interfaces/IUniswapV2Pair.sol\\\";\\n\\nlibrary UniswapV2Library {\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(\\n        address tokenA,\\n        address tokenB\\n    ) internal pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, \\\"UniswapV2Library: IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = tokenA < tokenB\\n            ? (tokenA, tokenB)\\n            : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"UniswapV2Library: ZERO_ADDRESS\\\");\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal pure returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(\\n            uint160(\\n                uint256(\\n                    keccak256(\\n                        abi.encodePacked(\\n                            bytes1(0xff),\\n                            factory,\\n                            keccak256(abi.encodePacked(token0, token1)),\\n                            hex\\\"443533a897cfad2762695078bf6ee9b78b4edcda64ec31e1c83066cee4c90a7e\\\" // init code hash\\n                        )\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    // fetches and sorts the reserves for a pair\\n    function getReserves(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\\n        (address token0, ) = sortTokens(tokenA, tokenB);\\n        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(\\n            pairFor(factory, tokenA, tokenB)\\n        ).getReserves();\\n        (reserveA, reserveB) = tokenA == token0\\n            ? (reserve0, reserve1)\\n            : (reserve1, reserve0);\\n    }\\n\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) internal pure returns (uint256 amountB) {\\n        require(amountA > 0, \\\"UniswapV2Library: INSUFFICIENT_AMOUNT\\\");\\n        require(\\n            reserveA > 0 && reserveB > 0,\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        amountB = (amountA * reserveB) / reserveA;\\n    }\\n\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountOut) {\\n        require(amountIn > 0, \\\"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        require(\\n            reserveIn > 0 && reserveOut > 0,\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        uint256 amountInWithFee = amountIn * 997;\\n        uint256 numerator = amountInWithFee * reserveOut;\\n        uint256 denominator = reserveIn * 1000 + amountInWithFee;\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountIn) {\\n        require(amountOut > 0, \\\"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        require(\\n            reserveIn > 0 && reserveOut > 0,\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        uint256 numerator = reserveIn * amountOut * 1000;\\n        uint256 denominator = (reserveOut - amountOut) * 997;\\n        amountIn = numerator / denominator + 1;\\n    }\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    function getAmountsOut(\\n        address factory,\\n        uint256 amountIn,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[0] = amountIn;\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(\\n                factory,\\n                path[i],\\n                path[i + 1]\\n            );\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n\\n    // performs chained getAmountIn calculations on any number of pairs\\n    function getAmountsIn(\\n        address factory,\\n        uint256 amountOut,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[amounts.length - 1] = amountOut;\\n        for (uint256 i = path.length - 1; i > 0; i--) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(\\n                factory,\\n                path[i - 1],\\n                path[i]\\n            );\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x97d738418ad985add26cfceb81c014d7fb859f92e9d1d8c1be3f284433dcdb96\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000022565b620000e3565b600054610100900460ff16156200008f5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811614620000e1576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b612c5580620000f36000396000f3fe608060405234801561001057600080fd5b50600436106101a35760003560e01c80637d5aa5f4116100ee578063d6e4845c11610097578063f2fde38b11610071578063f2fde38b1461034f578063f887ea4014610362578063f8c8765e14610375578063fd7060621461038857600080fd5b8063d6e4845c14610316578063e28861fa14610329578063e4849b321461033c57600080fd5b806398d5fdca116100c857806398d5fdca146102ea5780639da2401f146102f2578063c829bfda1461030357600080fd5b80637d5aa5f4146102b357806388156e65146102c65780638da5cb5b146102d957600080fd5b80634053b9ea116101505780636fb2a1bf1161012a5780636fb2a1bf14610285578063715018a614610298578063753983d6146102a057600080fd5b80634053b9ea1461024c578063439e50161461025f5780635321ae321461027257600080fd5b80631e2ebcaa116101815780631e2ebcaa1461021c57806322e2c6461461022f578063250e6de01461024457600080fd5b806306346c30146101a857806307fa901a146101d85780630902f1ac146101f9575b600080fd5b606a546101bb906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6101eb6101e636600461277c565b61039b565b6040519081526020016101cf565b6102016104ce565b604080519384526020840192909252908201526060016101cf565b6069546101bb906001600160a01b031681565b61024261023d3660046127a8565b610715565b005b61024261078e565b6066546101bb906001600160a01b031681565b6065546101bb906001600160a01b031681565b6101eb6102803660046127c5565b610c0d565b6102426102933660046127a8565b610f29565b610242610fa2565b6101eb6102ae3660046127de565b610fb6565b6067546101bb906001600160a01b031681565b6101eb6102d4366004612800565b6111b9565b6033546001600160a01b03166101bb565b6101eb611429565b6069546001600160a01b03166101bb565b6101eb6103113660046127c5565b611463565b610242610324366004612853565b61164a565b6101eb6103373660046127c5565b6117a2565b6101eb61034a3660046127c5565b611875565b61024261035d3660046127a8565b61188b565b6068546101bb906001600160a01b031681565b610242610383366004612888565b611920565b6101eb6103963660046127c5565b611b29565b6040805160028082526060820183526000928392919060208301908036833701905050905083816000815181106103d4576103d46128cf565b6001600160a01b039283166020918202929092010152606754825191169082906001908110610405576104056128cf565b6001600160a01b0392831660209182029290920101526068546040517f1f00ca740000000000000000000000000000000000000000000000000000000081526000929190911690631f00ca74906104629087908690600401612929565b600060405180830381865afa15801561047f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104a79190810190612942565b9050806000815181106104bc576104bc6128cf565b60200260200101519250505092915050565b600080600080606560009054906101000a90046001600160a01b03169050600080826001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa15801561052d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105519190612a23565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff169150606660009054906101000a90046001600160a01b03166001600160a01b0316836001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f79190612a73565b6001600160a01b0316141561060c578061060e565b815b9450606660009054906101000a90046001600160a01b03166001600160a01b0316836001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801561066d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106919190612a73565b6001600160a01b0316146106a557806106a7565b815b9550826001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070b9190612a90565b9350505050909192565b61071d611bb0565b6001600160a01b03811661074457604051639fabe1c160e01b815260040160405180910390fd5b606980546001600160a01b0319166001600160a01b0383169081179091556040517fa568cf5cca64da9c9b0ea0067ca1429547667b2c1a87a19d41d0f6e6cad1010290600090a250565b610796611bb0565b606860009054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080d9190612a73565b6066546067546040517fc9c653960000000000000000000000000000000000000000000000000000000081526001600160a01b039283166004820152908216602482015291169063c9c65396906044016020604051808303816000875af115801561087c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a09190612a73565b606580546001600160a01b0319166001600160a01b03928316179055606654606854908216916108d591839116600019611c0a565b6069546108f1906001600160a01b038381169116600019611c0a565b60675460695460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b3906044016020604051808303816000875af1158015610947573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096b9190612aa9565b5060675460685460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b3906044016020604051808303816000875af11580156109c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e69190612aa9565b506068546067546040516370a0823160e01b81523060048201526001600160a01b039283169263e8e33700928592908216918316906370a0823190602401602060405180830381865afa158015610a41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a659190612a90565b6067546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610aad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad19190612a90565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b1681526001600160a01b0394851660048201529390921660248401526044830152606482015260006084820181905260a48201523060c48201524260e4820152610104016060604051808303816000875af1158015610b5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b819190612acb565b50506065546040516370a0823160e01b81523060048201526001600160a01b039091169150610c0990339083906370a0823190602401602060405180830381865afa158015610bd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf89190612a90565b6001600160a01b0384169190611d14565b5050565b60655460408051630240bc6b60e21b815290516000926001600160a01b031691839182918491630902f1ac916004808201926060929091908290030181865afa158015610c5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c829190612a23565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff1691506000606660009054906101000a90046001600160a01b03166001600160a01b0316846001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2a9190612a73565b6001600160a01b03161415610d3f5781610d41565b825b90506000606660009054906101000a90046001600160a01b03166001600160a01b0316856001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610da2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc69190612a73565b6001600160a01b031614610dda5782610ddc565b835b90506000856001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e429190612a90565b9050600081610e518a85612b0f565b610e5b9190612b2e565b9050600082610e6a8b86612b0f565b610e749190612b2e565b6068546040517f85f8c2590000000000000000000000000000000000000000000000000000000081526004810185905260248101889052604481018790529192506000916001600160a01b03909116906385f8c25990606401602060405180830381865afa158015610eea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0e9190612a90565b9050610f1a8183612b50565b9b9a5050505050505050505050565b610f31611bb0565b6001600160a01b038116610f5857604051639fabe1c160e01b815260040160405180910390fd5b606a80546001600160a01b0319166001600160a01b0383169081179091556040517fb26a149e4d4f5f59d149b2bde97bb20d5c1633a54c1bc34c27ac50dbd485a9a990600090a250565b610faa611bb0565b610fb46000611d49565b565b606a546000906001600160a01b03163314610fe457604051630deda90360e41b815260040160405180910390fd5b6067546040516323b872dd60e01b8152336004820152306024820152604481018590526001600160a01b039091169081906323b872dd906064016020604051808303816000875af115801561103d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110619190612aa9565b5060665461107a906001600160a01b0316333086611d9b565b6069546040517f7c6ba9c100000000000000000000000000000000000000000000000000000000815260048101859052602481018690523060448201526001600160a01b0390911690637c6ba9c1906064016020604051808303816000875af11580156110eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110f9190612a90565b506065546040516370a0823160e01b81523060048201526001600160a01b039091169081906370a0823190602401602060405180830381865afa15801561115a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117e9190612a90565b92506111946001600160a01b0382163385611d14565b6066546067546111b1916001600160a01b03908116911633611dd3565b505092915050565b60655460408051630240bc6b60e21b815290516000926001600160a01b031691839182918491630902f1ac916004808201926060929091908290030181865afa15801561120a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122e9190612a23565b506067546066546dffffffffffffffffffffffffffff9384169550919092169250600091829161126a916001600160a01b039081169116611f51565b60675491935091506000906001600160a01b0380851691161461128d578361128f565b845b6067549091506000906001600160a01b038581169116146112b057856112b2565b845b905060006112c18d8385612061565b6065546066549192506112e1916001600160a01b0390811691168f611d14565b6065546067546001600160a01b039182169163022c0d9f9181169088161461130a57600061130c565b825b6067546001600160a01b0388811691161461132857600061132a565b835b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815260048101929092526024820152306044820152608060648201526000608482015260a401600060405180830381600087803b15801561139457600080fd5b505af11580156113a8573d6000803e3d6000fd5b50506067546040516370a0823160e01b81523060048201526001600160a01b0390911692506370a082319150602401602060405180830381865afa1580156113f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114189190612a90565b9d9c50505050505050505050505050565b60008060006114366104ce565b509092509050811561145e5781611451826305f5e100612b0f565b61145b9190612b2e565b92505b505090565b606a546000906001600160a01b0316331461149157604051630deda90360e41b815260040160405180910390fd5b6067546069546040516323b872dd60e01b81523360048201526001600160a01b0391821660248201526044810185905291169081906323b872dd906064016020604051808303816000875af11580156114ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115129190612aa9565b506069546040517fedabc8f6000000000000000000000000000000000000000000000000000000008152600481018590523060248201526001600160a01b039091169063edabc8f6906044016020604051808303816000875af115801561157d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a19190612a90565b506065546040516370a0823160e01b81523060048201526001600160a01b039091169081906370a0823190602401602060405180830381865afa1580156115ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116109190612a90565b92506116266001600160a01b0382163385611d14565b606654606754611643916001600160a01b03908116911633611dd3565b5050919050565b606a546001600160a01b0316331461167557604051630deda90360e41b815260040160405180910390fd5b60408051600280825260608201835260009260208301908036833701905050905083816000815181106116aa576116aa6128cf565b6001600160a01b0392831660209182029290920101526067548251911690829060019081106116db576116db6128cf565b6001600160a01b03928316602091820292909201015260685461170391868116911685611c0a565b6068546040517f38ed17390000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906338ed1739906117549086908690869033904290600401612b68565b6000604051808303816000875af1158015611773573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261179b9190810190612942565b5050505050565b6000806000806117b06104ce565b9194509250905060006117d5826117cf6117ca8688612b0f565b6121a8565b90612333565b905060006117e787600160701b612b0f565b905060006117fd6305f5e100600160701b612b0f565b90506000670100000000000000611813836121a8565b670100000000000000611825866121a8565b611830886002612b0f565b61183a9190612b0f565b6118449190612b2e565b61184e9190612b0f565b6118589190612b2e565b9050611868600160701b82612b2e565b9998505050505050505050565b60006118858260008060006111b9565b92915050565b611893611bb0565b6001600160a01b0381166119145760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61191d81611d49565b50565b600054610100900460ff16158080156119405750600054600160ff909116105b8061195a5750303b15801561195a575060005460ff166001145b6119cc5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161190b565b6000805460ff1916600117905580156119ef576000805461ff0019166101001790555b6001600160a01b038516611a1657604051639fabe1c160e01b815260040160405180910390fd5b6001600160a01b038416611a3d57604051639fabe1c160e01b815260040160405180910390fd5b6001600160a01b038316611a6457604051639fabe1c160e01b815260040160405180910390fd5b6001600160a01b038216611a8b57604051639fabe1c160e01b815260040160405180910390fd5b611a93612355565b606680546001600160a01b038088166001600160a01b03199283161790925560678054878416908316179055606880548684169083161790556069805492851692909116919091179055801561179b576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050505050565b6069546040517ffd706062000000000000000000000000000000000000000000000000000000008152600481018390526000916001600160a01b03169063fd70606290602401602060405180830381865afa158015611b8c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118859190612a90565b6033546001600160a01b03163314610fb45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161190b565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663095ea7b360e01b179052611c7084826123c8565b611d0e576040516001600160a01b038416602482015260006044820152611d0490859063095ea7b360e01b906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915261246b565b611d0e848261246b565b50505050565b6040516001600160a01b038316602482015260448101829052611d4490849063a9059cbb60e01b90606401611ca0565b505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040516001600160a01b0380851660248301528316604482015260648101829052611d0e9085906323b872dd60e01b90608401611ca0565b6040516370a0823160e01b8152306004820152839083906000906001600160a01b038316906370a08231906024016020604051808303816000875af1158015611e20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e449190612a90565b90508015611ec15760405163a9059cbb60e01b81526001600160a01b0385811660048301526024820183905283169063a9059cbb906044016020604051808303816000875af1158015611e9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ebf9190612aa9565b505b6040516370a0823160e01b81523060048201526000906001600160a01b038516906370a0823190602401602060405180830381865afa158015611f08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f2c9190612a90565b90508015611f4857611f486001600160a01b0385168683611d14565b50505050505050565b600080826001600160a01b0316846001600160a01b03161415611fdc5760405162461bcd60e51b815260206004820152602560248201527f556e697377617056324c6962726172793a204944454e544943414c5f4144445260448201527f4553534553000000000000000000000000000000000000000000000000000000606482015260840161190b565b826001600160a01b0316846001600160a01b031610611ffc578284611fff565b83835b90925090506001600160a01b03821661205a5760405162461bcd60e51b815260206004820152601e60248201527f556e697377617056324c6962726172793a205a45524f5f414444524553530000604482015260640161190b565b9250929050565b60008084116120d85760405162461bcd60e51b815260206004820152602b60248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4960448201527f4e5055545f414d4f554e54000000000000000000000000000000000000000000606482015260840161190b565b6000831180156120e85750600082115b61215a5760405162461bcd60e51b815260206004820152602860248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c60448201527f4951554944495459000000000000000000000000000000000000000000000000606482015260840161190b565b6000612168856103e5612b0f565b905060006121768483612b0f565b9050600082612187876103e8612b0f565b6121919190612b50565b905061219d8183612b2e565b979650505050505050565b6000816121b757506000919050565b81600170010000000000000000000000000000000082106121dd5760809190911c9060401b5b6801000000000000000082106121f85760409190911c9060201b5b640100000000821061220f5760209190911c9060101b5b6201000082106122245760109190911c9060081b5b61010082106122385760089190911c9060041b5b6010821061224b5760049190911c9060021b5b600882106122575760011b5b60016122638286612b2e565b61226d9083612b50565b901c9050600161227d8286612b2e565b6122879083612b50565b901c905060016122978286612b2e565b6122a19083612b50565b901c905060016122b18286612b2e565b6122bb9083612b50565b901c905060016122cb8286612b2e565b6122d59083612b50565b901c905060016122e58286612b2e565b6122ef9083612b50565b901c905060016122ff8286612b2e565b6123099083612b50565b901c905060006123198286612b2e565b9050808210612328578061232a565b815b95945050505050565b60008161234484600160701b612553565b61234e9190612b2e565b9392505050565b600054610100900460ff166123c05760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161190b565b610fb461255f565b6000806000846001600160a01b0316846040516123e59190612bd0565b6000604051808303816000865af19150503d8060008114612422576040519150601f19603f3d011682016040523d82523d6000602084013e612427565b606091505b50915091508180156124515750805115806124515750808060200190518101906124519190612aa9565b801561232a5750505050506001600160a01b03163b151590565b60006124c0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166125d39092919063ffffffff16565b90508051600014806124e15750808060200190518101906124e19190612aa9565b611d445760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161190b565b600061234e8284612b0f565b600054610100900460ff166125ca5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161190b565b610fb433611d49565b60606125e284846000856125ea565b949350505050565b6060824710156126625760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161190b565b600080866001600160a01b0316858760405161267e9190612bd0565b60006040518083038185875af1925050503d80600081146126bb576040519150601f19603f3d011682016040523d82523d6000602084013e6126c0565b606091505b509150915061219d8783838760608315612738578251612731576001600160a01b0385163b6127315760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161190b565b50816125e2565b6125e2838381511561274d5781518083602001fd5b8060405162461bcd60e51b815260040161190b9190612bec565b6001600160a01b038116811461191d57600080fd5b6000806040838503121561278f57600080fd5b823561279a81612767565b946020939093013593505050565b6000602082840312156127ba57600080fd5b813561234e81612767565b6000602082840312156127d757600080fd5b5035919050565b600080604083850312156127f157600080fd5b50508035926020909101359150565b6000806000806080858703121561281657600080fd5b84359350602085013561282881612767565b9250604085013561283881612767565b9150606085013561284881612767565b939692955090935050565b60008060006060848603121561286857600080fd5b833561287381612767565b95602085013595506040909401359392505050565b6000806000806080858703121561289e57600080fd5b84356128a981612767565b9350602085013561282881612767565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600081518084526020808501945080840160005b8381101561291e5781516001600160a01b0316875295820195908201906001016128f9565b509495945050505050565b8281526040602082015260006125e260408301846128e5565b6000602080838503121561295557600080fd5b825167ffffffffffffffff8082111561296d57600080fd5b818501915085601f83011261298157600080fd5b815181811115612993576129936128b9565b8060051b604051601f19603f830116810181811085821117156129b8576129b86128b9565b6040529182528482019250838101850191888311156129d657600080fd5b938501935b828510156129f4578451845293850193928501926129db565b98975050505050505050565b80516dffffffffffffffffffffffffffff81168114612a1e57600080fd5b919050565b600080600060608486031215612a3857600080fd5b612a4184612a00565b9250612a4f60208501612a00565b9150604084015163ffffffff81168114612a6857600080fd5b809150509250925092565b600060208284031215612a8557600080fd5b815161234e81612767565b600060208284031215612aa257600080fd5b5051919050565b600060208284031215612abb57600080fd5b8151801515811461234e57600080fd5b600080600060608486031215612ae057600080fd5b8351925060208401519150604084015190509250925092565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615612b2957612b29612af9565b500290565b600082612b4b57634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115612b6357612b63612af9565b500190565b85815284602082015260a060408201526000612b8760a08301866128e5565b6001600160a01b0394909416606083015250608001529392505050565b60005b83811015612bbf578181015183820152602001612ba7565b83811115611d0e5750506000910152565b60008251612be2818460208701612ba4565b9190910192915050565b6020815260008251806020840152612c0b816040850160208701612ba4565b601f01601f1916919091016040019291505056fea264697066735822122068671464100a431065c8ec68b3ba25bcd163aee9721730d41fbede760928c3ea64736f6c634300080c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101a35760003560e01c80637d5aa5f4116100ee578063d6e4845c11610097578063f2fde38b11610071578063f2fde38b1461034f578063f887ea4014610362578063f8c8765e14610375578063fd7060621461038857600080fd5b8063d6e4845c14610316578063e28861fa14610329578063e4849b321461033c57600080fd5b806398d5fdca116100c857806398d5fdca146102ea5780639da2401f146102f2578063c829bfda1461030357600080fd5b80637d5aa5f4146102b357806388156e65146102c65780638da5cb5b146102d957600080fd5b80634053b9ea116101505780636fb2a1bf1161012a5780636fb2a1bf14610285578063715018a614610298578063753983d6146102a057600080fd5b80634053b9ea1461024c578063439e50161461025f5780635321ae321461027257600080fd5b80631e2ebcaa116101815780631e2ebcaa1461021c57806322e2c6461461022f578063250e6de01461024457600080fd5b806306346c30146101a857806307fa901a146101d85780630902f1ac146101f9575b600080fd5b606a546101bb906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6101eb6101e636600461277c565b61039b565b6040519081526020016101cf565b6102016104ce565b604080519384526020840192909252908201526060016101cf565b6069546101bb906001600160a01b031681565b61024261023d3660046127a8565b610715565b005b61024261078e565b6066546101bb906001600160a01b031681565b6065546101bb906001600160a01b031681565b6101eb6102803660046127c5565b610c0d565b6102426102933660046127a8565b610f29565b610242610fa2565b6101eb6102ae3660046127de565b610fb6565b6067546101bb906001600160a01b031681565b6101eb6102d4366004612800565b6111b9565b6033546001600160a01b03166101bb565b6101eb611429565b6069546001600160a01b03166101bb565b6101eb6103113660046127c5565b611463565b610242610324366004612853565b61164a565b6101eb6103373660046127c5565b6117a2565b6101eb61034a3660046127c5565b611875565b61024261035d3660046127a8565b61188b565b6068546101bb906001600160a01b031681565b610242610383366004612888565b611920565b6101eb6103963660046127c5565b611b29565b6040805160028082526060820183526000928392919060208301908036833701905050905083816000815181106103d4576103d46128cf565b6001600160a01b039283166020918202929092010152606754825191169082906001908110610405576104056128cf565b6001600160a01b0392831660209182029290920101526068546040517f1f00ca740000000000000000000000000000000000000000000000000000000081526000929190911690631f00ca74906104629087908690600401612929565b600060405180830381865afa15801561047f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104a79190810190612942565b9050806000815181106104bc576104bc6128cf565b60200260200101519250505092915050565b600080600080606560009054906101000a90046001600160a01b03169050600080826001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa15801561052d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105519190612a23565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff169150606660009054906101000a90046001600160a01b03166001600160a01b0316836001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f79190612a73565b6001600160a01b0316141561060c578061060e565b815b9450606660009054906101000a90046001600160a01b03166001600160a01b0316836001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801561066d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106919190612a73565b6001600160a01b0316146106a557806106a7565b815b9550826001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070b9190612a90565b9350505050909192565b61071d611bb0565b6001600160a01b03811661074457604051639fabe1c160e01b815260040160405180910390fd5b606980546001600160a01b0319166001600160a01b0383169081179091556040517fa568cf5cca64da9c9b0ea0067ca1429547667b2c1a87a19d41d0f6e6cad1010290600090a250565b610796611bb0565b606860009054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080d9190612a73565b6066546067546040517fc9c653960000000000000000000000000000000000000000000000000000000081526001600160a01b039283166004820152908216602482015291169063c9c65396906044016020604051808303816000875af115801561087c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a09190612a73565b606580546001600160a01b0319166001600160a01b03928316179055606654606854908216916108d591839116600019611c0a565b6069546108f1906001600160a01b038381169116600019611c0a565b60675460695460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b3906044016020604051808303816000875af1158015610947573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096b9190612aa9565b5060675460685460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b3906044016020604051808303816000875af11580156109c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e69190612aa9565b506068546067546040516370a0823160e01b81523060048201526001600160a01b039283169263e8e33700928592908216918316906370a0823190602401602060405180830381865afa158015610a41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a659190612a90565b6067546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610aad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad19190612a90565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b1681526001600160a01b0394851660048201529390921660248401526044830152606482015260006084820181905260a48201523060c48201524260e4820152610104016060604051808303816000875af1158015610b5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b819190612acb565b50506065546040516370a0823160e01b81523060048201526001600160a01b039091169150610c0990339083906370a0823190602401602060405180830381865afa158015610bd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf89190612a90565b6001600160a01b0384169190611d14565b5050565b60655460408051630240bc6b60e21b815290516000926001600160a01b031691839182918491630902f1ac916004808201926060929091908290030181865afa158015610c5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c829190612a23565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff1691506000606660009054906101000a90046001600160a01b03166001600160a01b0316846001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2a9190612a73565b6001600160a01b03161415610d3f5781610d41565b825b90506000606660009054906101000a90046001600160a01b03166001600160a01b0316856001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610da2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc69190612a73565b6001600160a01b031614610dda5782610ddc565b835b90506000856001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e429190612a90565b9050600081610e518a85612b0f565b610e5b9190612b2e565b9050600082610e6a8b86612b0f565b610e749190612b2e565b6068546040517f85f8c2590000000000000000000000000000000000000000000000000000000081526004810185905260248101889052604481018790529192506000916001600160a01b03909116906385f8c25990606401602060405180830381865afa158015610eea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0e9190612a90565b9050610f1a8183612b50565b9b9a5050505050505050505050565b610f31611bb0565b6001600160a01b038116610f5857604051639fabe1c160e01b815260040160405180910390fd5b606a80546001600160a01b0319166001600160a01b0383169081179091556040517fb26a149e4d4f5f59d149b2bde97bb20d5c1633a54c1bc34c27ac50dbd485a9a990600090a250565b610faa611bb0565b610fb46000611d49565b565b606a546000906001600160a01b03163314610fe457604051630deda90360e41b815260040160405180910390fd5b6067546040516323b872dd60e01b8152336004820152306024820152604481018590526001600160a01b039091169081906323b872dd906064016020604051808303816000875af115801561103d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110619190612aa9565b5060665461107a906001600160a01b0316333086611d9b565b6069546040517f7c6ba9c100000000000000000000000000000000000000000000000000000000815260048101859052602481018690523060448201526001600160a01b0390911690637c6ba9c1906064016020604051808303816000875af11580156110eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110f9190612a90565b506065546040516370a0823160e01b81523060048201526001600160a01b039091169081906370a0823190602401602060405180830381865afa15801561115a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117e9190612a90565b92506111946001600160a01b0382163385611d14565b6066546067546111b1916001600160a01b03908116911633611dd3565b505092915050565b60655460408051630240bc6b60e21b815290516000926001600160a01b031691839182918491630902f1ac916004808201926060929091908290030181865afa15801561120a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122e9190612a23565b506067546066546dffffffffffffffffffffffffffff9384169550919092169250600091829161126a916001600160a01b039081169116611f51565b60675491935091506000906001600160a01b0380851691161461128d578361128f565b845b6067549091506000906001600160a01b038581169116146112b057856112b2565b845b905060006112c18d8385612061565b6065546066549192506112e1916001600160a01b0390811691168f611d14565b6065546067546001600160a01b039182169163022c0d9f9181169088161461130a57600061130c565b825b6067546001600160a01b0388811691161461132857600061132a565b835b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815260048101929092526024820152306044820152608060648201526000608482015260a401600060405180830381600087803b15801561139457600080fd5b505af11580156113a8573d6000803e3d6000fd5b50506067546040516370a0823160e01b81523060048201526001600160a01b0390911692506370a082319150602401602060405180830381865afa1580156113f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114189190612a90565b9d9c50505050505050505050505050565b60008060006114366104ce565b509092509050811561145e5781611451826305f5e100612b0f565b61145b9190612b2e565b92505b505090565b606a546000906001600160a01b0316331461149157604051630deda90360e41b815260040160405180910390fd5b6067546069546040516323b872dd60e01b81523360048201526001600160a01b0391821660248201526044810185905291169081906323b872dd906064016020604051808303816000875af11580156114ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115129190612aa9565b506069546040517fedabc8f6000000000000000000000000000000000000000000000000000000008152600481018590523060248201526001600160a01b039091169063edabc8f6906044016020604051808303816000875af115801561157d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a19190612a90565b506065546040516370a0823160e01b81523060048201526001600160a01b039091169081906370a0823190602401602060405180830381865afa1580156115ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116109190612a90565b92506116266001600160a01b0382163385611d14565b606654606754611643916001600160a01b03908116911633611dd3565b5050919050565b606a546001600160a01b0316331461167557604051630deda90360e41b815260040160405180910390fd5b60408051600280825260608201835260009260208301908036833701905050905083816000815181106116aa576116aa6128cf565b6001600160a01b0392831660209182029290920101526067548251911690829060019081106116db576116db6128cf565b6001600160a01b03928316602091820292909201015260685461170391868116911685611c0a565b6068546040517f38ed17390000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906338ed1739906117549086908690869033904290600401612b68565b6000604051808303816000875af1158015611773573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261179b9190810190612942565b5050505050565b6000806000806117b06104ce565b9194509250905060006117d5826117cf6117ca8688612b0f565b6121a8565b90612333565b905060006117e787600160701b612b0f565b905060006117fd6305f5e100600160701b612b0f565b90506000670100000000000000611813836121a8565b670100000000000000611825866121a8565b611830886002612b0f565b61183a9190612b0f565b6118449190612b2e565b61184e9190612b0f565b6118589190612b2e565b9050611868600160701b82612b2e565b9998505050505050505050565b60006118858260008060006111b9565b92915050565b611893611bb0565b6001600160a01b0381166119145760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61191d81611d49565b50565b600054610100900460ff16158080156119405750600054600160ff909116105b8061195a5750303b15801561195a575060005460ff166001145b6119cc5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161190b565b6000805460ff1916600117905580156119ef576000805461ff0019166101001790555b6001600160a01b038516611a1657604051639fabe1c160e01b815260040160405180910390fd5b6001600160a01b038416611a3d57604051639fabe1c160e01b815260040160405180910390fd5b6001600160a01b038316611a6457604051639fabe1c160e01b815260040160405180910390fd5b6001600160a01b038216611a8b57604051639fabe1c160e01b815260040160405180910390fd5b611a93612355565b606680546001600160a01b038088166001600160a01b03199283161790925560678054878416908316179055606880548684169083161790556069805492851692909116919091179055801561179b576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050505050565b6069546040517ffd706062000000000000000000000000000000000000000000000000000000008152600481018390526000916001600160a01b03169063fd70606290602401602060405180830381865afa158015611b8c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118859190612a90565b6033546001600160a01b03163314610fb45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161190b565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663095ea7b360e01b179052611c7084826123c8565b611d0e576040516001600160a01b038416602482015260006044820152611d0490859063095ea7b360e01b906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915261246b565b611d0e848261246b565b50505050565b6040516001600160a01b038316602482015260448101829052611d4490849063a9059cbb60e01b90606401611ca0565b505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040516001600160a01b0380851660248301528316604482015260648101829052611d0e9085906323b872dd60e01b90608401611ca0565b6040516370a0823160e01b8152306004820152839083906000906001600160a01b038316906370a08231906024016020604051808303816000875af1158015611e20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e449190612a90565b90508015611ec15760405163a9059cbb60e01b81526001600160a01b0385811660048301526024820183905283169063a9059cbb906044016020604051808303816000875af1158015611e9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ebf9190612aa9565b505b6040516370a0823160e01b81523060048201526000906001600160a01b038516906370a0823190602401602060405180830381865afa158015611f08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f2c9190612a90565b90508015611f4857611f486001600160a01b0385168683611d14565b50505050505050565b600080826001600160a01b0316846001600160a01b03161415611fdc5760405162461bcd60e51b815260206004820152602560248201527f556e697377617056324c6962726172793a204944454e544943414c5f4144445260448201527f4553534553000000000000000000000000000000000000000000000000000000606482015260840161190b565b826001600160a01b0316846001600160a01b031610611ffc578284611fff565b83835b90925090506001600160a01b03821661205a5760405162461bcd60e51b815260206004820152601e60248201527f556e697377617056324c6962726172793a205a45524f5f414444524553530000604482015260640161190b565b9250929050565b60008084116120d85760405162461bcd60e51b815260206004820152602b60248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4960448201527f4e5055545f414d4f554e54000000000000000000000000000000000000000000606482015260840161190b565b6000831180156120e85750600082115b61215a5760405162461bcd60e51b815260206004820152602860248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c60448201527f4951554944495459000000000000000000000000000000000000000000000000606482015260840161190b565b6000612168856103e5612b0f565b905060006121768483612b0f565b9050600082612187876103e8612b0f565b6121919190612b50565b905061219d8183612b2e565b979650505050505050565b6000816121b757506000919050565b81600170010000000000000000000000000000000082106121dd5760809190911c9060401b5b6801000000000000000082106121f85760409190911c9060201b5b640100000000821061220f5760209190911c9060101b5b6201000082106122245760109190911c9060081b5b61010082106122385760089190911c9060041b5b6010821061224b5760049190911c9060021b5b600882106122575760011b5b60016122638286612b2e565b61226d9083612b50565b901c9050600161227d8286612b2e565b6122879083612b50565b901c905060016122978286612b2e565b6122a19083612b50565b901c905060016122b18286612b2e565b6122bb9083612b50565b901c905060016122cb8286612b2e565b6122d59083612b50565b901c905060016122e58286612b2e565b6122ef9083612b50565b901c905060016122ff8286612b2e565b6123099083612b50565b901c905060006123198286612b2e565b9050808210612328578061232a565b815b95945050505050565b60008161234484600160701b612553565b61234e9190612b2e565b9392505050565b600054610100900460ff166123c05760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161190b565b610fb461255f565b6000806000846001600160a01b0316846040516123e59190612bd0565b6000604051808303816000865af19150503d8060008114612422576040519150601f19603f3d011682016040523d82523d6000602084013e612427565b606091505b50915091508180156124515750805115806124515750808060200190518101906124519190612aa9565b801561232a5750505050506001600160a01b03163b151590565b60006124c0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166125d39092919063ffffffff16565b90508051600014806124e15750808060200190518101906124e19190612aa9565b611d445760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161190b565b600061234e8284612b0f565b600054610100900460ff166125ca5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161190b565b610fb433611d49565b60606125e284846000856125ea565b949350505050565b6060824710156126625760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161190b565b600080866001600160a01b0316858760405161267e9190612bd0565b60006040518083038185875af1925050503d80600081146126bb576040519150601f19603f3d011682016040523d82523d6000602084013e6126c0565b606091505b509150915061219d8783838760608315612738578251612731576001600160a01b0385163b6127315760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161190b565b50816125e2565b6125e2838381511561274d5781518083602001fd5b8060405162461bcd60e51b815260040161190b9190612bec565b6001600160a01b038116811461191d57600080fd5b6000806040838503121561278f57600080fd5b823561279a81612767565b946020939093013593505050565b6000602082840312156127ba57600080fd5b813561234e81612767565b6000602082840312156127d757600080fd5b5035919050565b600080604083850312156127f157600080fd5b50508035926020909101359150565b6000806000806080858703121561281657600080fd5b84359350602085013561282881612767565b9250604085013561283881612767565b9150606085013561284881612767565b939692955090935050565b60008060006060848603121561286857600080fd5b833561287381612767565b95602085013595506040909401359392505050565b6000806000806080858703121561289e57600080fd5b84356128a981612767565b9350602085013561282881612767565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600081518084526020808501945080840160005b8381101561291e5781516001600160a01b0316875295820195908201906001016128f9565b509495945050505050565b8281526040602082015260006125e260408301846128e5565b6000602080838503121561295557600080fd5b825167ffffffffffffffff8082111561296d57600080fd5b818501915085601f83011261298157600080fd5b815181811115612993576129936128b9565b8060051b604051601f19603f830116810181811085821117156129b8576129b86128b9565b6040529182528482019250838101850191888311156129d657600080fd5b938501935b828510156129f4578451845293850193928501926129db565b98975050505050505050565b80516dffffffffffffffffffffffffffff81168114612a1e57600080fd5b919050565b600080600060608486031215612a3857600080fd5b612a4184612a00565b9250612a4f60208501612a00565b9150604084015163ffffffff81168114612a6857600080fd5b809150509250925092565b600060208284031215612a8557600080fd5b815161234e81612767565b600060208284031215612aa257600080fd5b5051919050565b600060208284031215612abb57600080fd5b8151801515811461234e57600080fd5b600080600060608486031215612ae057600080fd5b8351925060208401519150604084015190509250925092565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615612b2957612b29612af9565b500290565b600082612b4b57634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115612b6357612b63612af9565b500190565b85815284602082015260a060408201526000612b8760a08301866128e5565b6001600160a01b0394909416606083015250608001529392505050565b60005b83811015612bbf578181015183820152602001612ba7565b83811115611d0e5750506000910152565b60008251612be2818460208701612ba4565b9190910192915050565b6020815260008251806020840152612c0b816040850160208701612ba4565b601f01601f1916919091016040019291505056fea264697066735822122068671464100a431065c8ec68b3ba25bcd163aee9721730d41fbede760928c3ea64736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getLpPrice(uint256)": {
        "params": {
          "prntPriceInEth": "price of PRNT in ETH"
        },
        "returns": {
          "priceInEth": "LP price in ETH"
        }
      },
      "getPrice()": {
        "returns": {
          "priceInEth": "price of PRNT"
        }
      },
      "getReserves()": {
        "returns": {
          "lpTokenSupply": "LP token supply",
          "prnt": "PRNT amount",
          "weth": "WETH amount"
        }
      },
      "initialize(address,address,address,address)": {
        "params": {
          "_liquidityZap": "LiquidityZap addrress",
          "_prntAddr": "PRNT address",
          "_routerAddr": "Uniswap router address",
          "_wethAddr": "WETH address"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "quoteFromToken(uint256)": {
        "params": {
          "tokenAmount": "amount of PRNT"
        },
        "returns": {
          "optimalWETHAmount": "WETH amount"
        }
      },
      "quoteSwap(address,uint256)": {
        "params": {
          "_inToken": "input token",
          "_wethAmount": "WETH amount"
        },
        "returns": {
          "tokenAmount": "token amount"
        }
      },
      "quoteWETH(uint256)": {
        "params": {
          "lpAmount": "LP amount"
        },
        "returns": {
          "wethAmount": "WETH amount"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setLiquidityZap(address)": {
        "params": {
          "_liquidityZap": "LiquidityZap address"
        }
      },
      "setLockZap(address)": {
        "params": {
          "_lockZap": "LockZap address"
        }
      },
      "swapToWeth(address,uint256,uint256)": {
        "details": "Helper function to swap a token to weth given an {_inToken} and swap {_amount}. Will revert if the output is under the {_minAmountOut}",
        "params": {
          "_amount": "Amount of input tokens",
          "_inToken": "Input token for swap",
          "_minAmountOut": "Minimum output amount"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "zapTokens(uint256,uint256)": {
        "params": {
          "_prntAmt": "amount of PRNT",
          "_wethAmt": "amount of WETH"
        },
        "returns": {
          "liquidity": "LP token amount"
        }
      },
      "zapWETH(uint256)": {
        "params": {
          "amount": "of WETH"
        },
        "returns": {
          "liquidity": "LP token amount"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getLiquidityZap()": {
        "notice": "Returns LiquidityZap address"
      },
      "getLpPrice(uint256)": {
        "notice": "Returns LP price"
      },
      "getPrice()": {
        "notice": "Returns PRNT price in ETH"
      },
      "getReserves()": {
        "notice": "Returns reserve information."
      },
      "initialize(address,address,address,address)": {
        "notice": "Initializer"
      },
      "initializePool()": {
        "notice": "Initialize PRNT/WETH pool and liquidity zap"
      },
      "quoteFromToken(uint256)": {
        "notice": "Returns `quote` of PRNT in WETH"
      },
      "quoteSwap(address,uint256)": {
        "notice": "Calculate quote in WETH from token"
      },
      "quoteWETH(uint256)": {
        "notice": "Gets needed WETH for adding LP"
      },
      "setLiquidityZap(address)": {
        "notice": "Sets new LiquidityZap address"
      },
      "setLockZap(address)": {
        "notice": "Sets new LockZap address"
      },
      "zapTokens(uint256,uint256)": {
        "notice": "Zap WETH and PRNT into LP"
      },
      "zapWETH(uint256)": {
        "notice": "Zap WETH into LP"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3047,
        "contract": "contracts/test/TestUniswapPoolHelper.sol:TestUniswapPoolHelper",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 3050,
        "contract": "contracts/test/TestUniswapPoolHelper.sol:TestUniswapPoolHelper",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3589,
        "contract": "contracts/test/TestUniswapPoolHelper.sol:TestUniswapPoolHelper",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2919,
        "contract": "contracts/test/TestUniswapPoolHelper.sol:TestUniswapPoolHelper",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 3039,
        "contract": "contracts/test/TestUniswapPoolHelper.sol:TestUniswapPoolHelper",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 7445,
        "contract": "contracts/test/TestUniswapPoolHelper.sol:TestUniswapPoolHelper",
        "label": "lpTokenAddr",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 7447,
        "contract": "contracts/test/TestUniswapPoolHelper.sol:TestUniswapPoolHelper",
        "label": "prntAddr",
        "offset": 0,
        "slot": "102",
        "type": "t_address"
      },
      {
        "astId": 7449,
        "contract": "contracts/test/TestUniswapPoolHelper.sol:TestUniswapPoolHelper",
        "label": "wethAddr",
        "offset": 0,
        "slot": "103",
        "type": "t_address"
      },
      {
        "astId": 7452,
        "contract": "contracts/test/TestUniswapPoolHelper.sol:TestUniswapPoolHelper",
        "label": "router",
        "offset": 0,
        "slot": "104",
        "type": "t_contract(IUniswapV2Router02)6669"
      },
      {
        "astId": 7455,
        "contract": "contracts/test/TestUniswapPoolHelper.sol:TestUniswapPoolHelper",
        "label": "liquidityZap",
        "offset": 0,
        "slot": "105",
        "type": "t_contract(ILiquidityZap)6181"
      },
      {
        "astId": 7457,
        "contract": "contracts/test/TestUniswapPoolHelper.sol:TestUniswapPoolHelper",
        "label": "lockZap",
        "offset": 0,
        "slot": "106",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ILiquidityZap)6181": {
        "encoding": "inplace",
        "label": "contract ILiquidityZap",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Router02)6669": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router02",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}