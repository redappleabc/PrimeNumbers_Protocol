{
  "address": "0x60b1Cc8869E2fC90E82b51Bb97482D36272e55c9",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "IncompatibleToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientPermission",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidRatio",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotMFD",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_configurator",
          "type": "address"
        }
      ],
      "name": "AdminUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ForwardReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpUsdValue",
          "type": "uint256"
        }
      ],
      "name": "NewTransferAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_operationExpenses",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_operationExpenseRatio",
          "type": "uint256"
        }
      ],
      "name": "OperationExpensesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_providerAddress",
          "type": "address"
        }
      ],
      "name": "ProtocolDataProviderUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_rewardsToken",
          "type": "address"
        }
      ],
      "name": "RewardsUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DECIMALS",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RATIO_DIVISOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "aaveProtocolDataProvider",
      "outputs": [
        {
          "internalType": "contract IAaveProtocolDataProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardsToken",
          "type": "address"
        }
      ],
      "name": "addReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_rewardTokens",
          "type": "address[]"
        }
      ],
      "name": "forwardReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMultiFeeDistributionAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPrntTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IMintableToken",
          "name": "prntToken_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "aaveOracle_",
          "type": "address"
        },
        {
          "internalType": "contract IMultiFeeDistribution",
          "name": "multiFeeDistribution_",
          "type": "address"
        },
        {
          "internalType": "contract IAaveProtocolDataProvider",
          "name": "aaveProtocolDataProvider_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isRewardToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "multiFeeDistribution",
      "outputs": [
        {
          "internalType": "contract IMultiFeeDistribution",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operationExpenseRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operationExpenses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "prntToken",
      "outputs": [
        {
          "internalType": "contract IMintableToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardsToken",
          "type": "address"
        }
      ],
      "name": "removeReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_configurator",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operationExpenses",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_operationExpenseRatio",
          "type": "uint256"
        }
      ],
      "name": "setOperationExpenses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAaveProtocolDataProvider",
          "name": "_providerAddress",
          "type": "address"
        }
      ],
      "name": "setProtocolDataProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1e3c53c9b442084eceb6731fedd81cf4becf8b2c9a459bcd9933e4fd3bb9c96c",
  "receipt": {
    "to": null,
    "from": "0xdE8023f05d831Fb7381486D041237ddEB06c1BA2",
    "contractAddress": "0x60b1Cc8869E2fC90E82b51Bb97482D36272e55c9",
    "transactionIndex": 3,
    "gasUsed": "1788836",
    "logsBloom": "0x
    "blockHash": "0x0692c5bbc06ab789fb10556aab4fbdc861eeb8a359de3edfe4a3de3297435d2e",
    "transactionHash": "0x1e3c53c9b442084eceb6731fedd81cf4becf8b2c9a459bcd9933e4fd3bb9c96c",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 43440047,
        "transactionHash": "0x1e3c53c9b442084eceb6731fedd81cf4becf8b2c9a459bcd9933e4fd3bb9c96c",
        "address": "0x60b1Cc8869E2fC90E82b51Bb97482D36272e55c9",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 3,
        "blockHash": "0x0692c5bbc06ab789fb10556aab4fbdc861eeb8a359de3edfe4a3de3297435d2e"
      }
    ],
    "blockNumber": 43440047,
    "cumulativeGasUsed": "2022235",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "dcefabf19271a6489c66282870162b11",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"IncompatibleToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientPermission\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRatio\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotMFD\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_configurator\",\"type\":\"address\"}],\"name\":\"AdminUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ForwardReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpUsdValue\",\"type\":\"uint256\"}],\"name\":\"NewTransferAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operationExpenses\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_operationExpenseRatio\",\"type\":\"uint256\"}],\"name\":\"OperationExpensesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_providerAddress\",\"type\":\"address\"}],\"name\":\"ProtocolDataProviderUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"}],\"name\":\"RewardsUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DECIMALS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RATIO_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aaveProtocolDataProvider\",\"outputs\":[{\"internalType\":\"contract IAaveProtocolDataProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"}],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewardTokens\",\"type\":\"address[]\"}],\"name\":\"forwardReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMultiFeeDistributionAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrntTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMintableToken\",\"name\":\"prntToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"aaveOracle_\",\"type\":\"address\"},{\"internalType\":\"contract IMultiFeeDistribution\",\"name\":\"multiFeeDistribution_\",\"type\":\"address\"},{\"internalType\":\"contract IAaveProtocolDataProvider\",\"name\":\"aaveProtocolDataProvider_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isRewardToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiFeeDistribution\",\"outputs\":[{\"internalType\":\"contract IMultiFeeDistribution\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operationExpenseRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operationExpenses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prntToken\",\"outputs\":[{\"internalType\":\"contract IMintableToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"}],\"name\":\"removeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_configurator\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operationExpenses\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_operationExpenseRatio\",\"type\":\"uint256\"}],\"name\":\"setOperationExpenses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAaveProtocolDataProvider\",\"name\":\"_providerAddress\",\"type\":\"address\"}],\"name\":\"setProtocolDataProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Prime\",\"kind\":\"dev\",\"methods\":{\"addReward(address)\":{\"params\":{\"_rewardsToken\":\"address of the reward token\"}},\"forwardReward(address[])\":{\"params\":{\"_rewardTokens\":\"an array of reward token addresses\"}},\"getMultiFeeDistributionAddress()\":{\"returns\":{\"_0\":\"MFD address\"}},\"getPrntTokenAddress()\":{\"returns\":{\"_0\":\"PRNT token address\"}},\"initialize(address,address,address,address)\":{\"params\":{\"aaveOracle_\":\"Aave oracle address\",\"multiFeeDistribution_\":\"Multi fee distribution contract\",\"prntToken_\":\"PRNT address\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"recoverERC20(address,uint256)\":{\"params\":{\"tokenAddress\":\"address of erc20 token to recover\",\"tokenAmount\":\"amount to recover\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setAdmin(address)\":{\"params\":{\"_configurator\":\"Configurator address\"}},\"setOperationExpenses(address,uint256)\":{\"params\":{\"_operationExpenseRatio\":\"Proportion of operation expense\",\"_operationExpenses\":\"Address to receive operation expenses\"}},\"setProtocolDataProvider(address)\":{\"params\":{\"_providerAddress\":\"The address of the protocol data provider contract\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Fee distributor inside\",\"version\":1},\"userdoc\":{\"events\":{\"ForwardReward(address,uint256)\":{\"notice\":\"Emitted when reward token is forwarded\"},\"OperationExpensesUpdated(address,uint256)\":{\"notice\":\"Emitted when operation expenses is set\"},\"Recovered(address,uint256)\":{\"notice\":\"Emitted when ERC20 token is recovered\"}},\"kind\":\"user\",\"methods\":{\"addReward(address)\":{\"notice\":\"Add a new reward token to be distributed to stakers\"},\"admin()\":{\"notice\":\"Admin address\"},\"forwardReward(address[])\":{\"notice\":\"Run by MFD to pull pending platform revenue\"},\"getMultiFeeDistributionAddress()\":{\"notice\":\"Returns MFD address.\"},\"getPrntTokenAddress()\":{\"notice\":\"Returns PRNT token address.\"},\"initialize(address,address,address,address)\":{\"notice\":\"Initializer\"},\"multiFeeDistribution()\":{\"notice\":\"Fee distributor contract for earnings and PRNT lockings\"},\"operationExpenseRatio()\":{\"notice\":\"Reward ratio for operation expenses\"},\"operationExpenses()\":{\"notice\":\"Operation Expense account\"},\"prntToken()\":{\"notice\":\"PRNT token\"},\"recoverERC20(address,uint256)\":{\"notice\":\"Added to support recovering any ERC20 tokens inside the contract\"},\"removeReward(address)\":{\"notice\":\"Remove an existing reward token\"},\"setAdmin(address)\":{\"notice\":\"Sets pool configurator as admin.\"},\"setOperationExpenses(address,uint256)\":{\"notice\":\"Set operation expenses account\"},\"setProtocolDataProvider(address)\":{\"notice\":\"Set the Protocol Data Provider address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/prime/staking/MiddleFeeDistribution.sol\":\"MiddleFeeDistribution\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x359a1ab89b46b9aba7bcad3fb651924baf4893d15153049b9976b0fc9be1358e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"contracts/interfaces/AggregatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\ninterface AggregatorInterface {\\n\\tfunction latestAnswer() external view returns (int256);\\n\\n\\tfunction latestTimestamp() external view returns (uint256);\\n\\n\\tfunction latestRound() external view returns (uint256);\\n\\n\\tfunction getAnswer(uint256 roundId) external view returns (int256);\\n\\n\\tfunction getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n\\tevent AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n\\n\\tevent NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\",\"keccak256\":\"0xb2938f7114988ee6a3a1e86310e06d38ac8aace76d344b60cb1da30de49fff16\",\"license\":\"MIT\"},\"contracts/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\ninterface AggregatorV3Interface {\\n\\tfunction decimals() external view returns (uint8);\\n\\n\\tfunction description() external view returns (string memory);\\n\\n\\tfunction version() external view returns (uint256);\\n\\n\\t// getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n\\t// if they do not have data to report, instead of returning unset values\\n\\t// which could be misinterpreted as actual reported values.\\n\\tfunction getRoundData(\\n\\t\\tuint80 _roundId\\n\\t)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n\\tfunction latestRoundData()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0x0a6cadd5e05492e74282965db755bc834bb468ee493ae44429c7f2cf38fb8d5f\",\"license\":\"MIT\"},\"contracts/interfaces/IAToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IScaledBalanceToken} from \\\"./IScaledBalanceToken.sol\\\";\\nimport {IInitializableAToken} from \\\"./IInitializableAToken.sol\\\";\\nimport {IAaveIncentivesController} from \\\"./IAaveIncentivesController.sol\\\";\\n\\ninterface IAToken is IERC20, IScaledBalanceToken, IInitializableAToken {\\n\\t/**\\n\\t * @dev Emitted after the mint action\\n\\t * @param from The address performing the mint\\n\\t * @param value The amount being\\n\\t * @param index The new liquidity index of the reserve\\n\\t **/\\n\\tevent Mint(address indexed from, uint256 value, uint256 index);\\n\\n\\t/**\\n\\t * @dev Mints `amount` aTokens to `user`\\n\\t * @param user The address receiving the minted tokens\\n\\t * @param amount The amount of tokens getting minted\\n\\t * @param index The new liquidity index of the reserve\\n\\t * @return `true` if the the previous balance of the user was 0\\n\\t */\\n\\tfunction mint(address user, uint256 amount, uint256 index) external returns (bool);\\n\\n\\t/**\\n\\t * @dev Emitted after aTokens are burned\\n\\t * @param from The owner of the aTokens, getting them burned\\n\\t * @param target The address that will receive the underlying\\n\\t * @param value The amount being burned\\n\\t * @param index The new liquidity index of the reserve\\n\\t **/\\n\\tevent Burn(address indexed from, address indexed target, uint256 value, uint256 index);\\n\\n\\t/**\\n\\t * @dev Emitted during the transfer action\\n\\t * @param from The user whose tokens are being transferred\\n\\t * @param to The recipient\\n\\t * @param value The amount being transferred\\n\\t * @param index The new liquidity index of the reserve\\n\\t **/\\n\\tevent BalanceTransfer(address indexed from, address indexed to, uint256 value, uint256 index);\\n\\n\\t/**\\n\\t * @dev Burns aTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\\n\\t * @param user The owner of the aTokens, getting them burned\\n\\t * @param receiverOfUnderlying The address that will receive the underlying\\n\\t * @param amount The amount being burned\\n\\t * @param index The new liquidity index of the reserve\\n\\t **/\\n\\tfunction burn(address user, address receiverOfUnderlying, uint256 amount, uint256 index) external;\\n\\n\\t/**\\n\\t * @dev Mints aTokens to the reserve treasury\\n\\t * @param amount The amount of tokens getting minted\\n\\t * @param index The new liquidity index of the reserve\\n\\t */\\n\\tfunction mintToTreasury(uint256 amount, uint256 index) external;\\n\\n\\t/**\\n\\t * @dev Transfers aTokens in the event of a borrow being liquidated, in case the liquidators reclaims the aToken\\n\\t * @param from The address getting liquidated, current owner of the aTokens\\n\\t * @param to The recipient\\n\\t * @param value The amount of tokens getting transferred\\n\\t **/\\n\\tfunction transferOnLiquidation(address from, address to, uint256 value) external;\\n\\n\\t/**\\n\\t * @dev Transfers the underlying asset to `target`. Used by the LendingPool to transfer\\n\\t * assets in borrow(), withdraw() and flashLoan()\\n\\t * @param user The recipient of the underlying\\n\\t * @param amount The amount getting transferred\\n\\t * @return The amount transferred\\n\\t **/\\n\\tfunction transferUnderlyingTo(address user, uint256 amount) external returns (uint256);\\n\\n\\t/**\\n\\t * @dev Invoked to execute actions on the aToken side after a repayment.\\n\\t * @param user The user executing the repayment\\n\\t * @param amount The amount getting repaid\\n\\t **/\\n\\tfunction handleRepayment(address user, uint256 amount) external;\\n\\n\\t/**\\n\\t * @dev Returns the address of the incentives controller contract\\n\\t **/\\n\\tfunction getIncentivesController() external view returns (IAaveIncentivesController);\\n\\n\\t/**\\n\\t * @dev Returns the address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n\\t **/\\n\\tfunction UNDERLYING_ASSET_ADDRESS() external view returns (address);\\n}\\n\",\"keccak256\":\"0x0d1f63164155227cf652eb565cda7320d95c1a1b17ee91d1ca4ee7cc8e389538\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IAaveIncentivesController.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface IAaveIncentivesController {\\n\\tevent RewardsAccrued(address indexed user, uint256 amount);\\n\\n\\tevent RewardsClaimed(address indexed user, address indexed to, uint256 amount);\\n\\n\\tevent RewardsClaimed(address indexed user, address indexed to, address indexed claimer, uint256 amount);\\n\\n\\tevent ClaimerSet(address indexed user, address indexed claimer);\\n\\n\\t/*\\n\\t * @dev Returns the configuration of the distribution for a certain asset\\n\\t * @param asset The address of the reference asset of the distribution\\n\\t * @return The asset index, the emission per second and the last updated timestamp\\n\\t **/\\n\\tfunction getAssetData(address asset) external view returns (uint256, uint256, uint256);\\n\\n\\t/**\\n\\t * @dev Whitelists an address to claim the rewards on behalf of another address\\n\\t * @param user The address of the user\\n\\t * @param claimer The address of the claimer\\n\\t */\\n\\tfunction setClaimer(address user, address claimer) external;\\n\\n\\t/**\\n\\t * @dev Returns the whitelisted claimer for a certain address (0x0 if not set)\\n\\t * @param user The address of the user\\n\\t * @return The claimer address\\n\\t */\\n\\tfunction getClaimer(address user) external view returns (address);\\n\\n\\t/**\\n\\t * @dev Configure assets for a certain rewards emission\\n\\t * @param assets The assets to incentivize\\n\\t * @param emissionsPerSecond The emission for each asset\\n\\t */\\n\\tfunction configureAssets(address[] calldata assets, uint256[] calldata emissionsPerSecond) external;\\n\\n\\t/**\\n\\t * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n\\t * @param user The address of the user\\n\\t **/\\n\\tfunction handleActionBefore(address user) external;\\n\\n\\t/**\\n\\t * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n\\t * @param user The address of the user\\n\\t * @param userBalance The balance of the user of the asset in the lending pool\\n\\t * @param totalSupply The total supply of the asset in the lending pool\\n\\t **/\\n\\tfunction handleActionAfter(address user, uint256 userBalance, uint256 totalSupply) external;\\n\\n\\t/**\\n\\t * @dev Returns the total of rewards of an user, already accrued + not yet accrued\\n\\t * @param user The address of the user\\n\\t * @return The rewards\\n\\t **/\\n\\tfunction getRewardsBalance(address[] calldata assets, address user) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Claims reward for an user, on all the assets of the lending pool, accumulating the pending rewards\\n\\t * @param amount Amount of rewards to claim\\n\\t * @param to Address that will be receiving the rewards\\n\\t * @return Rewards claimed\\n\\t **/\\n\\tfunction claimRewards(address[] calldata assets, uint256 amount, address to) external returns (uint256);\\n\\n\\t/**\\n\\t * @dev Claims reward for an user on behalf, on all the assets of the lending pool, accumulating the pending rewards. The caller must\\n\\t * be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\n\\t * @param amount Amount of rewards to claim\\n\\t * @param user Address to check and claim rewards\\n\\t * @param to Address that will be receiving the rewards\\n\\t * @return Rewards claimed\\n\\t **/\\n\\tfunction claimRewardsOnBehalf(\\n\\t\\taddress[] calldata assets,\\n\\t\\tuint256 amount,\\n\\t\\taddress user,\\n\\t\\taddress to\\n\\t) external returns (uint256);\\n\\n\\t/**\\n\\t * @dev returns the unclaimed rewards of the user\\n\\t * @param user the address of the user\\n\\t * @return the unclaimed user rewards\\n\\t */\\n\\tfunction getUserUnclaimedRewards(address user) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev returns the unclaimed rewards of the user\\n\\t * @param user the address of the user\\n\\t * @param asset The asset to incentivize\\n\\t * @return the user index for the asset\\n\\t */\\n\\tfunction getUserAssetData(address user, address asset) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev for backward compatibility with previous implementation of the Incentives controller\\n\\t */\\n\\tfunction REWARD_TOKEN() external view returns (address);\\n\\n\\t/**\\n\\t * @dev for backward compatibility with previous implementation of the Incentives controller\\n\\t */\\n\\tfunction PRECISION() external view returns (uint8);\\n\\n\\t/**\\n\\t * @dev Gets the distribution end timestamp of the emissions\\n\\t */\\n\\tfunction DISTRIBUTION_END() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x18649f6671a8ce274716b0c212186cae5f9c85e33872aa6a63b287154b982f2a\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IAaveOracle.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\n/**\\n * @title IAaveOracle interface\\n * @notice Interface for the Aave oracle.\\n **/\\n\\ninterface IAaveOracle {\\n\\tfunction BASE_CURRENCY() external view returns (address); // if usd returns 0x0, if eth returns weth address\\n\\n\\tfunction BASE_CURRENCY_UNIT() external view returns (uint256);\\n\\n\\t/***********\\n    @dev returns the asset price in ETH\\n     */\\n\\tfunction getAssetPrice(address asset) external view returns (uint256);\\n\\n\\tfunction getSourceOfAsset(address asset) external view returns (address);\\n}\\n\",\"keccak256\":\"0x829468b50cba8db2f65ec609801fec1847b87ba65f8a6feaa8d71e97acd065c3\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IAaveProtocolDataProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\ninterface IAaveProtocolDataProvider {\\n\\tstruct TokenData {\\n\\t\\tstring symbol;\\n\\t\\taddress tokenAddress;\\n\\t}\\n\\n\\tfunction getAllReservesTokens() external view returns (TokenData[] memory);\\n\\n\\tfunction getAllATokens() external view returns (TokenData[] memory);\\n\\n\\tfunction getReserveConfigurationData(\\n\\t\\taddress asset\\n\\t)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256 decimals,\\n\\t\\t\\tuint256 ltv,\\n\\t\\t\\tuint256 liquidationThreshold,\\n\\t\\t\\tuint256 liquidationBonus,\\n\\t\\t\\tuint256 reserveFactor,\\n\\t\\t\\tbool usageAsCollateralEnabled,\\n\\t\\t\\tbool borrowingEnabled,\\n\\t\\t\\tbool stableBorrowRateEnabled,\\n\\t\\t\\tbool isActive,\\n\\t\\t\\tbool isFrozen\\n\\t\\t);\\n\\n\\tfunction getReserveData(\\n\\t\\taddress asset\\n\\t)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256 availableLiquidity,\\n\\t\\t\\tuint256 totalStableDebt,\\n\\t\\t\\tuint256 totalVariableDebt,\\n\\t\\t\\tuint256 liquidityRate,\\n\\t\\t\\tuint256 variableBorrowRate,\\n\\t\\t\\tuint256 stableBorrowRate,\\n\\t\\t\\tuint256 averageStableBorrowRate,\\n\\t\\t\\tuint256 liquidityIndex,\\n\\t\\t\\tuint256 variableBorrowIndex,\\n\\t\\t\\tuint40 lastUpdateTimestamp\\n\\t\\t);\\n\\n\\tfunction getUserReserveData(\\n\\t\\taddress asset,\\n\\t\\taddress user\\n\\t)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256 currentATokenBalance,\\n\\t\\t\\tuint256 currentStableDebt,\\n\\t\\t\\tuint256 currentVariableDebt,\\n\\t\\t\\tuint256 principalStableDebt,\\n\\t\\t\\tuint256 scaledVariableDebt,\\n\\t\\t\\tuint256 stableBorrowRate,\\n\\t\\t\\tuint256 liquidityRate,\\n\\t\\t\\tuint40 stableRateLastUpdated,\\n\\t\\t\\tbool usageAsCollateralEnabled\\n\\t\\t);\\n\\n\\tfunction getReserveTokensAddresses(\\n\\t\\taddress asset\\n\\t) external view returns (address aTokenAddress, address stableDebtTokenAddress, address variableDebtTokenAddress);\\n}\\n\",\"keccak256\":\"0x16e66cffdbc15affb56356496b1a58fcbf7ac6f0b7f8b0b374805dc88f60d50e\",\"license\":\"MIT\"},\"contracts/interfaces/IChainlinkAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Code from https://github.com/smartcontractkit/chainlink/blob/master/evm-contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"./AggregatorInterface.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\ninterface IChainlinkAggregator is AggregatorInterface, AggregatorV3Interface {}\\n\",\"keccak256\":\"0xcfc3dbbd8052419569c2ba3cedde2193da530ca2e3e5b2e09ca79612f5860727\",\"license\":\"MIT\"},\"contracts/interfaces/IFeeDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"./LockedBalance.sol\\\";\\n\\ninterface IFeeDistribution {\\n\\tstruct RewardData {\\n\\t\\taddress token;\\n\\t\\tuint256 amount;\\n\\t}\\n\\n\\tfunction addReward(address rewardsToken) external;\\n\\n\\tfunction removeReward(address _rewardToken) external;\\n}\\n\",\"keccak256\":\"0x421b5d02ce20947dda76d10f1398c5c075cae789bd453b61935d9b2609c5ac48\",\"license\":\"MIT\"},\"contracts/interfaces/IInitializableAToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport {ILendingPool} from \\\"./ILendingPool.sol\\\";\\nimport {IAaveIncentivesController} from \\\"./IAaveIncentivesController.sol\\\";\\n\\n/**\\n * @title IInitializableAToken\\n * @notice Interface for the initialize function on AToken\\n * @author Aave\\n **/\\ninterface IInitializableAToken {\\n\\t/**\\n\\t * @dev Emitted when an aToken is initialized\\n\\t * @param underlyingAsset The address of the underlying asset\\n\\t * @param pool The address of the associated lending pool\\n\\t * @param treasury The address of the treasury\\n\\t * @param incentivesController The address of the incentives controller for this aToken\\n\\t * @param aTokenDecimals the decimals of the underlying\\n\\t * @param aTokenName the name of the aToken\\n\\t * @param aTokenSymbol the symbol of the aToken\\n\\t * @param params A set of encoded parameters for additional initialization\\n\\t **/\\n\\tevent Initialized(\\n\\t\\taddress indexed underlyingAsset,\\n\\t\\taddress indexed pool,\\n\\t\\taddress treasury,\\n\\t\\taddress incentivesController,\\n\\t\\tuint8 aTokenDecimals,\\n\\t\\tstring aTokenName,\\n\\t\\tstring aTokenSymbol,\\n\\t\\tbytes params\\n\\t);\\n\\n\\t/**\\n\\t * @dev Initializes the aToken\\n\\t * @param pool The address of the lending pool where this aToken will be used\\n\\t * @param treasury The address of the Aave treasury, receiving the fees on this aToken\\n\\t * @param underlyingAsset The address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n\\t * @param incentivesController The smart contract managing potential incentives distribution\\n\\t * @param aTokenDecimals The decimals of the aToken, same as the underlying asset's\\n\\t * @param aTokenName The name of the aToken\\n\\t * @param aTokenSymbol The symbol of the aToken\\n\\t */\\n\\tfunction initialize(\\n\\t\\tILendingPool pool,\\n\\t\\taddress treasury,\\n\\t\\taddress underlyingAsset,\\n\\t\\tIAaveIncentivesController incentivesController,\\n\\t\\tuint8 aTokenDecimals,\\n\\t\\tstring calldata aTokenName,\\n\\t\\tstring calldata aTokenSymbol,\\n\\t\\tbytes calldata params\\n\\t) external;\\n}\\n\",\"keccak256\":\"0xd73daf8d329d2120da2c50492148c0500e34ede39e9fb0b1cca977b4168541da\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/ILendingPool.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {ILendingPoolAddressesProvider} from \\\"./ILendingPoolAddressesProvider.sol\\\";\\nimport {DataTypes} from \\\"../lending/libraries/types/DataTypes.sol\\\";\\n\\ninterface ILendingPool {\\n\\t/**\\n\\t * @dev Emitted on deposit()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address initiating the deposit\\n\\t * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\\n\\t * @param amount The amount deposited\\n\\t * @param referral The referral code used\\n\\t **/\\n\\tevent Deposit(\\n\\t\\taddress indexed reserve,\\n\\t\\taddress user,\\n\\t\\taddress indexed onBehalfOf,\\n\\t\\tuint256 amount,\\n\\t\\tuint16 indexed referral\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted on withdraw()\\n\\t * @param reserve The address of the underlyng asset being withdrawn\\n\\t * @param user The address initiating the withdrawal, owner of aTokens\\n\\t * @param to Address that will receive the underlying\\n\\t * @param amount The amount to be withdrawn\\n\\t **/\\n\\tevent Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n\\t/**\\n\\t * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n\\t * @param reserve The address of the underlying asset being borrowed\\n\\t * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n\\t * initiator of the transaction on flashLoan()\\n\\t * @param onBehalfOf The address that will be getting the debt\\n\\t * @param amount The amount borrowed out\\n\\t * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\\n\\t * @param borrowRate The numeric rate at which the user has borrowed\\n\\t * @param referral The referral code used\\n\\t **/\\n\\tevent Borrow(\\n\\t\\taddress indexed reserve,\\n\\t\\taddress user,\\n\\t\\taddress indexed onBehalfOf,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 borrowRateMode,\\n\\t\\tuint256 borrowRate,\\n\\t\\tuint16 indexed referral\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted on repay()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The beneficiary of the repayment, getting his debt reduced\\n\\t * @param repayer The address of the user initiating the repay(), providing the funds\\n\\t * @param amount The amount repaid\\n\\t **/\\n\\tevent Repay(address indexed reserve, address indexed user, address indexed repayer, uint256 amount);\\n\\n\\t/**\\n\\t * @dev Emitted on swapBorrowRateMode()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address of the user swapping his rate mode\\n\\t * @param rateMode The rate mode that the user wants to swap to\\n\\t **/\\n\\tevent Swap(address indexed reserve, address indexed user, uint256 rateMode);\\n\\n\\t/**\\n\\t * @dev Emitted on setUserUseReserveAsCollateral()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address of the user enabling the usage as collateral\\n\\t **/\\n\\tevent ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n\\t/**\\n\\t * @dev Emitted on setUserUseReserveAsCollateral()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address of the user enabling the usage as collateral\\n\\t **/\\n\\tevent ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n\\t/**\\n\\t * @dev Emitted on rebalanceStableBorrowRate()\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param user The address of the user for which the rebalance has been executed\\n\\t **/\\n\\tevent RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n\\t/**\\n\\t * @dev Emitted on flashLoan()\\n\\t * @param target The address of the flash loan receiver contract\\n\\t * @param initiator The address initiating the flash loan\\n\\t * @param asset The address of the asset being flash borrowed\\n\\t * @param amount The amount flash borrowed\\n\\t * @param premium The fee flash borrowed\\n\\t * @param referralCode The referral code used\\n\\t **/\\n\\tevent FlashLoan(\\n\\t\\taddress indexed target,\\n\\t\\taddress indexed initiator,\\n\\t\\taddress indexed asset,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 premium,\\n\\t\\tuint16 referralCode\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted when the pause is triggered.\\n\\t */\\n\\tevent Paused();\\n\\n\\t/**\\n\\t * @dev Emitted when the pause is lifted.\\n\\t */\\n\\tevent Unpaused();\\n\\n\\t/**\\n\\t * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\\n\\t * LendingPoolCollateral manager using a DELEGATECALL\\n\\t * This allows to have the events in the generated ABI for LendingPool.\\n\\t * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n\\t * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n\\t * @param user The address of the borrower getting liquidated\\n\\t * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n\\t * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\\n\\t * @param liquidator The address of the liquidator\\n\\t * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n\\t * to receive the underlying collateral asset directly\\n\\t **/\\n\\tevent LiquidationCall(\\n\\t\\taddress indexed collateralAsset,\\n\\t\\taddress indexed debtAsset,\\n\\t\\taddress indexed user,\\n\\t\\tuint256 debtToCover,\\n\\t\\tuint256 liquidatedCollateralAmount,\\n\\t\\taddress liquidator,\\n\\t\\tbool receiveAToken\\n\\t);\\n\\n\\t/**\\n\\t * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\\n\\t * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\\n\\t * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\\n\\t * gets added to the LendingPool ABI\\n\\t * @param reserve The address of the underlying asset of the reserve\\n\\t * @param liquidityRate The new liquidity rate\\n\\t * @param stableBorrowRate The new stable borrow rate\\n\\t * @param variableBorrowRate The new variable borrow rate\\n\\t * @param liquidityIndex The new liquidity index\\n\\t * @param variableBorrowIndex The new variable borrow index\\n\\t **/\\n\\tevent ReserveDataUpdated(\\n\\t\\taddress indexed reserve,\\n\\t\\tuint256 liquidityRate,\\n\\t\\tuint256 stableBorrowRate,\\n\\t\\tuint256 variableBorrowRate,\\n\\t\\tuint256 liquidityIndex,\\n\\t\\tuint256 variableBorrowIndex\\n\\t);\\n\\n\\tfunction initialize(ILendingPoolAddressesProvider provider) external;\\n\\n\\t/**\\n\\t * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n\\t * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\n\\t * @param asset The address of the underlying asset to deposit\\n\\t * @param amount The amount to be deposited\\n\\t * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n\\t *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n\\t *   is a different wallet\\n\\t * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n\\t *   0 if the action is executed directly by the user, without any middle-man\\n\\t **/\\n\\tfunction deposit(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\\n\\n\\tfunction depositWithAutoDLP(\\n\\t\\taddress asset,\\n\\t\\tuint256 amount,\\n\\t\\taddress onBehalfOf,\\n\\t\\tuint16 referralCode\\n\\t) external;\\n\\n\\t/**\\n\\t * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n\\t * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n\\t * @param asset The address of the underlying asset to withdraw\\n\\t * @param amount The underlying amount to be withdrawn\\n\\t *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n\\t * @param to Address that will receive the underlying, same as msg.sender if the user\\n\\t *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n\\t *   different wallet\\n\\t * @return The final amount withdrawn\\n\\t **/\\n\\tfunction withdraw(address asset, uint256 amount, address to) external returns (uint256);\\n\\n\\t/**\\n\\t * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n\\t * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\\n\\t * corresponding debt token (StableDebtToken or VariableDebtToken)\\n\\t * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n\\t *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n\\t * @param asset The address of the underlying asset to borrow\\n\\t * @param amount The amount to be borrowed\\n\\t * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n\\t * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n\\t *   0 if the action is executed directly by the user, without any middle-man\\n\\t * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\\n\\t * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n\\t * if he has been given credit delegation allowance\\n\\t **/\\n\\tfunction borrow(\\n\\t\\taddress asset,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 interestRateMode,\\n\\t\\tuint16 referralCode,\\n\\t\\taddress onBehalfOf\\n\\t) external;\\n\\n\\t/**\\n\\t * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n\\t * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n\\t * @param asset The address of the borrowed underlying asset previously borrowed\\n\\t * @param amount The amount to repay\\n\\t * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n\\t * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n\\t * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n\\t * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n\\t * other borrower whose debt should be removed\\n\\t * @return The final amount repaid\\n\\t **/\\n\\tfunction repay(address asset, uint256 amount, uint256 rateMode, address onBehalfOf) external returns (uint256);\\n\\n\\t/**\\n\\t * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\\n\\t * @param asset The address of the underlying asset borrowed\\n\\t * @param rateMode The rate mode that the user wants to swap to\\n\\t **/\\n\\tfunction swapBorrowRateMode(address asset, uint256 rateMode) external;\\n\\n\\t/**\\n\\t * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n\\t * - Users can be rebalanced if the following conditions are satisfied:\\n\\t *     1. Usage ratio is above 95%\\n\\t *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\\n\\t *        borrowed at a stable rate and depositors are not earning enough\\n\\t * @param asset The address of the underlying asset borrowed\\n\\t * @param user The address of the user to be rebalanced\\n\\t **/\\n\\tfunction rebalanceStableBorrowRate(address asset, address user) external;\\n\\n\\t/**\\n\\t * @dev Allows depositors to enable/disable a specific deposited asset as collateral\\n\\t * @param asset The address of the underlying asset deposited\\n\\t * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\\n\\t **/\\n\\tfunction setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n\\t/**\\n\\t * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n\\t * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n\\t *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n\\t * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n\\t * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n\\t * @param user The address of the borrower getting liquidated\\n\\t * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n\\t * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n\\t * to receive the underlying collateral asset directly\\n\\t **/\\n\\tfunction liquidationCall(\\n\\t\\taddress collateralAsset,\\n\\t\\taddress debtAsset,\\n\\t\\taddress user,\\n\\t\\tuint256 debtToCover,\\n\\t\\tbool receiveAToken\\n\\t) external;\\n\\n\\t/**\\n\\t * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\\n\\t * as long as the amount taken plus a fee is returned.\\n\\t * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\\n\\t * For further details please visit https://developers.aave.com\\n\\t * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\\n\\t * @param assets The addresses of the assets being flash-borrowed\\n\\t * @param amounts The amounts amounts being flash-borrowed\\n\\t * @param modes Types of the debt to open if the flash loan is not returned:\\n\\t *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n\\t *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n\\t *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n\\t * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n\\t * @param params Variadic packed params to pass to the receiver as extra information\\n\\t * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n\\t *   0 if the action is executed directly by the user, without any middle-man\\n\\t **/\\n\\tfunction flashLoan(\\n\\t\\taddress receiverAddress,\\n\\t\\taddress[] calldata assets,\\n\\t\\tuint256[] calldata amounts,\\n\\t\\tuint256[] calldata modes,\\n\\t\\taddress onBehalfOf,\\n\\t\\tbytes calldata params,\\n\\t\\tuint16 referralCode\\n\\t) external;\\n\\n\\t/**\\n\\t * @dev Returns the user account data across all the reserves\\n\\t * @param user The address of the user\\n\\t * @return totalCollateralETH the total collateral in ETH of the user\\n\\t * @return totalDebtETH the total debt in ETH of the user\\n\\t * @return availableBorrowsETH the borrowing power left of the user\\n\\t * @return currentLiquidationThreshold the liquidation threshold of the user\\n\\t * @return ltv the loan to value of the user\\n\\t * @return healthFactor the current health factor of the user\\n\\t **/\\n\\tfunction getUserAccountData(\\n\\t\\taddress user\\n\\t)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256 totalCollateralETH,\\n\\t\\t\\tuint256 totalDebtETH,\\n\\t\\t\\tuint256 availableBorrowsETH,\\n\\t\\t\\tuint256 currentLiquidationThreshold,\\n\\t\\t\\tuint256 ltv,\\n\\t\\t\\tuint256 healthFactor\\n\\t\\t);\\n\\n\\tfunction initReserve(\\n\\t\\taddress reserve,\\n\\t\\taddress aTokenAddress,\\n\\t\\taddress stableDebtAddress,\\n\\t\\taddress variableDebtAddress,\\n\\t\\taddress interestRateStrategyAddress\\n\\t) external;\\n\\n\\tfunction setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress) external;\\n\\n\\tfunction setConfiguration(address reserve, uint256 configuration) external;\\n\\n\\t/**\\n\\t * @dev Returns the configuration of the reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The configuration of the reserve\\n\\t **/\\n\\tfunction getConfiguration(address asset) external view returns (DataTypes.ReserveConfigurationMap memory);\\n\\n\\t/**\\n\\t * @dev Returns the configuration of the user across all the reserves\\n\\t * @param user The user address\\n\\t * @return The configuration of the user\\n\\t **/\\n\\tfunction getUserConfiguration(address user) external view returns (DataTypes.UserConfigurationMap memory);\\n\\n\\t/**\\n\\t * @dev Returns the normalized income normalized income of the reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The reserve's normalized income\\n\\t */\\n\\tfunction getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns the normalized variable debt per unit of asset\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The reserve normalized variable debt\\n\\t */\\n\\tfunction getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns the state and configuration of the reserve\\n\\t * @param asset The address of the underlying asset of the reserve\\n\\t * @return The state of the reserve\\n\\t **/\\n\\tfunction getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n\\tfunction finalizeTransfer(\\n\\t\\taddress asset,\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 balanceFromAfter,\\n\\t\\tuint256 balanceToBefore\\n\\t) external;\\n\\n\\tfunction getReservesList() external view returns (address[] memory);\\n\\n\\tfunction getAddressesProvider() external view returns (ILendingPoolAddressesProvider);\\n\\n\\tfunction setPause(bool val) external;\\n\\n\\tfunction paused() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd7d7999d232a7a01206cfce2bb140ecb46778decac322d9b12a72976b5b34d5c\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/ILendingPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\n/**\\n * @title LendingPoolAddressesProvider contract\\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\\n * - Owned by the Aave Governance\\n * @author Aave\\n **/\\ninterface ILendingPoolAddressesProvider {\\n\\tevent MarketIdSet(string newMarketId);\\n\\tevent LendingPoolUpdated(address indexed newAddress);\\n\\tevent ConfigurationAdminUpdated(address indexed newAddress);\\n\\tevent EmergencyAdminUpdated(address indexed newAddress);\\n\\tevent LendingPoolConfiguratorUpdated(address indexed newAddress);\\n\\tevent LendingPoolCollateralManagerUpdated(address indexed newAddress);\\n\\tevent PriceOracleUpdated(address indexed newAddress);\\n\\tevent LendingRateOracleUpdated(address indexed newAddress);\\n\\tevent ProxyCreated(bytes32 id, address indexed newAddress);\\n\\tevent AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\\n\\n\\tfunction getMarketId() external view returns (string memory);\\n\\n\\tfunction setMarketId(string calldata marketId) external;\\n\\n\\tfunction setAddress(bytes32 id, address newAddress) external;\\n\\n\\tfunction setAddressAsProxy(bytes32 id, address impl) external;\\n\\n\\tfunction getAddress(bytes32 id) external view returns (address);\\n\\n\\tfunction getLendingPool() external view returns (address);\\n\\n\\tfunction setLendingPoolImpl(address pool) external;\\n\\n\\tfunction getLendingPoolConfigurator() external view returns (address);\\n\\n\\tfunction setLendingPoolConfiguratorImpl(address configurator) external;\\n\\n\\tfunction getLendingPoolCollateralManager() external view returns (address);\\n\\n\\tfunction setLendingPoolCollateralManager(address manager) external;\\n\\n\\tfunction getPoolAdmin() external view returns (address);\\n\\n\\tfunction setPoolAdmin(address admin) external;\\n\\n\\tfunction getEmergencyAdmin() external view returns (address);\\n\\n\\tfunction setEmergencyAdmin(address admin) external;\\n\\n\\tfunction getPriceOracle() external view returns (address);\\n\\n\\tfunction setPriceOracle(address priceOracle) external;\\n\\n\\tfunction getLendingRateOracle() external view returns (address);\\n\\n\\tfunction setLendingRateOracle(address lendingRateOracle) external;\\n\\n\\tfunction getLiquidationFeeTo() external view returns (address);\\n\\n\\tfunction setLiquidationFeeTo(address liquidationFeeTo) external;\\n}\\n\",\"keccak256\":\"0x79e182f661632c6cd8cd15b460c7835f1eda952dd14bc28cf4966f37d4cb2e40\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IMiddleFeeDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"./LockedBalance.sol\\\";\\nimport {IFeeDistribution} from \\\"./IMultiFeeDistribution.sol\\\";\\n\\ninterface IMiddleFeeDistribution is IFeeDistribution {\\n\\tfunction forwardReward(address[] memory _rewardTokens) external;\\n\\n\\tfunction getPrntTokenAddress() external view returns (address);\\n\\n\\tfunction getMultiFeeDistributionAddress() external view returns (address);\\n\\n\\tfunction operationExpenseRatio() external view returns (uint256);\\n\\n\\tfunction operationExpenses() external view returns (address);\\n\\n\\tfunction isRewardToken(address) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xb688e0d696dc8cdd48ef421fa3f41e5c978dd538cf576eb751636f0f32d749e6\",\"license\":\"MIT\"},\"contracts/interfaces/IMintableToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IMintableToken is IERC20 {\\n\\tfunction mint(address _receiver, uint256 _amount) external returns (bool);\\n\\n\\tfunction burn(uint256 _amount) external returns (bool);\\n\\n\\tfunction setMinter(address _minter) external returns (bool);\\n\\n\\tfunction priceProvider() external view returns (address);\\n}\\n\",\"keccak256\":\"0x095eacfa4ddae47eb3053bc93643d78a683b6006009ce949ea8addf76c886aec\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IMultiFeeDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"./LockedBalance.sol\\\";\\nimport \\\"./IFeeDistribution.sol\\\";\\nimport \\\"./IMintableToken.sol\\\";\\n\\ninterface IMultiFeeDistribution is IFeeDistribution {\\n\\tfunction exit(bool claimRewards) external;\\n\\n\\tfunction stake(uint256 amount, address onBehalfOf, uint256 typeIndex) external;\\n\\n\\tfunction prntToken() external view returns (IMintableToken);\\n\\n\\tfunction getPriceProvider() external view returns (address);\\n\\n\\tfunction lockInfo(address user) external view returns (LockedBalance[] memory);\\n\\n\\tfunction autocompoundEnabled(address user) external view returns (bool);\\n\\n\\tfunction defaultLockIndex(address _user) external view returns (uint256);\\n\\n\\tfunction autoRelockDisabled(address user) external view returns (bool);\\n\\n\\tfunction totalBalance(address user) external view returns (uint256);\\n\\n\\tfunction lockedBalance(address user) external view returns (uint256);\\n\\n\\tfunction lockedBalances(\\n\\t\\taddress user\\n\\t) external view returns (uint256, uint256, uint256, uint256, LockedBalance[] memory);\\n\\n\\tfunction getBalances(address _user) external view returns (Balances memory);\\n\\n\\tfunction zapVestingToLp(address _address) external returns (uint256);\\n\\n\\tfunction claimableRewards(address account) external view returns (IFeeDistribution.RewardData[] memory rewards);\\n\\n\\tfunction setDefaultRelockTypeIndex(uint256 _index) external;\\n\\n\\tfunction daoTreasury() external view returns (address);\\n\\n\\tfunction stakingToken() external view returns (address);\\n\\n\\tfunction userSlippage(address) external view returns (uint256);\\n\\n\\tfunction claimFromConverter(address) external;\\n\\n\\tfunction vestTokens(address user, uint256 amount, bool withPenalty) external;\\n}\\n\\ninterface IMFDPlus is IMultiFeeDistribution {\\n\\tfunction getLastClaimTime(address _user) external returns (uint256);\\n\\n\\tfunction claimBounty(address _user, bool _execute) external returns (bool issueBaseBounty);\\n\\n\\tfunction claimCompound(address _user, bool _execute, uint256 _slippage) external returns (uint256 bountyAmt);\\n\\n\\tfunction setAutocompound(bool _newVal) external;\\n\\n\\tfunction getAutocompoundEnabled(address _user) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x6eae75bc31ca20b94f425a2ba2aede758baf09fc2ae38f630a38abf4ff15a72c\",\"license\":\"MIT\"},\"contracts/interfaces/IPriceProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\ninterface IPriceProvider {\\n\\tfunction getTokenPrice() external view returns (uint256);\\n\\n\\tfunction getTokenPriceUsd() external view returns (uint256);\\n\\n\\tfunction getLpTokenPrice() external view returns (uint256);\\n\\n\\tfunction getLpTokenPriceUsd() external view returns (uint256);\\n\\n\\tfunction decimals() external view returns (uint256);\\n\\n\\tfunction update() external;\\n\\n\\tfunction baseAssetChainlinkAdapter() external view returns (address);\\n}\\n\",\"keccak256\":\"0x8f5da67830c8d8dce0eebeb5626c9e1c2ed86132a8ae01e1fc6aa48cb60ae221\",\"license\":\"MIT\"},\"contracts/interfaces/IScaledBalanceToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\ninterface IScaledBalanceToken {\\n\\t/**\\n\\t * @dev Returns the scaled balance of the user. The scaled balance is the sum of all the\\n\\t * updated stored balance divided by the reserve's liquidity index at the moment of the update\\n\\t * @param user The user whose balance is calculated\\n\\t * @return The scaled balance of the user\\n\\t **/\\n\\tfunction scaledBalanceOf(address user) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Returns the scaled balance of the user and the scaled total supply.\\n\\t * @param user The address of the user\\n\\t * @return The scaled balance of the user\\n\\t * @return The scaled balance and the scaled total supply\\n\\t **/\\n\\tfunction getScaledUserBalanceAndSupply(address user) external view returns (uint256, uint256);\\n\\n\\t/**\\n\\t * @dev Returns the scaled total supply of the variable debt token. Represents sum(debt/index)\\n\\t * @return The scaled total supply\\n\\t **/\\n\\tfunction scaledTotalSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x20a9147e059d362660996b4922825860e759019f4cbbf293d3f4f2ccc7dadc57\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/LockedBalance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\nstruct LockedBalance {\\n\\tuint256 amount;\\n\\tuint256 unlockTime;\\n\\tuint256 multiplier;\\n\\tuint256 duration;\\n}\\n\\nstruct EarnedBalance {\\n\\tuint256 amount;\\n\\tuint256 unlockTime;\\n\\tuint256 penalty;\\n}\\n\\nstruct Reward {\\n\\tuint256 periodFinish;\\n\\tuint256 rewardPerSecond;\\n\\tuint256 lastUpdateTime;\\n\\tuint256 rewardPerTokenStored;\\n\\t// tracks already-added balances to handle accrued interest in aToken rewards\\n\\t// for the stakingToken this value is unused and will always be 0\\n\\tuint256 balance;\\n}\\n\\nstruct Balances {\\n\\tuint256 total; // sum of earnings and lockings; no use when LP and PRNT is different\\n\\tuint256 unlocked; // PRNT token\\n\\tuint256 locked; // LP token or PRNT token\\n\\tuint256 lockedWithMultiplier; // Multiplied locked amount\\n\\tuint256 earned; // PRNT token\\n}\\n\",\"keccak256\":\"0x6dbc04232605f1510a1db1b9c9467bb99cda33ac2335775e5faae2cc7d4eef07\",\"license\":\"MIT\"},\"contracts/lending/libraries/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nlibrary DataTypes {\\n\\t// refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\\n\\tstruct ReserveData {\\n\\t\\t//stores the reserve configuration\\n\\t\\tReserveConfigurationMap configuration;\\n\\t\\t//the liquidity index. Expressed in ray\\n\\t\\tuint128 liquidityIndex;\\n\\t\\t//variable borrow index. Expressed in ray\\n\\t\\tuint128 variableBorrowIndex;\\n\\t\\t//the current supply rate. Expressed in ray\\n\\t\\tuint128 currentLiquidityRate;\\n\\t\\t//the current variable borrow rate. Expressed in ray\\n\\t\\tuint128 currentVariableBorrowRate;\\n\\t\\t//the current stable borrow rate. Expressed in ray\\n\\t\\tuint128 currentStableBorrowRate;\\n\\t\\tuint40 lastUpdateTimestamp;\\n\\t\\t//tokens addresses\\n\\t\\taddress aTokenAddress;\\n\\t\\taddress stableDebtTokenAddress;\\n\\t\\taddress variableDebtTokenAddress;\\n\\t\\t//address of the interest rate strategy\\n\\t\\taddress interestRateStrategyAddress;\\n\\t\\t//the id of the reserve. Represents the position in the list of the active reserves\\n\\t\\tuint8 id;\\n\\t}\\n\\n\\tstruct ReserveConfigurationMap {\\n\\t\\t//bit 0-15: LTV\\n\\t\\t//bit 16-31: Liq. threshold\\n\\t\\t//bit 32-47: Liq. bonus\\n\\t\\t//bit 48-55: Decimals\\n\\t\\t//bit 56: Reserve is active\\n\\t\\t//bit 57: reserve is frozen\\n\\t\\t//bit 58: borrowing is enabled\\n\\t\\t//bit 59: stable rate borrowing enabled\\n\\t\\t//bit 60-63: reserved\\n\\t\\t//bit 64-79: reserve factor\\n\\t\\tuint256 data;\\n\\t}\\n\\n\\tstruct UserConfigurationMap {\\n\\t\\tuint256 data;\\n\\t}\\n\\n\\tenum InterestRateMode {\\n\\t\\tNONE,\\n\\t\\tSTABLE,\\n\\t\\tVARIABLE\\n\\t}\\n}\\n\",\"keccak256\":\"0xd0e55d855509f898d810479026993d64b9586e1af35816f1d2498ac27e7bcf69\",\"license\":\"agpl-3.0\"},\"contracts/prime/libraries/RecoverERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/// @title RecoverERC20 contract\\n/// @author Prime Devs\\n/// @dev All function calls are currently implemented without side effects\\ncontract RecoverERC20 {\\n\\tusing SafeERC20 for IERC20;\\n\\n\\t/// @notice Emitted when ERC20 token is recovered\\n\\tevent Recovered(address indexed token, uint256 amount);\\n\\n\\t/**\\n\\t * @notice Added to support recovering LP Rewards from other systems such as BAL to be distributed to holders\\n\\t */\\n\\tfunction _recoverERC20(address tokenAddress, uint256 tokenAmount) internal {\\n\\t\\tIERC20(tokenAddress).safeTransfer(msg.sender, tokenAmount);\\n\\t\\temit Recovered(tokenAddress, tokenAmount);\\n\\t}\\n}\\n\",\"keccak256\":\"0x722c49abbca1b04a363084d729efbf41aa6ac01bff477c39b754e22a10e698df\",\"license\":\"MIT\"},\"contracts/prime/staking/MiddleFeeDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport {RecoverERC20} from \\\"../libraries/RecoverERC20.sol\\\";\\nimport {IMiddleFeeDistribution} from \\\"../../interfaces/IMiddleFeeDistribution.sol\\\";\\nimport {IMultiFeeDistribution} from \\\"../../interfaces/IMultiFeeDistribution.sol\\\";\\nimport {IMintableToken} from \\\"../../interfaces/IMintableToken.sol\\\";\\nimport {IAaveOracle} from \\\"../../interfaces/IAaveOracle.sol\\\";\\nimport {IAToken} from \\\"../../interfaces/IAToken.sol\\\";\\nimport {IChainlinkAggregator} from \\\"../../interfaces/IChainlinkAggregator.sol\\\";\\nimport {IAaveProtocolDataProvider} from \\\"../../interfaces/IAaveProtocolDataProvider.sol\\\";\\nimport {IPriceProvider} from \\\"../../interfaces/IPriceProvider.sol\\\";\\n\\n/// @title Fee distributor inside\\n/// @author Prime\\ncontract MiddleFeeDistribution is IMiddleFeeDistribution, Initializable, OwnableUpgradeable, RecoverERC20 {\\n\\tusing SafeERC20 for IERC20;\\n\\n\\t/// @notice PRNT token\\n\\tIMintableToken public prntToken;\\n\\n\\t/// @notice Fee distributor contract for earnings and PRNT lockings\\n\\tIMultiFeeDistribution public multiFeeDistribution;\\n\\n\\t/// @notice Reward ratio for operation expenses\\n\\tuint256 public operationExpenseRatio;\\n\\n\\tuint256 public constant RATIO_DIVISOR = 10000;\\n\\n\\tuint8 public constant DECIMALS = 18;\\n\\n\\tmapping(address => bool) public isRewardToken;\\n\\n\\t/// @notice Operation Expense account\\n\\taddress public operationExpenses;\\n\\n\\t/// @notice Admin address\\n\\taddress public admin;\\n\\n\\t// AAVE Oracle address\\n\\taddress internal _aaveOracle;\\n\\n\\t// AAVE Protocol Data Provider address\\n\\tIAaveProtocolDataProvider public aaveProtocolDataProvider;\\n\\n\\t/********************** Events ***********************/\\n\\n\\t/// @notice Emitted when reward token is forwarded\\n\\tevent ForwardReward(address indexed token, uint256 amount);\\n\\n\\t/// @notice Emitted when operation expenses is set\\n\\tevent OperationExpensesUpdated(address indexed _operationExpenses, uint256 _operationExpenseRatio);\\n\\n\\tevent NewTransferAdded(address indexed asset, uint256 lpUsdValue);\\n\\n\\tevent AdminUpdated(address indexed _configurator);\\n\\n\\tevent RewardsUpdated(address indexed _rewardsToken);\\n\\n\\tevent ProtocolDataProviderUpdated(address indexed _providerAddress);\\n\\n\\t/********************** Errors ***********************/\\n\\n\\terror ZeroAddress();\\n\\n\\terror IncompatibleToken();\\n\\n\\terror InvalidRatio();\\n\\n\\terror NotMFD();\\n\\n\\terror InsufficientPermission();\\n\\n\\t/**\\n\\t * @dev Throws if called by any account other than the admin or owner.\\n\\t */\\n\\tmodifier onlyAdminOrOwner() {\\n\\t\\tif (admin != _msgSender() && owner() != _msgSender()) revert InsufficientPermission();\\n\\t\\t_;\\n\\t}\\n\\n\\tconstructor() {\\n\\t\\t_disableInitializers();\\n\\t}\\n\\n\\t/**\\n\\t * @notice Initializer\\n\\t * @param prntToken_ PRNT address\\n\\t * @param aaveOracle_ Aave oracle address\\n\\t * @param multiFeeDistribution_ Multi fee distribution contract\\n\\t */\\n\\tfunction initialize(\\n\\t\\tIMintableToken prntToken_,\\n\\t\\taddress aaveOracle_,\\n\\t\\tIMultiFeeDistribution multiFeeDistribution_,\\n\\t\\tIAaveProtocolDataProvider aaveProtocolDataProvider_\\n\\t) public initializer {\\n\\t\\tif (aaveOracle_ == address(0)) revert ZeroAddress();\\n\\t\\tif (address(prntToken_) == address(0)) revert ZeroAddress();\\n\\t\\tif (address(multiFeeDistribution_) == address(0)) revert ZeroAddress();\\n\\t\\tif (address(aaveProtocolDataProvider_) == address(0)) revert ZeroAddress();\\n\\n\\t\\t__Ownable_init();\\n\\n\\t\\tprntToken = prntToken_;\\n\\t\\t_aaveOracle = aaveOracle_;\\n\\t\\tmultiFeeDistribution = multiFeeDistribution_;\\n\\t\\taaveProtocolDataProvider = aaveProtocolDataProvider_;\\n\\n\\t\\tadmin = msg.sender;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Set operation expenses account\\n\\t * @param _operationExpenses Address to receive operation expenses\\n\\t * @param _operationExpenseRatio Proportion of operation expense\\n\\t */\\n\\tfunction setOperationExpenses(address _operationExpenses, uint256 _operationExpenseRatio) external onlyOwner {\\n\\t\\tif (_operationExpenseRatio > RATIO_DIVISOR) revert InvalidRatio();\\n\\t\\tif (_operationExpenses == address(0)) revert ZeroAddress();\\n\\t\\toperationExpenses = _operationExpenses;\\n\\t\\toperationExpenseRatio = _operationExpenseRatio;\\n\\t\\temit OperationExpensesUpdated(_operationExpenses, _operationExpenseRatio);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Sets pool configurator as admin.\\n\\t * @param _configurator Configurator address\\n\\t */\\n\\tfunction setAdmin(address _configurator) external onlyOwner {\\n\\t\\tif (_configurator == address(0)) revert ZeroAddress();\\n\\t\\tadmin = _configurator;\\n\\t\\temit AdminUpdated(_configurator);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Set the Protocol Data Provider address\\n\\t * @param _providerAddress The address of the protocol data provider contract\\n\\t */\\n\\tfunction setProtocolDataProvider(IAaveProtocolDataProvider _providerAddress) external onlyOwner {\\n\\t\\tif (address(_providerAddress) == address(0)) revert ZeroAddress();\\n\\t\\taaveProtocolDataProvider = _providerAddress;\\n\\t\\temit ProtocolDataProviderUpdated(address(_providerAddress));\\n\\t}\\n\\n\\t/**\\n\\t * @notice Add a new reward token to be distributed to stakers\\n\\t * @param _rewardsToken address of the reward token\\n\\t */\\n\\tfunction addReward(address _rewardsToken) external onlyAdminOrOwner {\\n\\t\\tif (msg.sender != admin) {\\n\\t\\t\\ttry IAToken(_rewardsToken).UNDERLYING_ASSET_ADDRESS() returns (address underlying) {\\n\\t\\t\\t\\t(address aTokenAddress, , ) = aaveProtocolDataProvider.getReserveTokensAddresses(underlying);\\n\\t\\t\\t\\tif (aTokenAddress == address(0)) revert IncompatibleToken();\\n\\t\\t\\t} catch {\\n\\t\\t\\t\\t// _rewardsToken is not an rToken, do nothing\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tmultiFeeDistribution.addReward(_rewardsToken);\\n\\t\\tisRewardToken[_rewardsToken] = true;\\n\\t\\temit RewardsUpdated(_rewardsToken);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Remove an existing reward token\\n\\t */\\n\\tfunction removeReward(address _rewardsToken) external onlyAdminOrOwner {\\n\\t\\tif (_rewardsToken == address(0)) revert ZeroAddress();\\n\\t\\tmultiFeeDistribution.removeReward(_rewardsToken);\\n\\t\\tisRewardToken[_rewardsToken] = false;\\n\\t\\temit RewardsUpdated(_rewardsToken);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Run by MFD to pull pending platform revenue\\n\\t * @param _rewardTokens an array of reward token addresses\\n\\t */\\n\\tfunction forwardReward(address[] memory _rewardTokens) external {\\n\\t\\tif (msg.sender != address(multiFeeDistribution)) revert NotMFD();\\n\\n\\t\\tuint256 length = _rewardTokens.length;\\n\\t\\tfor (uint256 i = 0; i < length; ) {\\n\\t\\t\\taddress rewardToken = _rewardTokens[i];\\n\\t\\t\\tuint256 total = IERC20(rewardToken).balanceOf(address(this));\\n\\n\\t\\t\\tif (operationExpenses != address(0) && operationExpenseRatio != 0) {\\n\\t\\t\\t\\tuint256 opExAmount = (total * operationExpenseRatio) / RATIO_DIVISOR;\\n\\t\\t\\t\\tif (opExAmount != 0) {\\n\\t\\t\\t\\t\\tIERC20(rewardToken).safeTransfer(operationExpenses, opExAmount);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\ttotal = IERC20(rewardToken).balanceOf(address(this));\\n\\t\\t\\tIERC20(rewardToken).safeTransfer(address(multiFeeDistribution), total);\\n\\n\\t\\t\\tif (rewardToken == address(prntToken)) {\\n\\t\\t\\t\\tmultiFeeDistribution.vestTokens(address(multiFeeDistribution), total, false);\\n\\t\\t\\t}\\n\\n\\t\\t\\temit ForwardReward(rewardToken, total);\\n\\n\\t\\t\\t_emitNewTransferAdded(rewardToken, total);\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns PRNT token address.\\n\\t * @return PRNT token address\\n\\t */\\n\\tfunction getPrntTokenAddress() external view returns (address) {\\n\\t\\treturn address(prntToken);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns MFD address.\\n\\t * @return MFD address\\n\\t */\\n\\tfunction getMultiFeeDistributionAddress() external view returns (address) {\\n\\t\\treturn address(multiFeeDistribution);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Emit event for new asset reward\\n\\t * @param asset address of transfer assset\\n\\t * @param lpReward amount of rewards\\n\\t */\\n\\tfunction _emitNewTransferAdded(address asset, uint256 lpReward) internal {\\n\\t\\tuint256 lpUsdValue;\\n\\t\\tif (asset != address(prntToken)) {\\n\\t\\t\\ttry IAToken(asset).UNDERLYING_ASSET_ADDRESS() returns (address underlyingAddress) {\\n\\t\\t\\t\\tif (underlyingAddress != address(prntToken)) {\\n\\t\\t\\t\\t\\tuint256 assetPrice = IAaveOracle(_aaveOracle).getAssetPrice(underlyingAddress);\\n\\t\\t\\t\\t\\taddress sourceOfAsset = IAaveOracle(_aaveOracle).getSourceOfAsset(underlyingAddress);\\n\\t\\t\\t\\t\\tuint8 priceDecimal = IChainlinkAggregator(sourceOfAsset).decimals();\\n\\t\\t\\t\\t\\tuint8 assetDecimals = IERC20Metadata(asset).decimals();\\n\\t\\t\\t\\t\\tlpUsdValue = (assetPrice * lpReward * (10 ** DECIMALS)) / (10 ** priceDecimal) / (10 ** assetDecimals);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tuint256 assetPrice = IPriceProvider(IMintableToken(prntToken).priceProvider()).getTokenPriceUsd();\\n\\t\\t\\t\\t\\tuint256 priceDecimal = IPriceProvider(IMintableToken(prntToken).priceProvider()).decimals();\\n\\t\\t\\t\\t\\tuint8 assetDecimals = IERC20Metadata(asset).decimals();\\n\\t\\t\\t\\t\\tlpUsdValue = (assetPrice * lpReward * (10 ** DECIMALS)) / (10 ** priceDecimal) / (10 ** assetDecimals);\\n\\t\\t\\t\\t}\\n\\t\\t\\t} catch {\\n\\t\\t\\t\\tuint256 assetPrice = IAaveOracle(_aaveOracle).getAssetPrice(asset);\\n\\t\\t\\t\\taddress sourceOfAsset = IAaveOracle(_aaveOracle).getSourceOfAsset(asset);\\n\\t\\t\\t\\tuint8 priceDecimal = IChainlinkAggregator(sourceOfAsset).decimals();\\n\\t\\t\\t\\tuint8 assetDecimals = IERC20Metadata(asset).decimals();\\n\\t\\t\\t\\tlpUsdValue = (assetPrice * lpReward * (10 ** DECIMALS)) / (10 ** priceDecimal) / (10 ** assetDecimals);\\n\\t\\t\\t}\\n\\t\\t\\temit NewTransferAdded(asset, lpUsdValue);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Added to support recovering any ERC20 tokens inside the contract\\n\\t * @param tokenAddress address of erc20 token to recover\\n\\t * @param tokenAmount amount to recover\\n\\t */\\n\\tfunction recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyOwner {\\n\\t\\t_recoverERC20(tokenAddress, tokenAmount);\\n\\t}\\n}\\n\",\"keccak256\":\"0x9c8f4937ebdc046ea8f8f2cf74c09b03eee46abe98fa8ba8b2441ac6b20399ea\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001961001e565b6100dd565b600054610100900460ff161561008a5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff908116146100db576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b611ef9806100ec6000396000f3fe608060405234801561001057600080fd5b50600436106101825760003560e01c80639c9b2e21116100d8578063cd57ed6c1161008c578063f2fde38b11610066578063f2fde38b1461031b578063f851a4401461032e578063f8c8765e1461034157600080fd5b8063cd57ed6c146102ee578063dd36bd0e146102ff578063e4501d291461030857600080fd5b8063a4d5e67c116100bd578063a4d5e67c14610295578063b5fd73f8146102a8578063c8d508b0146102db57600080fd5b80639c9b2e211461026f578063a3551c221461028257600080fd5b80636a7e9f331161013a5780638980f11f116101145780638980f11f146102385780638da5cb5b1461024b57806398f442bb1461025c57600080fd5b80636a7e9f3314610206578063704b6c021461021d578063715018a61461023057600080fd5b80632ef196c41161016b5780632ef196c4146101bb578063542b3cb8146101e05780635f9d4d2e146101f357600080fd5b806308c51c65146101875780632e0f26251461019c575b600080fd5b61019a610195366004611a9d565b610354565b005b6101a4601281565b60405160ff90911681526020015b60405180910390f35b6065546001600160a01b03165b6040516001600160a01b0390911681526020016101b2565b6066546101c8906001600160a01b031681565b606c546101c8906001600160a01b031681565b61020f61271081565b6040519081526020016101b2565b61019a61022b366004611b62565b610611565b61019a61068a565b61019a610246366004611b86565b61069e565b6033546001600160a01b03166101c8565b61019a61026a366004611b86565b6106b4565b61019a61027d366004611b62565b61077a565b6065546101c8906001600160a01b031681565b61019a6102a3366004611b62565b6109c8565b6102cb6102b6366004611b62565b60686020526000908152604090205460ff1681565b60405190151581526020016101b2565b6069546101c8906001600160a01b031681565b6066546001600160a01b03166101c8565b61020f60675481565b61019a610316366004611b62565b610af4565b61019a610329366004611b62565b610b6d565b606a546101c8906001600160a01b031681565b61019a61034f366004611bb2565b610c02565b6066546001600160a01b03163314610398576040517ff3320bfe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805160005b8181101561060c5760008382815181106103b9576103b9611c0e565b60209081029190910101516040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa15801561040e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104329190611c24565b6069549091506001600160a01b031615801590610450575060675415155b15610496576000612710606754836104689190611c53565b6104729190611c72565b9050801561049457606954610494906001600160a01b03858116911683610e17565b505b6040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa1580156104da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104fe9190611c24565b60665490915061051b906001600160a01b03848116911683610e17565b6065546001600160a01b03838116911614156105b5576066546040517ea4173a0000000000000000000000000000000000000000000000000000000081526001600160a01b039091166004820181905260248201839052600060448301529062a4173a90606401600060405180830381600087803b15801561059c57600080fd5b505af11580156105b0573d6000803e3d6000fd5b505050505b816001600160a01b03167faa179256a8b0e52834b8e6c37fdcb2b72806c4b473622a9e844aa66cbe1a1990826040516105f091815260200190565b60405180910390a26106028282610e97565b505060010161039d565b505050565b6106196115f4565b6001600160a01b0381166106405760405163d92e233d60e01b815260040160405180910390fd5b606a80546001600160a01b0319166001600160a01b0383169081179091556040517f54e4612788f90384e6843298d7854436f3a585b2c3831ab66abf1de63bfa6c2d90600090a250565b6106926115f4565b61069c600061164e565b565b6106a66115f4565b6106b082826116a0565b5050565b6106bc6115f4565b6127108111156106f8576040517f648564d300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03821661071f5760405163d92e233d60e01b815260040160405180910390fd5b606980546001600160a01b0319166001600160a01b03841690811790915560678290556040518281527fba1e229a9495e21f509ea04bfdca8f222980ac1cb76333de06f6833f1e3f62d6906020015b60405180910390a25050565b606a546001600160a01b031633148015906107a057506033546001600160a01b03163314155b156107be57604051630deda90360e41b815260040160405180910390fd5b606a546001600160a01b0316331461090357806001600160a01b031663b16a19de6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561082a575060408051601f3d908101601f1916820190925261082791810190611c94565b60015b61083357610903565b606c546040517fd2493b6c0000000000000000000000000000000000000000000000000000000081526001600160a01b038381166004830152600092169063d2493b6c90602401606060405180830381865afa158015610897573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bb9190611cb1565b50909150506001600160a01b038116610900576040517f998d375300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505b6066546040517f9c9b2e210000000000000000000000000000000000000000000000000000000081526001600160a01b03838116600483015290911690639c9b2e2190602401600060405180830381600087803b15801561096357600080fd5b505af1158015610977573d6000803e3d6000fd5b5050506001600160a01b038216600081815260686020526040808220805460ff19166001179055519192507f05f3326e0527f309d4015dee3bc3f36e650b53fc823bab69c99847814acfafdf91a250565b606a546001600160a01b031633148015906109ee57506033546001600160a01b03163314155b15610a0c57604051630deda90360e41b815260040160405180910390fd5b6001600160a01b038116610a335760405163d92e233d60e01b815260040160405180910390fd5b6066546040517fa4d5e67c0000000000000000000000000000000000000000000000000000000081526001600160a01b0383811660048301529091169063a4d5e67c90602401600060405180830381600087803b158015610a9357600080fd5b505af1158015610aa7573d6000803e3d6000fd5b505050506001600160a01b038116600081815260686020526040808220805460ff19169055517f05f3326e0527f309d4015dee3bc3f36e650b53fc823bab69c99847814acfafdf9190a250565b610afc6115f4565b6001600160a01b038116610b235760405163d92e233d60e01b815260040160405180910390fd5b606c80546001600160a01b0319166001600160a01b0383169081179091556040517fab1c1ea2d4e8015738584c8adccf9a8f988d99eb864bbfac9eda1e06dad405ae90600090a250565b610b756115f4565b6001600160a01b038116610bf65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b610bff8161164e565b50565b600054610100900460ff1615808015610c225750600054600160ff909116105b80610c3c5750303b158015610c3c575060005460ff166001145b610cae5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610bed565b6000805460ff191660011790558015610cd1576000805461ff0019166101001790555b6001600160a01b038416610cf85760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b038516610d1f5760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b038316610d465760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b038216610d6d5760405163d92e233d60e01b815260040160405180910390fd5b610d756116ef565b606580546001600160a01b038088166001600160a01b031992831617909255606b805487841690831617905560668054868416908316179055606c805492851692821692909217909155606a8054909116331790558015610e10576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905261060c908490611762565b6065546000906001600160a01b0384811691161461060c57826001600160a01b031663b16a19de6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610f09575060408051601f3d908101601f19168201909252610f0691810190611c94565b60015b61111357606b5460405163b3596f0760e01b81526001600160a01b038581166004830152600092169063b3596f0790602401602060405180830381865afa158015610f58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7c9190611c24565b606b54604051630495f95f60e51b81526001600160a01b038781166004830152929350600092909116906392bf2be090602401602060405180830381865afa158015610fcc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff09190611c94565b90506000816001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611032573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110569190611cfe565b90506000866001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611098573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110bc9190611cfe565b90506110c981600a611e07565b6110d483600a611e07565b6110e06012600a611e07565b6110ea8988611c53565b6110f49190611c53565b6110fe9190611c72565b6111089190611c72565b9450505050506115ac565b6065546001600160a01b0382811691161461132e57606b5460405163b3596f0760e01b81526001600160a01b038381166004830152600092169063b3596f0790602401602060405180830381865afa158015611173573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111979190611c24565b606b54604051630495f95f60e51b81526001600160a01b038581166004830152929350600092909116906392bf2be090602401602060405180830381865afa1580156111e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120b9190611c94565b90506000816001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561124d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112719190611cfe565b90506000876001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d79190611cfe565b90506112e481600a611e07565b6112ef83600a611e07565b6112fb6012600a611e07565b6113058a88611c53565b61130f9190611c53565b6113199190611c72565b6113239190611c72565b9550505050506115aa565b606554604080517fb888879e00000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163b888879e9160048083019260209291908290030181865afa158015611391573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b59190611c94565b6001600160a01b0316636d2ed1846040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114169190611c24565b90506000606560009054906101000a90046001600160a01b03166001600160a01b031663b888879e6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561146d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114919190611c94565b6001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f29190611c24565b90506000866001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611534573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115589190611cfe565b905061156581600a611e07565b61157083600a611e16565b61157c6012600a611e07565b6115868987611c53565b6115909190611c53565b61159a9190611c72565b6115a49190611c72565b94505050505b505b826001600160a01b03167fc5e1cdb94ac0a9f4f65e1a23fd59354025cffdf472eb03020ac4ba0e92d9969f826040516115e791815260200190565b60405180910390a2505050565b6033546001600160a01b0316331461069c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610bed565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6116b46001600160a01b0383163383610e17565b816001600160a01b03167f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa288260405161076e91815260200190565b600054610100900460ff1661175a5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610bed565b61069c61184a565b60006117b7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166118be9092919063ffffffff16565b90508051600014806117d85750808060200190518101906117d89190611e22565b61060c5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610bed565b600054610100900460ff166118b55760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610bed565b61069c3361164e565b60606118cd84846000856118d5565b949350505050565b60608247101561194d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610bed565b600080866001600160a01b031685876040516119699190611e74565b60006040518083038185875af1925050503d80600081146119a6576040519150601f19603f3d011682016040523d82523d6000602084013e6119ab565b606091505b50915091506119bc878383876119c7565b979650505050505050565b60608315611a33578251611a2c576001600160a01b0385163b611a2c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610bed565b50816118cd565b6118cd8383815115611a485781518083602001fd5b8060405162461bcd60e51b8152600401610bed9190611e90565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610bff57600080fd5b8035611a9881611a78565b919050565b60006020808385031215611ab057600080fd5b823567ffffffffffffffff80821115611ac857600080fd5b818501915085601f830112611adc57600080fd5b813581811115611aee57611aee611a62565b8060051b604051601f19603f83011681018181108582111715611b1357611b13611a62565b604052918252848201925083810185019188831115611b3157600080fd5b938501935b82851015611b5657611b4785611a8d565b84529385019392850192611b36565b98975050505050505050565b600060208284031215611b7457600080fd5b8135611b7f81611a78565b9392505050565b60008060408385031215611b9957600080fd5b8235611ba481611a78565b946020939093013593505050565b60008060008060808587031215611bc857600080fd5b8435611bd381611a78565b93506020850135611be381611a78565b92506040850135611bf381611a78565b91506060850135611c0381611a78565b939692955090935050565b634e487b7160e01b600052603260045260246000fd5b600060208284031215611c3657600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615611c6d57611c6d611c3d565b500290565b600082611c8f57634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215611ca657600080fd5b8151611b7f81611a78565b600080600060608486031215611cc657600080fd5b8351611cd181611a78565b6020850151909350611ce281611a78565b6040850151909250611cf381611a78565b809150509250925092565b600060208284031215611d1057600080fd5b815160ff81168114611b7f57600080fd5b600181815b80851115611d5c578160001904821115611d4257611d42611c3d565b80851615611d4f57918102915b93841c9390800290611d26565b509250929050565b600082611d7357506001611e01565b81611d8057506000611e01565b8160018114611d965760028114611da057611dbc565b6001915050611e01565b60ff841115611db157611db1611c3d565b50506001821b611e01565b5060208310610133831016604e8410600b8410161715611ddf575081810a611e01565b611de98383611d21565b8060001904821115611dfd57611dfd611c3d565b0290505b92915050565b6000611b7f60ff841683611d64565b6000611b7f8383611d64565b600060208284031215611e3457600080fd5b81518015158114611b7f57600080fd5b60005b83811015611e5f578181015183820152602001611e47565b83811115611e6e576000848401525b50505050565b60008251611e86818460208701611e44565b9190910192915050565b6020815260008251806020840152611eaf816040850160208701611e44565b601f01601f1916919091016040019291505056fea2646970667358221220970be493e628dd7b13836794c829fe7cbbcd1b9769170e258b3970ecd5c735f764736f6c634300080c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101825760003560e01c80639c9b2e21116100d8578063cd57ed6c1161008c578063f2fde38b11610066578063f2fde38b1461031b578063f851a4401461032e578063f8c8765e1461034157600080fd5b8063cd57ed6c146102ee578063dd36bd0e146102ff578063e4501d291461030857600080fd5b8063a4d5e67c116100bd578063a4d5e67c14610295578063b5fd73f8146102a8578063c8d508b0146102db57600080fd5b80639c9b2e211461026f578063a3551c221461028257600080fd5b80636a7e9f331161013a5780638980f11f116101145780638980f11f146102385780638da5cb5b1461024b57806398f442bb1461025c57600080fd5b80636a7e9f3314610206578063704b6c021461021d578063715018a61461023057600080fd5b80632ef196c41161016b5780632ef196c4146101bb578063542b3cb8146101e05780635f9d4d2e146101f357600080fd5b806308c51c65146101875780632e0f26251461019c575b600080fd5b61019a610195366004611a9d565b610354565b005b6101a4601281565b60405160ff90911681526020015b60405180910390f35b6065546001600160a01b03165b6040516001600160a01b0390911681526020016101b2565b6066546101c8906001600160a01b031681565b606c546101c8906001600160a01b031681565b61020f61271081565b6040519081526020016101b2565b61019a61022b366004611b62565b610611565b61019a61068a565b61019a610246366004611b86565b61069e565b6033546001600160a01b03166101c8565b61019a61026a366004611b86565b6106b4565b61019a61027d366004611b62565b61077a565b6065546101c8906001600160a01b031681565b61019a6102a3366004611b62565b6109c8565b6102cb6102b6366004611b62565b60686020526000908152604090205460ff1681565b60405190151581526020016101b2565b6069546101c8906001600160a01b031681565b6066546001600160a01b03166101c8565b61020f60675481565b61019a610316366004611b62565b610af4565b61019a610329366004611b62565b610b6d565b606a546101c8906001600160a01b031681565b61019a61034f366004611bb2565b610c02565b6066546001600160a01b03163314610398576040517ff3320bfe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805160005b8181101561060c5760008382815181106103b9576103b9611c0e565b60209081029190910101516040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa15801561040e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104329190611c24565b6069549091506001600160a01b031615801590610450575060675415155b15610496576000612710606754836104689190611c53565b6104729190611c72565b9050801561049457606954610494906001600160a01b03858116911683610e17565b505b6040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa1580156104da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104fe9190611c24565b60665490915061051b906001600160a01b03848116911683610e17565b6065546001600160a01b03838116911614156105b5576066546040517ea4173a0000000000000000000000000000000000000000000000000000000081526001600160a01b039091166004820181905260248201839052600060448301529062a4173a90606401600060405180830381600087803b15801561059c57600080fd5b505af11580156105b0573d6000803e3d6000fd5b505050505b816001600160a01b03167faa179256a8b0e52834b8e6c37fdcb2b72806c4b473622a9e844aa66cbe1a1990826040516105f091815260200190565b60405180910390a26106028282610e97565b505060010161039d565b505050565b6106196115f4565b6001600160a01b0381166106405760405163d92e233d60e01b815260040160405180910390fd5b606a80546001600160a01b0319166001600160a01b0383169081179091556040517f54e4612788f90384e6843298d7854436f3a585b2c3831ab66abf1de63bfa6c2d90600090a250565b6106926115f4565b61069c600061164e565b565b6106a66115f4565b6106b082826116a0565b5050565b6106bc6115f4565b6127108111156106f8576040517f648564d300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03821661071f5760405163d92e233d60e01b815260040160405180910390fd5b606980546001600160a01b0319166001600160a01b03841690811790915560678290556040518281527fba1e229a9495e21f509ea04bfdca8f222980ac1cb76333de06f6833f1e3f62d6906020015b60405180910390a25050565b606a546001600160a01b031633148015906107a057506033546001600160a01b03163314155b156107be57604051630deda90360e41b815260040160405180910390fd5b606a546001600160a01b0316331461090357806001600160a01b031663b16a19de6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561082a575060408051601f3d908101601f1916820190925261082791810190611c94565b60015b61083357610903565b606c546040517fd2493b6c0000000000000000000000000000000000000000000000000000000081526001600160a01b038381166004830152600092169063d2493b6c90602401606060405180830381865afa158015610897573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bb9190611cb1565b50909150506001600160a01b038116610900576040517f998d375300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505b6066546040517f9c9b2e210000000000000000000000000000000000000000000000000000000081526001600160a01b03838116600483015290911690639c9b2e2190602401600060405180830381600087803b15801561096357600080fd5b505af1158015610977573d6000803e3d6000fd5b5050506001600160a01b038216600081815260686020526040808220805460ff19166001179055519192507f05f3326e0527f309d4015dee3bc3f36e650b53fc823bab69c99847814acfafdf91a250565b606a546001600160a01b031633148015906109ee57506033546001600160a01b03163314155b15610a0c57604051630deda90360e41b815260040160405180910390fd5b6001600160a01b038116610a335760405163d92e233d60e01b815260040160405180910390fd5b6066546040517fa4d5e67c0000000000000000000000000000000000000000000000000000000081526001600160a01b0383811660048301529091169063a4d5e67c90602401600060405180830381600087803b158015610a9357600080fd5b505af1158015610aa7573d6000803e3d6000fd5b505050506001600160a01b038116600081815260686020526040808220805460ff19169055517f05f3326e0527f309d4015dee3bc3f36e650b53fc823bab69c99847814acfafdf9190a250565b610afc6115f4565b6001600160a01b038116610b235760405163d92e233d60e01b815260040160405180910390fd5b606c80546001600160a01b0319166001600160a01b0383169081179091556040517fab1c1ea2d4e8015738584c8adccf9a8f988d99eb864bbfac9eda1e06dad405ae90600090a250565b610b756115f4565b6001600160a01b038116610bf65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b610bff8161164e565b50565b600054610100900460ff1615808015610c225750600054600160ff909116105b80610c3c5750303b158015610c3c575060005460ff166001145b610cae5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610bed565b6000805460ff191660011790558015610cd1576000805461ff0019166101001790555b6001600160a01b038416610cf85760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b038516610d1f5760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b038316610d465760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b038216610d6d5760405163d92e233d60e01b815260040160405180910390fd5b610d756116ef565b606580546001600160a01b038088166001600160a01b031992831617909255606b805487841690831617905560668054868416908316179055606c805492851692821692909217909155606a8054909116331790558015610e10576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905261060c908490611762565b6065546000906001600160a01b0384811691161461060c57826001600160a01b031663b16a19de6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610f09575060408051601f3d908101601f19168201909252610f0691810190611c94565b60015b61111357606b5460405163b3596f0760e01b81526001600160a01b038581166004830152600092169063b3596f0790602401602060405180830381865afa158015610f58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7c9190611c24565b606b54604051630495f95f60e51b81526001600160a01b038781166004830152929350600092909116906392bf2be090602401602060405180830381865afa158015610fcc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff09190611c94565b90506000816001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611032573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110569190611cfe565b90506000866001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611098573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110bc9190611cfe565b90506110c981600a611e07565b6110d483600a611e07565b6110e06012600a611e07565b6110ea8988611c53565b6110f49190611c53565b6110fe9190611c72565b6111089190611c72565b9450505050506115ac565b6065546001600160a01b0382811691161461132e57606b5460405163b3596f0760e01b81526001600160a01b038381166004830152600092169063b3596f0790602401602060405180830381865afa158015611173573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111979190611c24565b606b54604051630495f95f60e51b81526001600160a01b038581166004830152929350600092909116906392bf2be090602401602060405180830381865afa1580156111e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120b9190611c94565b90506000816001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561124d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112719190611cfe565b90506000876001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d79190611cfe565b90506112e481600a611e07565b6112ef83600a611e07565b6112fb6012600a611e07565b6113058a88611c53565b61130f9190611c53565b6113199190611c72565b6113239190611c72565b9550505050506115aa565b606554604080517fb888879e00000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163b888879e9160048083019260209291908290030181865afa158015611391573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b59190611c94565b6001600160a01b0316636d2ed1846040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114169190611c24565b90506000606560009054906101000a90046001600160a01b03166001600160a01b031663b888879e6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561146d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114919190611c94565b6001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f29190611c24565b90506000866001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611534573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115589190611cfe565b905061156581600a611e07565b61157083600a611e16565b61157c6012600a611e07565b6115868987611c53565b6115909190611c53565b61159a9190611c72565b6115a49190611c72565b94505050505b505b826001600160a01b03167fc5e1cdb94ac0a9f4f65e1a23fd59354025cffdf472eb03020ac4ba0e92d9969f826040516115e791815260200190565b60405180910390a2505050565b6033546001600160a01b0316331461069c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610bed565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6116b46001600160a01b0383163383610e17565b816001600160a01b03167f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa288260405161076e91815260200190565b600054610100900460ff1661175a5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610bed565b61069c61184a565b60006117b7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166118be9092919063ffffffff16565b90508051600014806117d85750808060200190518101906117d89190611e22565b61060c5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610bed565b600054610100900460ff166118b55760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610bed565b61069c3361164e565b60606118cd84846000856118d5565b949350505050565b60608247101561194d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610bed565b600080866001600160a01b031685876040516119699190611e74565b60006040518083038185875af1925050503d80600081146119a6576040519150601f19603f3d011682016040523d82523d6000602084013e6119ab565b606091505b50915091506119bc878383876119c7565b979650505050505050565b60608315611a33578251611a2c576001600160a01b0385163b611a2c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610bed565b50816118cd565b6118cd8383815115611a485781518083602001fd5b8060405162461bcd60e51b8152600401610bed9190611e90565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610bff57600080fd5b8035611a9881611a78565b919050565b60006020808385031215611ab057600080fd5b823567ffffffffffffffff80821115611ac857600080fd5b818501915085601f830112611adc57600080fd5b813581811115611aee57611aee611a62565b8060051b604051601f19603f83011681018181108582111715611b1357611b13611a62565b604052918252848201925083810185019188831115611b3157600080fd5b938501935b82851015611b5657611b4785611a8d565b84529385019392850192611b36565b98975050505050505050565b600060208284031215611b7457600080fd5b8135611b7f81611a78565b9392505050565b60008060408385031215611b9957600080fd5b8235611ba481611a78565b946020939093013593505050565b60008060008060808587031215611bc857600080fd5b8435611bd381611a78565b93506020850135611be381611a78565b92506040850135611bf381611a78565b91506060850135611c0381611a78565b939692955090935050565b634e487b7160e01b600052603260045260246000fd5b600060208284031215611c3657600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615611c6d57611c6d611c3d565b500290565b600082611c8f57634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215611ca657600080fd5b8151611b7f81611a78565b600080600060608486031215611cc657600080fd5b8351611cd181611a78565b6020850151909350611ce281611a78565b6040850151909250611cf381611a78565b809150509250925092565b600060208284031215611d1057600080fd5b815160ff81168114611b7f57600080fd5b600181815b80851115611d5c578160001904821115611d4257611d42611c3d565b80851615611d4f57918102915b93841c9390800290611d26565b509250929050565b600082611d7357506001611e01565b81611d8057506000611e01565b8160018114611d965760028114611da057611dbc565b6001915050611e01565b60ff841115611db157611db1611c3d565b50506001821b611e01565b5060208310610133831016604e8410600b8410161715611ddf575081810a611e01565b611de98383611d21565b8060001904821115611dfd57611dfd611c3d565b0290505b92915050565b6000611b7f60ff841683611d64565b6000611b7f8383611d64565b600060208284031215611e3457600080fd5b81518015158114611b7f57600080fd5b60005b83811015611e5f578181015183820152602001611e47565b83811115611e6e576000848401525b50505050565b60008251611e86818460208701611e44565b9190910192915050565b6020815260008251806020840152611eaf816040850160208701611e44565b601f01601f1916919091016040019291505056fea2646970667358221220970be493e628dd7b13836794c829fe7cbbcd1b9769170e258b3970ecd5c735f764736f6c634300080c0033",
  "devdoc": {
    "author": "Prime",
    "kind": "dev",
    "methods": {
      "addReward(address)": {
        "params": {
          "_rewardsToken": "address of the reward token"
        }
      },
      "forwardReward(address[])": {
        "params": {
          "_rewardTokens": "an array of reward token addresses"
        }
      },
      "getMultiFeeDistributionAddress()": {
        "returns": {
          "_0": "MFD address"
        }
      },
      "getPrntTokenAddress()": {
        "returns": {
          "_0": "PRNT token address"
        }
      },
      "initialize(address,address,address,address)": {
        "params": {
          "aaveOracle_": "Aave oracle address",
          "multiFeeDistribution_": "Multi fee distribution contract",
          "prntToken_": "PRNT address"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "recoverERC20(address,uint256)": {
        "params": {
          "tokenAddress": "address of erc20 token to recover",
          "tokenAmount": "amount to recover"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setAdmin(address)": {
        "params": {
          "_configurator": "Configurator address"
        }
      },
      "setOperationExpenses(address,uint256)": {
        "params": {
          "_operationExpenseRatio": "Proportion of operation expense",
          "_operationExpenses": "Address to receive operation expenses"
        }
      },
      "setProtocolDataProvider(address)": {
        "params": {
          "_providerAddress": "The address of the protocol data provider contract"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Fee distributor inside",
    "version": 1
  },
  "userdoc": {
    "events": {
      "ForwardReward(address,uint256)": {
        "notice": "Emitted when reward token is forwarded"
      },
      "OperationExpensesUpdated(address,uint256)": {
        "notice": "Emitted when operation expenses is set"
      },
      "Recovered(address,uint256)": {
        "notice": "Emitted when ERC20 token is recovered"
      }
    },
    "kind": "user",
    "methods": {
      "addReward(address)": {
        "notice": "Add a new reward token to be distributed to stakers"
      },
      "admin()": {
        "notice": "Admin address"
      },
      "forwardReward(address[])": {
        "notice": "Run by MFD to pull pending platform revenue"
      },
      "getMultiFeeDistributionAddress()": {
        "notice": "Returns MFD address."
      },
      "getPrntTokenAddress()": {
        "notice": "Returns PRNT token address."
      },
      "initialize(address,address,address,address)": {
        "notice": "Initializer"
      },
      "multiFeeDistribution()": {
        "notice": "Fee distributor contract for earnings and PRNT lockings"
      },
      "operationExpenseRatio()": {
        "notice": "Reward ratio for operation expenses"
      },
      "operationExpenses()": {
        "notice": "Operation Expense account"
      },
      "prntToken()": {
        "notice": "PRNT token"
      },
      "recoverERC20(address,uint256)": {
        "notice": "Added to support recovering any ERC20 tokens inside the contract"
      },
      "removeReward(address)": {
        "notice": "Remove an existing reward token"
      },
      "setAdmin(address)": {
        "notice": "Sets pool configurator as admin."
      },
      "setOperationExpenses(address,uint256)": {
        "notice": "Set operation expenses account"
      },
      "setProtocolDataProvider(address)": {
        "notice": "Set the Protocol Data Provider address"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 139,
        "contract": "contracts/prime/staking/MiddleFeeDistribution.sol:MiddleFeeDistribution",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 142,
        "contract": "contracts/prime/staking/MiddleFeeDistribution.sol:MiddleFeeDistribution",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 809,
        "contract": "contracts/prime/staking/MiddleFeeDistribution.sol:MiddleFeeDistribution",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 11,
        "contract": "contracts/prime/staking/MiddleFeeDistribution.sol:MiddleFeeDistribution",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 131,
        "contract": "contracts/prime/staking/MiddleFeeDistribution.sol:MiddleFeeDistribution",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 8175,
        "contract": "contracts/prime/staking/MiddleFeeDistribution.sol:MiddleFeeDistribution",
        "label": "prntToken",
        "offset": 0,
        "slot": "101",
        "type": "t_contract(IMintableToken)4976"
      },
      {
        "astId": 8179,
        "contract": "contracts/prime/staking/MiddleFeeDistribution.sol:MiddleFeeDistribution",
        "label": "multiFeeDistribution",
        "offset": 0,
        "slot": "102",
        "type": "t_contract(IMultiFeeDistribution)5130"
      },
      {
        "astId": 8182,
        "contract": "contracts/prime/staking/MiddleFeeDistribution.sol:MiddleFeeDistribution",
        "label": "operationExpenseRatio",
        "offset": 0,
        "slot": "103",
        "type": "t_uint256"
      },
      {
        "astId": 8192,
        "contract": "contracts/prime/staking/MiddleFeeDistribution.sol:MiddleFeeDistribution",
        "label": "isRewardToken",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 8195,
        "contract": "contracts/prime/staking/MiddleFeeDistribution.sol:MiddleFeeDistribution",
        "label": "operationExpenses",
        "offset": 0,
        "slot": "105",
        "type": "t_address"
      },
      {
        "astId": 8198,
        "contract": "contracts/prime/staking/MiddleFeeDistribution.sol:MiddleFeeDistribution",
        "label": "admin",
        "offset": 0,
        "slot": "106",
        "type": "t_address"
      },
      {
        "astId": 8200,
        "contract": "contracts/prime/staking/MiddleFeeDistribution.sol:MiddleFeeDistribution",
        "label": "_aaveOracle",
        "offset": 0,
        "slot": "107",
        "type": "t_address"
      },
      {
        "astId": 8203,
        "contract": "contracts/prime/staking/MiddleFeeDistribution.sol:MiddleFeeDistribution",
        "label": "aaveProtocolDataProvider",
        "offset": 0,
        "slot": "108",
        "type": "t_contract(IAaveProtocolDataProvider)3916"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAaveProtocolDataProvider)3916": {
        "encoding": "inplace",
        "label": "contract IAaveProtocolDataProvider",
        "numberOfBytes": "20"
      },
      "t_contract(IMintableToken)4976": {
        "encoding": "inplace",
        "label": "contract IMintableToken",
        "numberOfBytes": "20"
      },
      "t_contract(IMultiFeeDistribution)5130": {
        "encoding": "inplace",
        "label": "contract IMultiFeeDistribution",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}