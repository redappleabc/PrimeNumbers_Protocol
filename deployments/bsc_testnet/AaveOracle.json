{
  "address": "0x08fAd0b5adf1E7E62068fb09f0bdDA3F8d0997bf",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "sources",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "fallbackOracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "baseCurrency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "baseCurrencyUnit",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "source",
          "type": "address"
        }
      ],
      "name": "AssetSourceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "baseCurrency",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseCurrencyUnit",
          "type": "uint256"
        }
      ],
      "name": "BaseCurrencySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "fallbackOracle",
          "type": "address"
        }
      ],
      "name": "FallbackOracleUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASE_CURRENCY",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BASE_CURRENCY_UNIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getAssetPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        }
      ],
      "name": "getAssetsPrices",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFallbackOracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getSourceOfAsset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "sources",
          "type": "address[]"
        }
      ],
      "name": "setAssetSources",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fallbackOracle",
          "type": "address"
        }
      ],
      "name": "setFallbackOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x881baf934e3da3549e0f14e7ee1c28c69a1da3bd5d77775eaf4847f4bddf6374",
  "receipt": {
    "to": null,
    "from": "0xdE8023f05d831Fb7381486D041237ddEB06c1BA2",
    "contractAddress": "0x08fAd0b5adf1E7E62068fb09f0bdDA3F8d0997bf",
    "transactionIndex": 0,
    "gasUsed": "831154",
    "logsBloom": "0x10000800000000000000000000000000000008800004002000800000800000000000800008000000000100000021050000000000000000000000000000000040000000400000000000002000000004080001010000000020000000000002000000040400020000040000000000000800000202200800000000004200000040400000000000000030000000000000000000000002000000000000000000000000000000020080000004002000000000a00200000000000000001000000000000000004000000000000001000100000000000000000000000040000000000021800000000000000000000100000008000000000010800000800080020000000000",
    "blockHash": "0x10a8f4841617bdb1388f5a80acb0ffbc81018f8c1b2823e270b3814822dabed0",
    "transactionHash": "0x881baf934e3da3549e0f14e7ee1c28c69a1da3bd5d77775eaf4847f4bddf6374",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 43439932,
        "transactionHash": "0x881baf934e3da3549e0f14e7ee1c28c69a1da3bd5d77775eaf4847f4bddf6374",
        "address": "0x08fAd0b5adf1E7E62068fb09f0bdDA3F8d0997bf",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000de8023f05d831fb7381486d041237ddeb06c1ba2"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x10a8f4841617bdb1388f5a80acb0ffbc81018f8c1b2823e270b3814822dabed0"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 43439932,
        "transactionHash": "0x881baf934e3da3549e0f14e7ee1c28c69a1da3bd5d77775eaf4847f4bddf6374",
        "address": "0x08fAd0b5adf1E7E62068fb09f0bdDA3F8d0997bf",
        "topics": [
          "0xce7a780d33665b1ea097af5f155e3821b809ecbaa839d3b33aa83ba28168cefb",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x10a8f4841617bdb1388f5a80acb0ffbc81018f8c1b2823e270b3814822dabed0"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 43439932,
        "transactionHash": "0x881baf934e3da3549e0f14e7ee1c28c69a1da3bd5d77775eaf4847f4bddf6374",
        "address": "0x08fAd0b5adf1E7E62068fb09f0bdDA3F8d0997bf",
        "topics": [
          "0x22c5b7b2d8561d39f7f210b6b326a1aa69f15311163082308ac4877db6339dc1",
          "0x0000000000000000000000007193c21ca1960b92fdcc92cfb918f337c7bd165e",
          "0x000000000000000000000000b846aa3ceaa7fd5a17fa70b272ffe2342cf40e4c"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x10a8f4841617bdb1388f5a80acb0ffbc81018f8c1b2823e270b3814822dabed0"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 43439932,
        "transactionHash": "0x881baf934e3da3549e0f14e7ee1c28c69a1da3bd5d77775eaf4847f4bddf6374",
        "address": "0x08fAd0b5adf1E7E62068fb09f0bdDA3F8d0997bf",
        "topics": [
          "0x22c5b7b2d8561d39f7f210b6b326a1aa69f15311163082308ac4877db6339dc1",
          "0x0000000000000000000000004f0e054e3c387afc152183659529913d79cc026b",
          "0x000000000000000000000000558d6d5b6693edbbf66f67f9529a963ef8c197a9"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x10a8f4841617bdb1388f5a80acb0ffbc81018f8c1b2823e270b3814822dabed0"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 43439932,
        "transactionHash": "0x881baf934e3da3549e0f14e7ee1c28c69a1da3bd5d77775eaf4847f4bddf6374",
        "address": "0x08fAd0b5adf1E7E62068fb09f0bdDA3F8d0997bf",
        "topics": [
          "0x22c5b7b2d8561d39f7f210b6b326a1aa69f15311163082308ac4877db6339dc1",
          "0x000000000000000000000000af1b345853e0b0ca0cb253f74fe406433581b28f",
          "0x00000000000000000000000030de34c7906770716e347554bf36ae3babc80c2f"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0x10a8f4841617bdb1388f5a80acb0ffbc81018f8c1b2823e270b3814822dabed0"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 43439932,
        "transactionHash": "0x881baf934e3da3549e0f14e7ee1c28c69a1da3bd5d77775eaf4847f4bddf6374",
        "address": "0x08fAd0b5adf1E7E62068fb09f0bdDA3F8d0997bf",
        "topics": [
          "0x22c5b7b2d8561d39f7f210b6b326a1aa69f15311163082308ac4877db6339dc1",
          "0x0000000000000000000000007c6463f7895b7e5a596fe779f78ab47e0cf54e6f",
          "0x00000000000000000000000064cf5d4e0339af18312efd118902296b76a75317"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0x10a8f4841617bdb1388f5a80acb0ffbc81018f8c1b2823e270b3814822dabed0"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 43439932,
        "transactionHash": "0x881baf934e3da3549e0f14e7ee1c28c69a1da3bd5d77775eaf4847f4bddf6374",
        "address": "0x08fAd0b5adf1E7E62068fb09f0bdDA3F8d0997bf",
        "topics": [
          "0x22c5b7b2d8561d39f7f210b6b326a1aa69f15311163082308ac4877db6339dc1",
          "0x000000000000000000000000a6fa68919c84901797fc4916c1b27568c913ece2",
          "0x00000000000000000000000083b172ea0cf315cdfc2569cb282ac266bfa0ed80"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0x10a8f4841617bdb1388f5a80acb0ffbc81018f8c1b2823e270b3814822dabed0"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 43439932,
        "transactionHash": "0x881baf934e3da3549e0f14e7ee1c28c69a1da3bd5d77775eaf4847f4bddf6374",
        "address": "0x08fAd0b5adf1E7E62068fb09f0bdDA3F8d0997bf",
        "topics": [
          "0x22c5b7b2d8561d39f7f210b6b326a1aa69f15311163082308ac4877db6339dc1",
          "0x000000000000000000000000448c016ada908545b1c22a90e8109068d3603207",
          "0x000000000000000000000000d27d0839fa2ba54d6eb85f0e827d9564052054fd"
        ],
        "data": "0x",
        "logIndex": 7,
        "blockHash": "0x10a8f4841617bdb1388f5a80acb0ffbc81018f8c1b2823e270b3814822dabed0"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 43439932,
        "transactionHash": "0x881baf934e3da3549e0f14e7ee1c28c69a1da3bd5d77775eaf4847f4bddf6374",
        "address": "0x08fAd0b5adf1E7E62068fb09f0bdDA3F8d0997bf",
        "topics": [
          "0x22c5b7b2d8561d39f7f210b6b326a1aa69f15311163082308ac4877db6339dc1",
          "0x000000000000000000000000ae13d989dac2f0debff460ac112a837c89baa7cd",
          "0x0000000000000000000000002514895c72f50d8bd4b4f9b1110f0d6bd2c97526"
        ],
        "data": "0x",
        "logIndex": 8,
        "blockHash": "0x10a8f4841617bdb1388f5a80acb0ffbc81018f8c1b2823e270b3814822dabed0"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 43439932,
        "transactionHash": "0x881baf934e3da3549e0f14e7ee1c28c69a1da3bd5d77775eaf4847f4bddf6374",
        "address": "0x08fAd0b5adf1E7E62068fb09f0bdDA3F8d0997bf",
        "topics": [
          "0xe27c4c1372396a3d15a9922f74f9dfc7c72b1ad6d63868470787249c356454c1",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000005f5e100",
        "logIndex": 9,
        "blockHash": "0x10a8f4841617bdb1388f5a80acb0ffbc81018f8c1b2823e270b3814822dabed0"
      }
    ],
    "blockNumber": 43439932,
    "cumulativeGasUsed": "831154",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0x7193c21Ca1960b92FdCc92CFb918F337C7bd165e",
      "0x4f0E054e3c387aFc152183659529913D79cC026b",
      "0xaF1b345853E0B0ca0Cb253f74FE406433581b28f",
      "0x7c6463f7895B7E5a596fe779F78aB47E0CF54E6f",
      "0xa6Fa68919C84901797fc4916c1b27568c913eCE2",
      "0x448c016AdA908545B1C22a90E8109068d3603207",
      "0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd"
    ],
    [
      "0xB846Aa3CeAa7fD5a17FA70b272fFE2342CF40e4C",
      "0x558d6D5b6693EDBBF66f67f9529A963ef8C197A9",
      "0x30DE34c7906770716e347554bf36AE3bABC80C2F",
      "0x64cF5D4e0339af18312eFD118902296B76A75317",
      "0x83B172EA0CF315CDFC2569cB282AC266bFA0ed80",
      "0xD27D0839Fa2ba54D6EB85f0e827D9564052054FD",
      "0x2514895c72f50D8bd4B4F9b1110F0D6bD2c97526"
    ],
    "0x0000000000000000000000000000000000000000",
    "0x0000000000000000000000000000000000000000",
    "100000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "1d544f96a00f94e7a887913a2bd4bf37",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"sources\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"fallbackOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"baseCurrency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseCurrencyUnit\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"}],\"name\":\"AssetSourceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"baseCurrency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseCurrencyUnit\",\"type\":\"uint256\"}],\"name\":\"BaseCurrencySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fallbackOracle\",\"type\":\"address\"}],\"name\":\"FallbackOracleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE_CURRENCY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BASE_CURRENCY_UNIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getAssetPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"}],\"name\":\"getAssetsPrices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFallbackOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getSourceOfAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"sources\",\"type\":\"address[]\"}],\"name\":\"setAssetSources\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fallbackOracle\",\"type\":\"address\"}],\"name\":\"setFallbackOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Aave\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"assets\":\"The addresses of the assets\",\"baseCurrency\":\"the base currency used for the price quotes. If USD is used, base currency is 0x0\",\"baseCurrencyUnit\":\"the unit of the base currency\",\"fallbackOracle\":\"The address of the fallback oracle to use if the data of an        aggregator is not consistent\",\"sources\":\"The address of the source of each asset\"}},\"getAssetPrice(address)\":{\"params\":{\"asset\":\"The asset address\"}},\"getAssetsPrices(address[])\":{\"params\":{\"assets\":\"The list of assets addresses\"}},\"getFallbackOracle()\":{\"returns\":{\"_0\":\"address The addres of the fallback oracle\"}},\"getSourceOfAsset(address)\":{\"params\":{\"asset\":\"The address of the asset\"},\"returns\":{\"_0\":\"address The address of the source\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setAssetSources(address[],address[])\":{\"params\":{\"assets\":\"The addresses of the assets\",\"sources\":\"The address of the source of each asset\"}},\"setFallbackOracle(address)\":{\"params\":{\"fallbackOracle\":\"The address of the fallbackOracle\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"AaveOracle\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructor\"},\"getAssetPrice(address)\":{\"notice\":\"Gets an asset price by address\"},\"getAssetsPrices(address[])\":{\"notice\":\"Gets a list of prices from a list of assets addresses\"},\"getFallbackOracle()\":{\"notice\":\"Gets the address of the fallback oracle\"},\"getSourceOfAsset(address)\":{\"notice\":\"Gets the address of the source for an asset address\"},\"setAssetSources(address[],address[])\":{\"notice\":\"External function called by the Aave governance to set or replace sources of assets\"},\"setFallbackOracle(address)\":{\"notice\":\"Sets the fallbackOracle - Callable only by the Aave governance\"}},\"notice\":\"Proxy smart contract to get the price of an asset from a price source, with Chainlink Aggregator         smart contracts as primary option - If the returned price by a Chainlink aggregator is <= 0, the call is forwarded to a fallbackOracle - Owned by the Aave governance system, allowed to add sources for assets, replace them   and change the fallbackOracle\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lending/AaveOracle.sol\":\"AaveOracle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"contracts/interfaces/AggregatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\ninterface AggregatorInterface {\\n\\tfunction latestAnswer() external view returns (int256);\\n\\n\\tfunction latestTimestamp() external view returns (uint256);\\n\\n\\tfunction latestRound() external view returns (uint256);\\n\\n\\tfunction getAnswer(uint256 roundId) external view returns (int256);\\n\\n\\tfunction getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n\\tevent AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n\\n\\tevent NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\",\"keccak256\":\"0xb2938f7114988ee6a3a1e86310e06d38ac8aace76d344b60cb1da30de49fff16\",\"license\":\"MIT\"},\"contracts/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\ninterface AggregatorV3Interface {\\n\\tfunction decimals() external view returns (uint8);\\n\\n\\tfunction description() external view returns (string memory);\\n\\n\\tfunction version() external view returns (uint256);\\n\\n\\t// getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n\\t// if they do not have data to report, instead of returning unset values\\n\\t// which could be misinterpreted as actual reported values.\\n\\tfunction getRoundData(\\n\\t\\tuint80 _roundId\\n\\t)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n\\tfunction latestRoundData()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0x0a6cadd5e05492e74282965db755bc834bb468ee493ae44429c7f2cf38fb8d5f\",\"license\":\"MIT\"},\"contracts/interfaces/IChainlinkAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Code from https://github.com/smartcontractkit/chainlink/blob/master/evm-contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"./AggregatorInterface.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\ninterface IChainlinkAggregator is AggregatorInterface, AggregatorV3Interface {}\\n\",\"keccak256\":\"0xcfc3dbbd8052419569c2ba3cedde2193da530ca2e3e5b2e09ca79612f5860727\",\"license\":\"MIT\"},\"contracts/interfaces/IPriceOracleGetter.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\n/**\\n * @title IPriceOracleGetter interface\\n * @notice Interface for the Aave price oracle.\\n **/\\n\\ninterface IPriceOracleGetter {\\n\\t/**\\n\\t * @dev returns the asset price in ETH\\n\\t * @param asset the address of the asset\\n\\t * @return the ETH price of the asset\\n\\t **/\\n\\tfunction getAssetPrice(address asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd899e22f6e6dedd49e7a4907fd136a68f6610d9c974b14e42ae10c5a2aa15684\",\"license\":\"agpl-3.0\"},\"contracts/lending/AaveOracle.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {IPriceOracleGetter} from \\\"../interfaces/IPriceOracleGetter.sol\\\";\\nimport {IChainlinkAggregator} from \\\"../interfaces/IChainlinkAggregator.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/// @title AaveOracle\\n/// @author Aave\\n/// @notice Proxy smart contract to get the price of an asset from a price source, with Chainlink Aggregator\\n///         smart contracts as primary option\\n/// - If the returned price by a Chainlink aggregator is <= 0, the call is forwarded to a fallbackOracle\\n/// - Owned by the Aave governance system, allowed to add sources for assets, replace them\\n///   and change the fallbackOracle\\ncontract AaveOracle is IPriceOracleGetter, Ownable {\\n\\tusing SafeERC20 for IERC20;\\n\\n\\tevent BaseCurrencySet(address indexed baseCurrency, uint256 baseCurrencyUnit);\\n\\tevent AssetSourceUpdated(address indexed asset, address indexed source);\\n\\tevent FallbackOracleUpdated(address indexed fallbackOracle);\\n\\n\\tmapping(address => IChainlinkAggregator) private assetsSources;\\n\\tIPriceOracleGetter private _fallbackOracle;\\n\\taddress public immutable BASE_CURRENCY;\\n\\tuint256 public immutable BASE_CURRENCY_UNIT;\\n\\n\\t/// @notice Constructor\\n\\t/// @param assets The addresses of the assets\\n\\t/// @param sources The address of the source of each asset\\n\\t/// @param fallbackOracle The address of the fallback oracle to use if the data of an\\n\\t///        aggregator is not consistent\\n\\t/// @param baseCurrency the base currency used for the price quotes. If USD is used, base currency is 0x0\\n\\t/// @param baseCurrencyUnit the unit of the base currency\\n\\tconstructor(\\n\\t\\taddress[] memory assets,\\n\\t\\taddress[] memory sources,\\n\\t\\taddress fallbackOracle,\\n\\t\\taddress baseCurrency,\\n\\t\\tuint256 baseCurrencyUnit\\n\\t) {\\n\\t\\t_setFallbackOracle(fallbackOracle);\\n\\t\\t_setAssetsSources(assets, sources);\\n\\t\\tBASE_CURRENCY = baseCurrency;\\n\\t\\tBASE_CURRENCY_UNIT = baseCurrencyUnit;\\n\\t\\temit BaseCurrencySet(baseCurrency, baseCurrencyUnit);\\n\\t}\\n\\n\\t/// @notice External function called by the Aave governance to set or replace sources of assets\\n\\t/// @param assets The addresses of the assets\\n\\t/// @param sources The address of the source of each asset\\n\\tfunction setAssetSources(address[] calldata assets, address[] calldata sources) external onlyOwner {\\n\\t\\t_setAssetsSources(assets, sources);\\n\\t}\\n\\n\\t/// @notice Sets the fallbackOracle\\n\\t/// - Callable only by the Aave governance\\n\\t/// @param fallbackOracle The address of the fallbackOracle\\n\\tfunction setFallbackOracle(address fallbackOracle) external onlyOwner {\\n\\t\\t_setFallbackOracle(fallbackOracle);\\n\\t}\\n\\n\\t/// @notice Internal function to set the sources for each asset\\n\\t/// @param assets The addresses of the assets\\n\\t/// @param sources The address of the source of each asset\\n\\tfunction _setAssetsSources(address[] memory assets, address[] memory sources) internal {\\n\\t\\trequire(assets.length == sources.length, \\\"INCONSISTENT_PARAMS_LENGTH\\\");\\n\\t\\tuint256 assetsLength = assets.length;\\n\\t\\tfor (uint256 i = 0; i < assetsLength; ) {\\n\\t\\t\\tassetsSources[assets[i]] = IChainlinkAggregator(sources[i]);\\n\\t\\t\\temit AssetSourceUpdated(assets[i], sources[i]);\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/// @notice Internal function to set the fallbackOracle\\n\\t/// @param fallbackOracle The address of the fallbackOracle\\n\\tfunction _setFallbackOracle(address fallbackOracle) internal {\\n\\t\\t_fallbackOracle = IPriceOracleGetter(fallbackOracle);\\n\\t\\temit FallbackOracleUpdated(fallbackOracle);\\n\\t}\\n\\n\\t/// @notice Gets an asset price by address\\n\\t/// @param asset The asset address\\n\\tfunction getAssetPrice(address asset) public view returns (uint256) {\\n\\t\\tIChainlinkAggregator source = assetsSources[asset];\\n\\n\\t\\tif (asset == BASE_CURRENCY) {\\n\\t\\t\\treturn BASE_CURRENCY_UNIT;\\n\\t\\t} else if (address(source) == address(0)) {\\n\\t\\t\\treturn _fallbackOracle.getAssetPrice(asset);\\n\\t\\t} else {\\n\\t\\t\\tint256 price = IChainlinkAggregator(source).latestAnswer();\\n\\t\\t\\tif (price > 0) {\\n\\t\\t\\t\\treturn uint256(price);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\treturn _fallbackOracle.getAssetPrice(asset);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/// @notice Gets a list of prices from a list of assets addresses\\n\\t/// @param assets The list of assets addresses\\n\\tfunction getAssetsPrices(address[] calldata assets) external view returns (uint256[] memory) {\\n\\t\\tuint256 length = assets.length;\\n\\t\\tuint256[] memory prices = new uint256[](length);\\n\\t\\tfor (uint256 i = 0; i < length; ) {\\n\\t\\t\\tprices[i] = getAssetPrice(assets[i]);\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn prices;\\n\\t}\\n\\n\\t/// @notice Gets the address of the source for an asset address\\n\\t/// @param asset The address of the asset\\n\\t/// @return address The address of the source\\n\\tfunction getSourceOfAsset(address asset) external view returns (address) {\\n\\t\\treturn address(assetsSources[asset]);\\n\\t}\\n\\n\\t/// @notice Gets the address of the fallback oracle\\n\\t/// @return address The addres of the fallback oracle\\n\\tfunction getFallbackOracle() external view returns (address) {\\n\\t\\treturn address(_fallbackOracle);\\n\\t}\\n}\\n\",\"keccak256\":\"0x51b0f9f6036a7cef4a5e6638c39e34107015a265e83c54e948bcf45be5061435\",\"license\":\"agpl-3.0\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162000e8038038062000e8083398101604081905262000034916200038f565b6200003f33620000a8565b6200004a83620000f8565b62000056858562000142565b6001600160a01b038216608081905260a08290526040518281527fe27c4c1372396a3d15a9922f74f9dfc7c72b1ad6d63868470787249c356454c19060200160405180910390a250505050506200043e565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600280546001600160a01b0319166001600160a01b0383169081179091556040517fce7a780d33665b1ea097af5f155e3821b809ecbaa839d3b33aa83ba28168cefb90600090a250565b8051825114620001985760405162461bcd60e51b815260206004820152601a60248201527f494e434f4e53495354454e545f504152414d535f4c454e475448000000000000604482015260640160405180910390fd5b815160005b81811015620002a957828181518110620001bb57620001bb62000428565b602002602001015160016000868481518110620001dc57620001dc62000428565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055508281815181106200023d576200023d62000428565b60200260200101516001600160a01b031684828151811062000263576200026362000428565b60200260200101516001600160a01b03167f22c5b7b2d8561d39f7f210b6b326a1aa69f15311163082308ac4877db6339dc160405160405180910390a36001016200019d565b50505050565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b0381168114620002dd57600080fd5b919050565b600082601f830112620002f457600080fd5b815160206001600160401b0380831115620003135762000313620002af565b8260051b604051601f19603f830116810181811084821117156200033b576200033b620002af565b6040529384528581018301938381019250878511156200035a57600080fd5b83870191505b8482101562000384576200037482620002c5565b8352918301919083019062000360565b979650505050505050565b600080600080600060a08688031215620003a857600080fd5b85516001600160401b0380821115620003c057600080fd5b620003ce89838a01620002e2565b96506020880151915080821115620003e557600080fd5b50620003f488828901620002e2565b9450506200040560408701620002c5565b92506200041560608701620002c5565b9150608086015190509295509295909350565b634e487b7160e01b600052603260045260246000fd5b60805160a051610a0e620004726000396000818161011a01526103a40152600081816101d201526103790152610a0e6000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c806392bf2be011610081578063b3596f071161005b578063b3596f07146101ba578063e19f4700146101cd578063f2fde38b146101f457600080fd5b806392bf2be01461015b5780639d23d9f214610187578063abfd5310146101a757600080fd5b8063715018a6116100b2578063715018a61461010d5780638c89b64f146101155780638da5cb5b1461014a57600080fd5b8063170aee73146100ce5780636210308c146100e3575b600080fd5b6100e16100dc36600461082c565b610207565b005b6002546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b6100e161021b565b61013c7f000000000000000000000000000000000000000000000000000000000000000081565b604051908152602001610104565b6000546001600160a01b03166100f0565b6100f061016936600461082c565b6001600160a01b039081166000908152600160205260409020541690565b61019a6101953660046108a1565b61022f565b60405161010491906108e3565b6100e16101b5366004610927565b6102dc565b61013c6101c836600461082c565b610357565b6100f07f000000000000000000000000000000000000000000000000000000000000000081565b6100e161020236600461082c565b610538565b61020f6105ca565b61021881610624565b50565b6102236105ca565b61022d600061067b565b565b60608160008167ffffffffffffffff81111561024d5761024d610993565b604051908082528060200260200182016040528015610276578160200160208202803683370190505b50905060005b828110156102d3576102ae868683818110610299576102996109a9565b90506020020160208101906101c8919061082c565b8282815181106102c0576102c06109a9565b602090810291909101015260010161027c565b50949350505050565b6102e46105ca565b610351848480806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506040805160208088028281018201909352878252909350879250869182918501908490808284376000920191909152506106d892505050565b50505050565b6001600160a01b038082166000818152600160205260408120549092908116917f000000000000000000000000000000000000000000000000000000000000000090911614156103c957507f000000000000000000000000000000000000000000000000000000000000000092915050565b6001600160a01b03811661044c5760025460405163b3596f0760e01b81526001600160a01b0385811660048301529091169063b3596f0790602401602060405180830381865afa158015610421573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044591906109bf565b9392505050565b6000816001600160a01b03166350d25bcd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561048c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b091906109bf565b905060008113156104c2579392505050565b60025460405163b3596f0760e01b81526001600160a01b0386811660048301529091169063b3596f0790602401602060405180830381865afa15801561050c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053091906109bf565b949350505050565b6105406105ca565b6001600160a01b0381166105c15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6102188161067b565b6000546001600160a01b0316331461022d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105b8565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517fce7a780d33665b1ea097af5f155e3821b809ecbaa839d3b33aa83ba28168cefb90600090a250565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80518251146107295760405162461bcd60e51b815260206004820152601a60248201527f494e434f4e53495354454e545f504152414d535f4c454e47544800000000000060448201526064016105b8565b815160005b8181101561035157828181518110610748576107486109a9565b602002602001015160016000868481518110610766576107666109a9565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055508281815181106107c4576107c46109a9565b60200260200101516001600160a01b03168482815181106107e7576107e76109a9565b60200260200101516001600160a01b03167f22c5b7b2d8561d39f7f210b6b326a1aa69f15311163082308ac4877db6339dc160405160405180910390a360010161072e565b60006020828403121561083e57600080fd5b81356001600160a01b038116811461044557600080fd5b60008083601f84011261086757600080fd5b50813567ffffffffffffffff81111561087f57600080fd5b6020830191508360208260051b850101111561089a57600080fd5b9250929050565b600080602083850312156108b457600080fd5b823567ffffffffffffffff8111156108cb57600080fd5b6108d785828601610855565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b8181101561091b578351835292840192918401916001016108ff565b50909695505050505050565b6000806000806040858703121561093d57600080fd5b843567ffffffffffffffff8082111561095557600080fd5b61096188838901610855565b9096509450602087013591508082111561097a57600080fd5b5061098787828801610855565b95989497509550505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000602082840312156109d157600080fd5b505191905056fea2646970667358221220008343bb5b2fac368e20b42656cd70197ea1431832c30752a63853b85c27a16264736f6c634300080c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100c95760003560e01c806392bf2be011610081578063b3596f071161005b578063b3596f07146101ba578063e19f4700146101cd578063f2fde38b146101f457600080fd5b806392bf2be01461015b5780639d23d9f214610187578063abfd5310146101a757600080fd5b8063715018a6116100b2578063715018a61461010d5780638c89b64f146101155780638da5cb5b1461014a57600080fd5b8063170aee73146100ce5780636210308c146100e3575b600080fd5b6100e16100dc36600461082c565b610207565b005b6002546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b6100e161021b565b61013c7f000000000000000000000000000000000000000000000000000000000000000081565b604051908152602001610104565b6000546001600160a01b03166100f0565b6100f061016936600461082c565b6001600160a01b039081166000908152600160205260409020541690565b61019a6101953660046108a1565b61022f565b60405161010491906108e3565b6100e16101b5366004610927565b6102dc565b61013c6101c836600461082c565b610357565b6100f07f000000000000000000000000000000000000000000000000000000000000000081565b6100e161020236600461082c565b610538565b61020f6105ca565b61021881610624565b50565b6102236105ca565b61022d600061067b565b565b60608160008167ffffffffffffffff81111561024d5761024d610993565b604051908082528060200260200182016040528015610276578160200160208202803683370190505b50905060005b828110156102d3576102ae868683818110610299576102996109a9565b90506020020160208101906101c8919061082c565b8282815181106102c0576102c06109a9565b602090810291909101015260010161027c565b50949350505050565b6102e46105ca565b610351848480806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506040805160208088028281018201909352878252909350879250869182918501908490808284376000920191909152506106d892505050565b50505050565b6001600160a01b038082166000818152600160205260408120549092908116917f000000000000000000000000000000000000000000000000000000000000000090911614156103c957507f000000000000000000000000000000000000000000000000000000000000000092915050565b6001600160a01b03811661044c5760025460405163b3596f0760e01b81526001600160a01b0385811660048301529091169063b3596f0790602401602060405180830381865afa158015610421573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044591906109bf565b9392505050565b6000816001600160a01b03166350d25bcd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561048c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b091906109bf565b905060008113156104c2579392505050565b60025460405163b3596f0760e01b81526001600160a01b0386811660048301529091169063b3596f0790602401602060405180830381865afa15801561050c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053091906109bf565b949350505050565b6105406105ca565b6001600160a01b0381166105c15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6102188161067b565b6000546001600160a01b0316331461022d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105b8565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517fce7a780d33665b1ea097af5f155e3821b809ecbaa839d3b33aa83ba28168cefb90600090a250565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80518251146107295760405162461bcd60e51b815260206004820152601a60248201527f494e434f4e53495354454e545f504152414d535f4c454e47544800000000000060448201526064016105b8565b815160005b8181101561035157828181518110610748576107486109a9565b602002602001015160016000868481518110610766576107666109a9565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055508281815181106107c4576107c46109a9565b60200260200101516001600160a01b03168482815181106107e7576107e76109a9565b60200260200101516001600160a01b03167f22c5b7b2d8561d39f7f210b6b326a1aa69f15311163082308ac4877db6339dc160405160405180910390a360010161072e565b60006020828403121561083e57600080fd5b81356001600160a01b038116811461044557600080fd5b60008083601f84011261086757600080fd5b50813567ffffffffffffffff81111561087f57600080fd5b6020830191508360208260051b850101111561089a57600080fd5b9250929050565b600080602083850312156108b457600080fd5b823567ffffffffffffffff8111156108cb57600080fd5b6108d785828601610855565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b8181101561091b578351835292840192918401916001016108ff565b50909695505050505050565b6000806000806040858703121561093d57600080fd5b843567ffffffffffffffff8082111561095557600080fd5b61096188838901610855565b9096509450602087013591508082111561097a57600080fd5b5061098787828801610855565b95989497509550505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000602082840312156109d157600080fd5b505191905056fea2646970667358221220008343bb5b2fac368e20b42656cd70197ea1431832c30752a63853b85c27a16264736f6c634300080c0033",
  "devdoc": {
    "author": "Aave",
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "assets": "The addresses of the assets",
          "baseCurrency": "the base currency used for the price quotes. If USD is used, base currency is 0x0",
          "baseCurrencyUnit": "the unit of the base currency",
          "fallbackOracle": "The address of the fallback oracle to use if the data of an        aggregator is not consistent",
          "sources": "The address of the source of each asset"
        }
      },
      "getAssetPrice(address)": {
        "params": {
          "asset": "The asset address"
        }
      },
      "getAssetsPrices(address[])": {
        "params": {
          "assets": "The list of assets addresses"
        }
      },
      "getFallbackOracle()": {
        "returns": {
          "_0": "address The addres of the fallback oracle"
        }
      },
      "getSourceOfAsset(address)": {
        "params": {
          "asset": "The address of the asset"
        },
        "returns": {
          "_0": "address The address of the source"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setAssetSources(address[],address[])": {
        "params": {
          "assets": "The addresses of the assets",
          "sources": "The address of the source of each asset"
        }
      },
      "setFallbackOracle(address)": {
        "params": {
          "fallbackOracle": "The address of the fallbackOracle"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "AaveOracle",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Constructor"
      },
      "getAssetPrice(address)": {
        "notice": "Gets an asset price by address"
      },
      "getAssetsPrices(address[])": {
        "notice": "Gets a list of prices from a list of assets addresses"
      },
      "getFallbackOracle()": {
        "notice": "Gets the address of the fallback oracle"
      },
      "getSourceOfAsset(address)": {
        "notice": "Gets the address of the source for an asset address"
      },
      "setAssetSources(address[],address[])": {
        "notice": "External function called by the Aave governance to set or replace sources of assets"
      },
      "setFallbackOracle(address)": {
        "notice": "Sets the fallbackOracle - Callable only by the Aave governance"
      }
    },
    "notice": "Proxy smart contract to get the price of an asset from a price source, with Chainlink Aggregator         smart contracts as primary option - If the returned price by a Chainlink aggregator is <= 0, the call is forwarded to a fallbackOracle - Owned by the Aave governance system, allowed to add sources for assets, replace them   and change the fallbackOracle",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4300,
        "contract": "contracts/lending/AaveOracle.sol:AaveOracle",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 20795,
        "contract": "contracts/lending/AaveOracle.sol:AaveOracle",
        "label": "assetsSources",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_contract(IChainlinkAggregator)16256)"
      },
      {
        "astId": 20798,
        "contract": "contracts/lending/AaveOracle.sol:AaveOracle",
        "label": "_fallbackOracle",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IPriceOracleGetter)18240"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IChainlinkAggregator)16256": {
        "encoding": "inplace",
        "label": "contract IChainlinkAggregator",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceOracleGetter)18240": {
        "encoding": "inplace",
        "label": "contract IPriceOracleGetter",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_contract(IChainlinkAggregator)16256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract IChainlinkAggregator)",
        "numberOfBytes": "32",
        "value": "t_contract(IChainlinkAggregator)16256"
      }
    }
  }
}