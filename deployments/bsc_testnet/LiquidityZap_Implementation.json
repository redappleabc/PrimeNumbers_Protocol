{
  "address": "0xeC150CbcDcfDb58b4821577E805B2ea5370BBDe1",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AddressZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientPermission",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidETHAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidRatio",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSlippage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZapExists",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "RATIO_DIVISOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptableRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "addLiquidityETHOnly",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "addLiquidityWETHOnly",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ethOracle",
      "outputs": [
        {
          "internalType": "contract IChainlinkAdapter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ethAmt",
          "type": "uint256"
        }
      ],
      "name": "getLPTokenPerEthUnit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "weth_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenWethPair_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "helper_",
          "type": "address"
        }
      ],
      "name": "initLiquidityZap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolHelper",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceProvider",
      "outputs": [
        {
          "internalType": "contract IPriceProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "wethAmount",
          "type": "uint256"
        }
      ],
      "name": "quote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "optimalTokenAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "quoteFromToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "optimalWETHAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_acceptableRatio",
          "type": "uint256"
        }
      ],
      "name": "setAcceptableRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_provider",
          "type": "address"
        }
      ],
      "name": "setPriceProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_wethAmt",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "standardAdd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenWETHPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "contract IWETH",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_onBehalf",
          "type": "address"
        }
      ],
      "name": "zapETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x6d5331244371df1ad8526918f57c94be83cf28387f5810d10860dfab6581ad36",
  "receipt": {
    "to": null,
    "from": "0xdE8023f05d831Fb7381486D041237ddEB06c1BA2",
    "contractAddress": "0xeC150CbcDcfDb58b4821577E805B2ea5370BBDe1",
    "transactionIndex": 2,
    "gasUsed": "1927111",
    "logsBloom": "0x
    "blockHash": "0xdad0f97fe3aef7fdd1b5d07587179ee1c5a4de387d520c564427b4bf4bca2f06",
    "transactionHash": "0x6d5331244371df1ad8526918f57c94be83cf28387f5810d10860dfab6581ad36",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 43439894,
        "transactionHash": "0x6d5331244371df1ad8526918f57c94be83cf28387f5810d10860dfab6581ad36",
        "address": "0xeC150CbcDcfDb58b4821577E805B2ea5370BBDe1",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 2,
        "blockHash": "0xdad0f97fe3aef7fdd1b5d07587179ee1c5a4de387d520c564427b4bf4bca2f06"
      }
    ],
    "blockNumber": 43439894,
    "cumulativeGasUsed": "2050815",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "dcefabf19271a6489c66282870162b11",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientPermission\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidETHAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRatio\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSlippage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZapExists\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"RATIO_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptableRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"addLiquidityETHOnly\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"addLiquidityWETHOnly\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethOracle\",\"outputs\":[{\"internalType\":\"contract IChainlinkAdapter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmt\",\"type\":\"uint256\"}],\"name\":\"getLPTokenPerEthUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"weth_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenWethPair_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"helper_\",\"type\":\"address\"}],\"name\":\"initLiquidityZap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolHelper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceProvider\",\"outputs\":[{\"internalType\":\"contract IPriceProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wethAmount\",\"type\":\"uint256\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"optimalTokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"quoteFromToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"optimalWETHAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_acceptableRatio\",\"type\":\"uint256\"}],\"name\":\"setAcceptableRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"setPriceProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_wethAmt\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"standardAdd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenWETHPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract IWETH\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_onBehalf\",\"type\":\"address\"}],\"name\":\"zapETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Prime Devs\",\"kind\":\"dev\",\"methods\":{\"addLiquidityETHOnly(address)\":{\"params\":{\"to\":\"address of lp token\"},\"returns\":{\"_0\":\"liquidity lp amount\"}},\"addLiquidityWETHOnly(uint256,address)\":{\"params\":{\"_amount\":\"of WETH\",\"to\":\"address of lp token\"},\"returns\":{\"_0\":\"liquidity lp amount\"}},\"getLPTokenPerEthUnit(uint256)\":{\"params\":{\"ethAmt\":\"ETH amount\"},\"returns\":{\"liquidity\":\"LP amount\"}},\"initLiquidityZap(address,address,address,address)\":{\"params\":{\"helper_\":\"Pool helper contract\",\"tokenWethPair_\":\"LP pair\",\"token_\":\"PRNT address\",\"weth_\":\"WETH address\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"quote(uint256)\":{\"params\":{\"wethAmount\":\"PRNT amount\"},\"returns\":{\"optimalTokenAmount\":\"Output PRNT amount\"}},\"quoteFromToken(uint256)\":{\"params\":{\"tokenAmount\":\"PRNT amount\"},\"returns\":{\"optimalWETHAmount\":\"Output WETH amount\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setAcceptableRatio(uint256)\":{\"params\":{\"_acceptableRatio\":\"Acceptable slippage ratio.\"}},\"setPriceProvider(address)\":{\"params\":{\"_provider\":\"Price provider contract address.\"}},\"standardAdd(uint256,uint256,address)\":{\"details\":\"use with quote\",\"params\":{\"_wethAmt\":\"WETH amount\",\"to\":\"LP address to be transferred\",\"tokenAmount\":\"PRNT amount\"},\"returns\":{\"_0\":\"liquidity LP amount\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"zapETH(address)\":{\"params\":{\"_onBehalf\":\"of the user\"},\"returns\":{\"_0\":\"liquidity lp amount\"}}},\"title\":\"Prime token contract with OFT integration\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"RATIO_DIVISOR()\":{\"notice\":\"ratio Divisor\"},\"acceptableRatio()\":{\"notice\":\"Acceptable ratio\"},\"addLiquidityETHOnly(address)\":{\"notice\":\"Add liquidity with ETH\"},\"addLiquidityWETHOnly(uint256,address)\":{\"notice\":\"Add liquidity with WETH\"},\"ethOracle()\":{\"notice\":\"ETH oracle contract\"},\"getLPTokenPerEthUnit(uint256)\":{\"notice\":\"LP token amount entitled with ETH\"},\"initLiquidityZap(address,address,address,address)\":{\"notice\":\"Initialize liquidity zap param\"},\"initialize()\":{\"notice\":\"Initialize\"},\"priceProvider()\":{\"notice\":\"Price provider contract\"},\"quote(uint256)\":{\"notice\":\"Quote PRNT amount from WETH\"},\"quoteFromToken(uint256)\":{\"notice\":\"Quote WETH amount from PRNT\"},\"setAcceptableRatio(uint256)\":{\"notice\":\"Set Acceptable Ratio.\"},\"setPriceProvider(address)\":{\"notice\":\"Set Price Provider.\"},\"standardAdd(uint256,uint256,address)\":{\"notice\":\"Add liquidity with PRNT and WETH\"},\"zapETH(address)\":{\"notice\":\"Zap ethereum\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/prime/zap/helpers/LiquidityZap.sol\":\"LiquidityZap\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x359a1ab89b46b9aba7bcad3fb651924baf4893d15153049b9976b0fc9be1358e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"contracts/interfaces/IChainlinkAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\ninterface IChainlinkAdapter {\\n\\tfunction latestAnswer() external view returns (uint256 price);\\n}\\n\",\"keccak256\":\"0x02576e519248f5e8fc12bf32351d24baba6104992502c8c9604e8f7c53423b4c\",\"license\":\"MIT\"},\"contracts/interfaces/IPriceProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\ninterface IPriceProvider {\\n\\tfunction getTokenPrice() external view returns (uint256);\\n\\n\\tfunction getTokenPriceUsd() external view returns (uint256);\\n\\n\\tfunction getLpTokenPrice() external view returns (uint256);\\n\\n\\tfunction getLpTokenPriceUsd() external view returns (uint256);\\n\\n\\tfunction decimals() external view returns (uint256);\\n\\n\\tfunction update() external;\\n\\n\\tfunction baseAssetChainlinkAdapter() external view returns (address);\\n}\\n\",\"keccak256\":\"0x8f5da67830c8d8dce0eebeb5626c9e1c2ed86132a8ae01e1fc6aa48cb60ae221\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\n\\ninterface IWETH {\\n\\tfunction balanceOf(address) external returns (uint256);\\n\\n\\tfunction deposit() external payable;\\n\\n\\tfunction withdraw(uint256) external;\\n\\n\\tfunction approve(address guy, uint256 wad) external returns (bool);\\n\\n\\tfunction transferFrom(address src, address dst, uint256 wad) external returns (bool);\\n\\n\\tfunction transfer(address to, uint256 value) external returns (bool);\\n\\n\\tfunction allowance(address owner, address spender) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x81802458b401654d7b326cc74c7589fc1ca979ba7f4762684f1c28d775a291f6\",\"license\":\"agpl-3.0\"},\"contracts/prime/zap/helpers/DustRefunder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport {IWETH} from \\\"../../../interfaces/IWETH.sol\\\";\\n\\n/// @title Dust Refunder Contract\\n/// @dev Refunds dust tokens remaining from zapping.\\n/// @author Prime\\ncontract DustRefunder {\\n\\tusing SafeERC20 for IERC20;\\n\\n\\t/**\\n\\t * @notice Refunds PRNT and WETH.\\n\\t * @param _prnt PRNT address\\n\\t * @param _weth WETH address\\n\\t * @param _refundAddress Address for refund\\n\\t */\\n\\tfunction _refundDust(address _prnt, address _weth, address _refundAddress) internal {\\n\\t\\tIERC20 prnt = IERC20(_prnt);\\n\\t\\tIWETH weth = IWETH(_weth);\\n\\n\\t\\tuint256 dustWETH = weth.balanceOf(address(this));\\n\\t\\tif (dustWETH > 0) {\\n\\t\\t\\tweth.transfer(_refundAddress, dustWETH);\\n\\t\\t}\\n\\t\\tuint256 dustPrnt = prnt.balanceOf(address(this));\\n\\t\\tif (dustPrnt > 0) {\\n\\t\\t\\tprnt.safeTransfer(_refundAddress, dustPrnt);\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0xd80f8d69da295a3394dd1206539440c5a9b6f87cc1e2121cfee50f58e1d8f892\",\"license\":\"MIT\"},\"contracts/prime/zap/helpers/LiquidityZap.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.12;\\n\\n//:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\\n//\\n// LiquidityZAP takes ETH and converts to  liquidity tokens.\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n//\\n// You should have received a copy of the GNU General Public License\\n// along with this program.\\n//\\n// The above copyright notice and this permission notice shall be included\\n// in all copies or substantial portions of the Software.\\n//\\n// Attribution: CORE / cvault.finance\\n//  https://github.com/cVault-finance/CORE-periphery/blob/master/contracts/COREv1Router.sol\\n//\\n//:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\\n//----------------------------------------------------------------------------------\\n//    I n s t a n t\\n//\\n//        .:mmm.         .:mmm:.       .ii.  .:SSSSSSSSSSSSS.     .oOOOOOOOOOOOo.\\n//      .mMM'':Mm.     .:MM'':Mm:.     .II:  :SSs..........     .oOO'''''''''''OOo.\\n//    .:Mm'   ':Mm.   .:Mm'   'MM:.    .II:  'sSSSSSSSSSSSSS:.  :OO.           .OO:\\n//  .'mMm'     ':MM:.:MMm'     ':MM:.  .II:  .:...........:SS.  'OOo:.........:oOO'\\n//  'mMm'        ':MMmm'         'mMm:  II:  'sSSSSSSSSSSSSS'     'oOOOOOOOOOOOO'\\n//\\n//----------------------------------------------------------------------------------\\n\\nimport {IUniswapV2Pair} from \\\"../../../uniswap-solc-0.8/interfaces/IUniswapV2Pair.sol\\\";\\nimport {UniswapV2Library} from \\\"../../../uniswap-solc-0.8/libraries/UniswapV2Library.sol\\\";\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport {DustRefunder} from \\\"./DustRefunder.sol\\\";\\n\\nimport {IWETH} from \\\"../../../interfaces/IWETH.sol\\\";\\nimport {IPriceProvider} from \\\"../../../interfaces/IPriceProvider.sol\\\";\\nimport {IChainlinkAdapter} from \\\"../../../interfaces/IChainlinkAdapter.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\n/// @title Prime token contract with OFT integration\\n/// @author Prime Devs\\ncontract LiquidityZap is Initializable, OwnableUpgradeable, DustRefunder {\\n\\tusing SafeERC20 for IERC20;\\n\\n\\terror ZapExists();\\n\\terror InvalidETHAmount();\\n\\terror AddressZero();\\n\\terror InsufficientPermission();\\n\\terror TransferFailed();\\n\\terror InvalidRatio();\\n\\terror InvalidSlippage();\\n\\n\\taddress public token;\\n\\taddress public tokenWETHPair;\\n\\tIWETH public weth;\\n\\tbool private initializedLiquidityZap;\\n\\taddress public poolHelper;\\n\\n\\t/// @notice ratio Divisor\\n\\tuint256 public constant RATIO_DIVISOR = 10000;\\n\\n\\t/// @notice Acceptable ratio\\n\\tuint256 public acceptableRatio;\\n\\n\\t/// @notice Price provider contract\\n\\tIPriceProvider public priceProvider;\\n\\n\\t/// @notice ETH oracle contract\\n\\tIChainlinkAdapter public ethOracle;\\n\\n\\tconstructor() {\\n\\t\\t_disableInitializers();\\n\\t}\\n\\n\\t/**\\n\\t * @notice Initialize\\n\\t */\\n\\tfunction initialize() external initializer {\\n\\t\\t__Ownable_init();\\n\\t}\\n\\n\\t/**\\n\\t * @notice Initialize liquidity zap param\\n\\t * @param token_ PRNT address\\n\\t * @param weth_ WETH address\\n\\t * @param tokenWethPair_ LP pair\\n\\t * @param helper_ Pool helper contract\\n\\t */\\n\\tfunction initLiquidityZap(\\n\\t\\taddress token_,\\n\\t\\taddress weth_,\\n\\t\\taddress tokenWethPair_,\\n\\t\\taddress helper_\\n\\t) external onlyOwner {\\n\\t\\tif (initializedLiquidityZap) revert ZapExists();\\n\\t\\ttoken = token_;\\n\\t\\tweth = IWETH(weth_);\\n\\t\\ttokenWETHPair = tokenWethPair_;\\n\\t\\tinitializedLiquidityZap = true;\\n\\t\\tpoolHelper = helper_;\\n\\t}\\n\\n\\tfallback() external payable {\\n\\t\\tif (msg.sender != address(weth)) {\\n\\t\\t\\taddLiquidityETHOnly(payable(msg.sender));\\n\\t\\t}\\n\\t}\\n\\n\\treceive() external payable {\\n\\t\\tif (msg.sender != address(weth)) {\\n\\t\\t\\taddLiquidityETHOnly(payable(msg.sender));\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Set Price Provider.\\n\\t * @param _provider Price provider contract address.\\n\\t */\\n\\tfunction setPriceProvider(address _provider) external onlyOwner {\\n\\t\\tif (address(_provider) == address(0)) revert AddressZero();\\n\\t\\tpriceProvider = IPriceProvider(_provider);\\n\\t\\tethOracle = IChainlinkAdapter(priceProvider.baseAssetChainlinkAdapter());\\n\\t}\\n\\n\\t/**\\n\\t * @notice Set Acceptable Ratio.\\n\\t * @param _acceptableRatio Acceptable slippage ratio.\\n\\t */\\n\\tfunction setAcceptableRatio(uint256 _acceptableRatio) external onlyOwner {\\n\\t\\tif (_acceptableRatio > RATIO_DIVISOR) revert InvalidRatio();\\n\\t\\tacceptableRatio = _acceptableRatio;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Zap ethereum\\n\\t * @param _onBehalf of the user\\n\\t * @return liquidity lp amount\\n\\t */\\n\\tfunction zapETH(address payable _onBehalf) external payable returns (uint256) {\\n\\t\\tif (msg.value == 0) revert InvalidETHAmount();\\n\\t\\treturn addLiquidityETHOnly(_onBehalf);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Add liquidity with WETH\\n\\t * @param _amount of WETH\\n\\t * @param to address of lp token\\n\\t * @return liquidity lp amount\\n\\t */\\n\\tfunction addLiquidityWETHOnly(uint256 _amount, address payable to) public returns (uint256) {\\n\\t\\tif (msg.sender != poolHelper) revert InsufficientPermission();\\n\\t\\tif (to == address(0)) revert AddressZero();\\n\\t\\tuint256 buyAmount = _amount / 2;\\n\\t\\tif (buyAmount == 0) revert InvalidETHAmount();\\n\\n\\t\\t(uint256 reserveWeth, uint256 reserveTokens) = _getPairReserves();\\n\\t\\tuint256 outTokens = UniswapV2Library.getAmountOut(buyAmount, reserveWeth, reserveTokens);\\n\\n\\t\\tweth.transfer(tokenWETHPair, buyAmount);\\n\\n\\t\\t(address token0, address token1) = UniswapV2Library.sortTokens(address(weth), token);\\n\\t\\tIUniswapV2Pair(tokenWETHPair).swap(\\n\\t\\t\\ttoken == token0 ? outTokens : 0,\\n\\t\\t\\ttoken == token1 ? outTokens : 0,\\n\\t\\t\\taddress(this),\\n\\t\\t\\t\\\"\\\"\\n\\t\\t);\\n\\n\\t\\treturn _addLiquidity(outTokens, buyAmount, to);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Add liquidity with ETH\\n\\t * @param to address of lp token\\n\\t * @return liquidity lp amount\\n\\t */\\n\\tfunction addLiquidityETHOnly(address payable to) public payable returns (uint256) {\\n\\t\\tif (to == address(0)) revert AddressZero();\\n\\t\\tuint256 buyAmount = msg.value / 2;\\n\\t\\tif (buyAmount == 0) revert InvalidETHAmount();\\n\\t\\tweth.deposit{value: msg.value}();\\n\\n\\t\\t(uint256 reserveWeth, uint256 reserveTokens) = _getPairReserves();\\n\\t\\tuint256 outTokens = UniswapV2Library.getAmountOut(buyAmount, reserveWeth, reserveTokens);\\n\\n\\t\\tif (address(priceProvider) != address(0)) {\\n\\t\\t\\tuint256 slippage = _calcSlippage(buyAmount, outTokens);\\n\\t\\t\\tif (slippage < acceptableRatio) revert InvalidSlippage();\\n\\t\\t}\\n\\n\\t\\tweth.transfer(tokenWETHPair, buyAmount);\\n\\n\\t\\t(address token0, address token1) = UniswapV2Library.sortTokens(address(weth), token);\\n\\t\\tIUniswapV2Pair(tokenWETHPair).swap(\\n\\t\\t\\ttoken == token0 ? outTokens : 0,\\n\\t\\t\\ttoken == token1 ? outTokens : 0,\\n\\t\\t\\taddress(this),\\n\\t\\t\\t\\\"\\\"\\n\\t\\t);\\n\\n\\t\\treturn _addLiquidity(outTokens, buyAmount, to);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Quote WETH amount from PRNT\\n\\t * @param tokenAmount PRNT amount\\n\\t * @return optimalWETHAmount Output WETH amount\\n\\t */\\n\\tfunction quoteFromToken(uint256 tokenAmount) public view returns (uint256 optimalWETHAmount) {\\n\\t\\t(uint256 wethReserve, uint256 tokenReserve) = _getPairReserves();\\n\\t\\toptimalWETHAmount = UniswapV2Library.quote(tokenAmount, tokenReserve, wethReserve);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Quote PRNT amount from WETH\\n\\t * @param wethAmount PRNT amount\\n\\t * @return optimalTokenAmount Output PRNT amount\\n\\t */\\n\\tfunction quote(uint256 wethAmount) public view returns (uint256 optimalTokenAmount) {\\n\\t\\t(uint256 wethReserve, uint256 tokenReserve) = _getPairReserves();\\n\\t\\toptimalTokenAmount = UniswapV2Library.quote(wethAmount, wethReserve, tokenReserve);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Add liquidity with PRNT and WETH\\n\\t * @dev use with quote\\n\\t * @param tokenAmount PRNT amount\\n\\t * @param _wethAmt WETH amount\\n\\t * @param to LP address to be transferred\\n\\t * @return liquidity LP amount\\n\\t */\\n\\tfunction standardAdd(uint256 tokenAmount, uint256 _wethAmt, address payable to) public returns (uint256) {\\n\\t\\tif (to == address(0)) revert AddressZero();\\n\\t\\tif (tokenAmount == 0 || _wethAmt == 0) revert InvalidETHAmount();\\n\\t\\tIERC20(token).safeTransferFrom(msg.sender, address(this), tokenAmount);\\n\\t\\tweth.transferFrom(msg.sender, address(this), _wethAmt);\\n\\t\\treturn _addLiquidity(tokenAmount, _wethAmt, to);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Add liquidity with PRNT and WETH\\n\\t * @dev use with quote\\n\\t * @param tokenAmount PRNT amount\\n\\t * @param wethAmount WETH amount\\n\\t * @param to LP address to be transferred\\n\\t * @return liquidity LP amount\\n\\t */\\n\\tfunction _addLiquidity(\\n\\t\\tuint256 tokenAmount,\\n\\t\\tuint256 wethAmount,\\n\\t\\taddress payable to\\n\\t) internal returns (uint256 liquidity) {\\n\\t\\tuint256 optimalTokenAmount = quote(wethAmount);\\n\\n\\t\\tuint256 optimalWETHAmount;\\n\\t\\tif (optimalTokenAmount > tokenAmount) {\\n\\t\\t\\toptimalWETHAmount = quoteFromToken(tokenAmount);\\n\\t\\t\\toptimalTokenAmount = tokenAmount;\\n\\t\\t} else {\\n\\t\\t\\toptimalWETHAmount = wethAmount;\\n\\t\\t}\\n\\n\\t\\tbool wethTransferSuccess = weth.transfer(tokenWETHPair, optimalWETHAmount);\\n\\t\\tif (!wethTransferSuccess) revert TransferFailed();\\n\\t\\tIERC20(token).safeTransfer(tokenWETHPair, optimalTokenAmount);\\n\\n\\t\\tliquidity = IUniswapV2Pair(tokenWETHPair).mint(to);\\n\\n\\t\\t//refund dust\\n\\t\\t_refundDust(token, address(weth), to);\\n\\t}\\n\\n\\t/**\\n\\t * @notice LP token amount entitled with ETH\\n\\t * @param ethAmt ETH amount\\n\\t * @return liquidity LP amount\\n\\t */\\n\\tfunction getLPTokenPerEthUnit(uint256 ethAmt) public view returns (uint256 liquidity) {\\n\\t\\t(uint256 reserveWeth, uint256 reserveTokens) = _getPairReserves();\\n\\t\\tuint256 outTokens = UniswapV2Library.getAmountOut(ethAmt / 2, reserveWeth, reserveTokens);\\n\\t\\tuint256 _totalSupply = IUniswapV2Pair(tokenWETHPair).totalSupply();\\n\\n\\t\\t(address token0, ) = UniswapV2Library.sortTokens(address(weth), token);\\n\\t\\t(uint256 amount0, uint256 amount1) = token0 == token ? (outTokens, ethAmt / 2) : (ethAmt / 2, outTokens);\\n\\t\\t(uint256 _reserve0, uint256 _reserve1) = token0 == token\\n\\t\\t\\t? (reserveTokens, reserveWeth)\\n\\t\\t\\t: (reserveWeth, reserveTokens);\\n\\t\\tliquidity = Math.min((amount0 * _totalSupply) / _reserve0, (amount1 * _totalSupply) / _reserve1);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Get amount of lp reserves\\n\\t * @return wethReserves WETH amount\\n\\t * @return tokenReserves PRNT amount\\n\\t */\\n\\tfunction _getPairReserves() internal view returns (uint256 wethReserves, uint256 tokenReserves) {\\n\\t\\t(address token0, ) = UniswapV2Library.sortTokens(address(weth), token);\\n\\t\\t(uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(tokenWETHPair).getReserves();\\n\\t\\t(wethReserves, tokenReserves) = token0 == token ? (reserve1, reserve0) : (reserve0, reserve1);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Calculates slippage ratio from weth to PRNT\\n\\t * @param _ethAmt ETH amount\\n\\t * @param _tokens PRNT token amount\\n\\t */\\n\\tfunction _calcSlippage(uint256 _ethAmt, uint256 _tokens) internal returns (uint256 ratio) {\\n\\t\\tpriceProvider.update();\\n\\t\\tuint256 tokenAmtEth = (_tokens * priceProvider.getTokenPrice() * 1e18) / (10 ** priceProvider.decimals()); // price decimal is 8\\n\\t\\tratio = (tokenAmtEth * RATIO_DIVISOR) / _ethAmt;\\n\\t\\tratio = ratio / 1E18;\\n\\t}\\n}\\n\",\"keccak256\":\"0xc9e0834e410ce896eba7c6475b2a992e30283bd1fca649c7ef5f8f13c3e78a69\",\"license\":\"GPL-3.0-or-later\"},\"contracts/uniswap-solc-0.8/interfaces/IUniswapV2ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n//solhint-disable-next-line compiler-version\\npragma solidity >=0.5.0;\\n\\n//solhint-disable func-name-mixedcase\\ninterface IUniswapV2ERC20 {\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x334d8f0222053d99b649322eb9e3c4f53968522d982d194013c0d760ac25b195\",\"license\":\"GPL-3.0-or-later\"},\"contracts/uniswap-solc-0.8/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\n//solhint-disable-next-line compiler-version\\npragma solidity >=0.5.0;\\n\\n//solhint-disable func-name-mixedcase\\n\\nimport \\\"./IUniswapV2ERC20.sol\\\";\\n\\ninterface IUniswapV2Pair is IUniswapV2ERC20 {\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(\\n        address indexed sender,\\n        uint256 amount0,\\n        uint256 amount1,\\n        address indexed to\\n    );\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(\\n        address to\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x8f463e545529ddac7b9b1e7b9bdb3dba5a6a10a19f1d0a66db8edf7e4119be58\",\"license\":\"GPL-3.0-or-later\"},\"contracts/uniswap-solc-0.8/libraries/UniswapV2Library.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.12;\\n\\n//solhint-disable reason-string\\n\\nimport \\\"../interfaces/IUniswapV2Pair.sol\\\";\\n\\nlibrary UniswapV2Library {\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(\\n        address tokenA,\\n        address tokenB\\n    ) internal pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, \\\"UniswapV2Library: IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = tokenA < tokenB\\n            ? (tokenA, tokenB)\\n            : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"UniswapV2Library: ZERO_ADDRESS\\\");\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal pure returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(\\n            uint160(\\n                uint256(\\n                    keccak256(\\n                        abi.encodePacked(\\n                            bytes1(0xff),\\n                            factory,\\n                            keccak256(abi.encodePacked(token0, token1)),\\n                            hex\\\"443533a897cfad2762695078bf6ee9b78b4edcda64ec31e1c83066cee4c90a7e\\\" // init code hash\\n                        )\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    // fetches and sorts the reserves for a pair\\n    function getReserves(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\\n        (address token0, ) = sortTokens(tokenA, tokenB);\\n        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(\\n            pairFor(factory, tokenA, tokenB)\\n        ).getReserves();\\n        (reserveA, reserveB) = tokenA == token0\\n            ? (reserve0, reserve1)\\n            : (reserve1, reserve0);\\n    }\\n\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) internal pure returns (uint256 amountB) {\\n        require(amountA > 0, \\\"UniswapV2Library: INSUFFICIENT_AMOUNT\\\");\\n        require(\\n            reserveA > 0 && reserveB > 0,\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        amountB = (amountA * reserveB) / reserveA;\\n    }\\n\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountOut) {\\n        require(amountIn > 0, \\\"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        require(\\n            reserveIn > 0 && reserveOut > 0,\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        uint256 amountInWithFee = amountIn * 997;\\n        uint256 numerator = amountInWithFee * reserveOut;\\n        uint256 denominator = reserveIn * 1000 + amountInWithFee;\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountIn) {\\n        require(amountOut > 0, \\\"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        require(\\n            reserveIn > 0 && reserveOut > 0,\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        uint256 numerator = reserveIn * amountOut * 1000;\\n        uint256 denominator = (reserveOut - amountOut) * 997;\\n        amountIn = numerator / denominator + 1;\\n    }\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    function getAmountsOut(\\n        address factory,\\n        uint256 amountIn,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[0] = amountIn;\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(\\n                factory,\\n                path[i],\\n                path[i + 1]\\n            );\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n\\n    // performs chained getAmountIn calculations on any number of pairs\\n    function getAmountsIn(\\n        address factory,\\n        uint256 amountOut,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[amounts.length - 1] = amountOut;\\n        for (uint256 i = path.length - 1; i > 0; i--) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(\\n                factory,\\n                path[i - 1],\\n                path[i]\\n            );\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x97d738418ad985add26cfceb81c014d7fb859f92e9d1d8c1be3f284433dcdb96\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001961001e565b6100dd565b600054610100900460ff161561008a5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff908116146100db576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b61218280620000ed6000396000f3fe6080604052600436106101795760003560e01c80638e614324116100cb578063d6b89a031161007f578063f2fde38b11610059578063f2fde38b146103fd578063fc0c546a1461041d578063fd7060621461043d5761019d565b8063d6b89a031461039d578063ed1bd76c146103bd578063edabc8f6146103dd5761019d565b8063b888879e116100b0578063b888879e1461034a578063c26974201461036a578063d5661c921461037d5761019d565b80638e614324146103145780639c8762e11461032a5761019d565b806355ac8d301161012d5780637c6ba9c1116101075780637c6ba9c1146102c15780638129fc1c146102e15780638da5cb5b146102f65761019d565b806355ac8d30146102765780636a7e9f3314610296578063715018a6146102ac5761019d565b8063372aa2241161015e578063372aa224146101f85780633fc8cef314610218578063470e9689146102555761019d565b8063370c3861146101b857806337279ffd146101d85761019d565b3661019d576067546001600160a01b0316331461019b576101993361045d565b505b005b6067546001600160a01b0316331461019b576101993361045d565b3480156101c457600080fd5b5061019b6101d3366004611db7565b61071b565b3480156101e457600080fd5b5061019b6101f3366004611e13565b6107eb565b34801561020457600080fd5b5061019b610213366004611e2c565b610834565b34801561022457600080fd5b50606754610238906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b610268610263366004611e2c565b610936565b60405190815260200161024c565b34801561028257600080fd5b50606854610238906001600160a01b031681565b3480156102a257600080fd5b5061026861271081565b3480156102b857600080fd5b5061019b610965565b3480156102cd57600080fd5b506102686102dc366004611e49565b610979565b3480156102ed57600080fd5b5061019b610a72565b34801561030257600080fd5b506033546001600160a01b0316610238565b34801561032057600080fd5b5061026860695481565b34801561033657600080fd5b50606b54610238906001600160a01b031681565b34801561035657600080fd5b50606a54610238906001600160a01b031681565b610268610378366004611e2c565b61045d565b34801561038957600080fd5b50606654610238906001600160a01b031681565b3480156103a957600080fd5b506102686103b8366004611e13565b610b97565b3480156103c957600080fd5b506102686103d8366004611e13565b610d07565b3480156103e957600080fd5b506102686103f8366004611e82565b610d23565b34801561040957600080fd5b5061019b610418366004611e2c565b610f60565b34801561042957600080fd5b50606554610238906001600160a01b031681565b34801561044957600080fd5b50610268610458366004611e13565b610fed565b60006001600160a01b03821661048657604051639fabe1c160e01b815260040160405180910390fd5b6000610493600234611ec8565b9050806104b35760405163090ac0d760e21b815260040160405180910390fd5b606760009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561050357600080fd5b505af1158015610517573d6000803e3d6000fd5b5050505050600080610527611009565b9150915060006105388484846110ed565b606a549091506001600160a01b031615610598576000610558858361121f565b9050606954811015610596576040517f334ee9a100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505b60675460665460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810187905291169063a9059cbb906044016020604051808303816000875af11580156105ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106119190611eea565b506067546065546000918291610633916001600160a01b0390811691166113e3565b6066546065549294509092506001600160a01b039081169163022c0d9f91808616911614610662576000610664565b845b6065546001600160a01b03858116911614610680576000610682565b855b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815260048101929092526024820152306044820152608060648201526000608482015260a401600060405180830381600087803b1580156106ec57600080fd5b505af1158015610700573d6000803e3d6000fd5b5050505061070f83878a6114f3565b98975050505050505050565b6107236116a8565b606754600160a01b900460ff1615610767576040517fd79c090e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606580546001600160a01b0395861673ffffffffffffffffffffffffffffffffffffffff19918216179091556067805460668054958816958416959095179094557fffffffffffffffffffffff00000000000000000000000000000000000000000090931693851693909317600160a01b1790915560688054919093169116179055565b6107f36116a8565b61271081111561082f576040517f648564d300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606955565b61083c6116a8565b6001600160a01b03811661086357604051639fabe1c160e01b815260040160405180910390fd5b606a805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038316908117909155604080517f88be91a000000000000000000000000000000000000000000000000000000000815290516388be91a0916004808201926020929091908290030181865afa1580156108e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109069190611f0c565b606b805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039290921691909117905550565b6000346109565760405163090ac0d760e21b815260040160405180910390fd5b61095f8261045d565b92915050565b61096d6116a8565b6109776000611702565b565b60006001600160a01b0382166109a257604051639fabe1c160e01b815260040160405180910390fd5b8315806109ad575082155b156109cb5760405163090ac0d760e21b815260040160405180910390fd5b6065546109e3906001600160a01b0316333087611761565b6067546040516323b872dd60e01b8152336004820152306024820152604481018590526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610a3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5e9190611eea565b50610a6a8484846114f3565b949350505050565b600054610100900460ff1615808015610a925750600054600160ff909116105b80610aac5750303b158015610aac575060005460ff166001145b610b235760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b6000805460ff191660011790558015610b46576000805461ff0019166101001790555b610b4e6117ff565b8015610b94576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b6000806000610ba4611009565b90925090506000610bc0610bb9600287611ec8565b84846110ed565b90506000606660009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3b9190611f29565b606754606554919250600091610c5d916001600160a01b0390811691166113e3565b5060655490915060009081906001600160a01b03808516911614610c8c57610c8660028a611ec8565b85610c98565b84610c9860028b611ec8565b606554919350915060009081906001600160a01b03868116911614610cbe578888610cc1565b87895b9092509050610cf882610cd48887611f42565b610cde9190611ec8565b82610ce98987611f42565b610cf39190611ec8565b611872565b9b9a5050505050505050505050565b6000806000610d14611009565b91509150610a6a84838361188a565b6068546000906001600160a01b03163314610d6a576040517fdeda903000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038216610d9157604051639fabe1c160e01b815260040160405180910390fd5b6000610d9e600285611ec8565b905080610dbe5760405163090ac0d760e21b815260040160405180910390fd5b600080610dc9611009565b915091506000610dda8484846110ed565b60675460665460405163a9059cbb60e01b81526001600160a01b03918216600482015260248101889052929350169063a9059cbb906044016020604051808303816000875af1158015610e31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e559190611eea565b506067546065546000918291610e77916001600160a01b0390811691166113e3565b6066546065549294509092506001600160a01b039081169163022c0d9f91808616911614610ea6576000610ea8565b845b6065546001600160a01b03858116911614610ec4576000610ec6565b855b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815260048101929092526024820152306044820152608060648201526000608482015260a401600060405180830381600087803b158015610f3057600080fd5b505af1158015610f44573d6000803e3d6000fd5b50505050610f5383878a6114f3565b9998505050505050505050565b610f686116a8565b6001600160a01b038116610fe45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610b1a565b610b9481611702565b6000806000610ffa611009565b91509150610a6a84828461188a565b6067546065546000918291829161102c916001600160a01b0391821691166113e3565b509050600080606660009054906101000a90046001600160a01b03166001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015611085573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a99190611f84565b506065546dffffffffffffffffffffffffffff9283169450911691506001600160a01b038481169116146110de5781816110e1565b80825b90969095509350505050565b60008084116111645760405162461bcd60e51b815260206004820152602b60248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4960448201527f4e5055545f414d4f554e540000000000000000000000000000000000000000006064820152608401610b1a565b6000831180156111745750600082115b6111d15760405162461bcd60e51b815260206004820152602860248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c604482015267495155494449545960c01b6064820152608401610b1a565b60006111df856103e5611f42565b905060006111ed8483611f42565b90506000826111fe876103e8611f42565b6112089190611fc9565b90506112148183611ec8565b979650505050505050565b606a54604080517fa2e6204500000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163a2e62045916004808301928692919082900301818387803b15801561127d57600080fd5b505af1158015611291573d6000803e3d6000fd5b505050506000606a60009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130e9190611f29565b61131990600a6120c5565b606a60009054906101000a90046001600160a01b03166001600160a01b0316634b94f50e6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561136c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113909190611f29565b61139a9085611f42565b6113ac90670de0b6b3a7640000611f42565b6113b69190611ec8565b9050836113c561271083611f42565b6113cf9190611ec8565b9150610a6a670de0b6b3a764000083611ec8565b600080826001600160a01b0316846001600160a01b0316141561146e5760405162461bcd60e51b815260206004820152602560248201527f556e697377617056324c6962726172793a204944454e544943414c5f4144445260448201527f45535345530000000000000000000000000000000000000000000000000000006064820152608401610b1a565b826001600160a01b0316846001600160a01b03161061148e578284611491565b83835b90925090506001600160a01b0382166114ec5760405162461bcd60e51b815260206004820152601e60248201527f556e697377617056324c6962726172793a205a45524f5f4144445245535300006044820152606401610b1a565b9250929050565b6000806114ff84610d07565b905060008582111561151e5761151486610fed565b9050859150611521565b50835b60675460665460405163a9059cbb60e01b81526001600160a01b03918216600482015260248101849052600092919091169063a9059cbb906044016020604051808303816000875af115801561157b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061159f9190611eea565b9050806115d8576040517f90b8ec1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6066546065546115f5916001600160a01b03918216911685611983565b6066546040517f6a6278420000000000000000000000000000000000000000000000000000000081526001600160a01b03878116600483015290911690636a627842906024016020604051808303816000875af115801561165a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061167e9190611f29565b60655460675491955061169e916001600160a01b039182169116876119b8565b5050509392505050565b6033546001600160a01b031633146109775760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b1a565b603380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040516001600160a01b03808516602483015283166044820152606481018290526117f99085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611b36565b50505050565b600054610100900460ff1661186a5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610b1a565b610977611c1e565b60008183106118815781611883565b825b9392505050565b60008084116119015760405162461bcd60e51b815260206004820152602560248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4160448201527f4d4f554e540000000000000000000000000000000000000000000000000000006064820152608401610b1a565b6000831180156119115750600082115b61196e5760405162461bcd60e51b815260206004820152602860248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c604482015267495155494449545960c01b6064820152608401610b1a565b826119798386611f42565b610a6a9190611ec8565b6040516001600160a01b0383166024820152604481018290526119b390849063a9059cbb60e01b90606401611795565b505050565b6040516370a0823160e01b8152306004820152839083906000906001600160a01b038316906370a08231906024016020604051808303816000875af1158015611a05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a299190611f29565b90508015611aa65760405163a9059cbb60e01b81526001600160a01b0385811660048301526024820183905283169063a9059cbb906044016020604051808303816000875af1158015611a80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aa49190611eea565b505b6040516370a0823160e01b81523060048201526000906001600160a01b038516906370a0823190602401602060405180830381865afa158015611aed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b119190611f29565b90508015611b2d57611b2d6001600160a01b0385168683611983565b50505050505050565b6000611b8b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611c929092919063ffffffff16565b9050805160001480611bac575080806020019051810190611bac9190611eea565b6119b35760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610b1a565b600054610100900460ff16611c895760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610b1a565b61097733611702565b6060610a6a848460008585600080866001600160a01b03168587604051611cb991906120fd565b60006040518083038185875af1925050503d8060008114611cf6576040519150601f19603f3d011682016040523d82523d6000602084013e611cfb565b606091505b50915091506112148783838760608315611d73578251611d6c576001600160a01b0385163b611d6c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610b1a565b5081610a6a565b610a6a8383815115611d885781518083602001fd5b8060405162461bcd60e51b8152600401610b1a9190612119565b6001600160a01b0381168114610b9457600080fd5b60008060008060808587031215611dcd57600080fd5b8435611dd881611da2565b93506020850135611de881611da2565b92506040850135611df881611da2565b91506060850135611e0881611da2565b939692955090935050565b600060208284031215611e2557600080fd5b5035919050565b600060208284031215611e3e57600080fd5b813561188381611da2565b600080600060608486031215611e5e57600080fd5b83359250602084013591506040840135611e7781611da2565b809150509250925092565b60008060408385031215611e9557600080fd5b823591506020830135611ea781611da2565b809150509250929050565b634e487b7160e01b600052601160045260246000fd5b600082611ee557634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215611efc57600080fd5b8151801515811461188357600080fd5b600060208284031215611f1e57600080fd5b815161188381611da2565b600060208284031215611f3b57600080fd5b5051919050565b6000816000190483118215151615611f5c57611f5c611eb2565b500290565b80516dffffffffffffffffffffffffffff81168114611f7f57600080fd5b919050565b600080600060608486031215611f9957600080fd5b611fa284611f61565b9250611fb060208501611f61565b9150604084015163ffffffff81168114611e7757600080fd5b60008219821115611fdc57611fdc611eb2565b500190565b600181815b8085111561201c57816000190482111561200257612002611eb2565b8085161561200f57918102915b93841c9390800290611fe6565b509250929050565b6000826120335750600161095f565b816120405750600061095f565b816001811461205657600281146120605761207c565b600191505061095f565b60ff84111561207157612071611eb2565b50506001821b61095f565b5060208310610133831016604e8410600b841016171561209f575081810a61095f565b6120a98383611fe1565b80600019048211156120bd576120bd611eb2565b029392505050565b60006118838383612024565b60005b838110156120ec5781810151838201526020016120d4565b838111156117f95750506000910152565b6000825161210f8184602087016120d1565b9190910192915050565b60208152600082518060208401526121388160408501602087016120d1565b601f01601f1916919091016040019291505056fea2646970667358221220730a89fb9a887e506ab0e1665e07482d2c2ef3bf82358226064b2c23ca1ea9ea64736f6c634300080c0033",
  "deployedBytecode": "0x6080604052600436106101795760003560e01c80638e614324116100cb578063d6b89a031161007f578063f2fde38b11610059578063f2fde38b146103fd578063fc0c546a1461041d578063fd7060621461043d5761019d565b8063d6b89a031461039d578063ed1bd76c146103bd578063edabc8f6146103dd5761019d565b8063b888879e116100b0578063b888879e1461034a578063c26974201461036a578063d5661c921461037d5761019d565b80638e614324146103145780639c8762e11461032a5761019d565b806355ac8d301161012d5780637c6ba9c1116101075780637c6ba9c1146102c15780638129fc1c146102e15780638da5cb5b146102f65761019d565b806355ac8d30146102765780636a7e9f3314610296578063715018a6146102ac5761019d565b8063372aa2241161015e578063372aa224146101f85780633fc8cef314610218578063470e9689146102555761019d565b8063370c3861146101b857806337279ffd146101d85761019d565b3661019d576067546001600160a01b0316331461019b576101993361045d565b505b005b6067546001600160a01b0316331461019b576101993361045d565b3480156101c457600080fd5b5061019b6101d3366004611db7565b61071b565b3480156101e457600080fd5b5061019b6101f3366004611e13565b6107eb565b34801561020457600080fd5b5061019b610213366004611e2c565b610834565b34801561022457600080fd5b50606754610238906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b610268610263366004611e2c565b610936565b60405190815260200161024c565b34801561028257600080fd5b50606854610238906001600160a01b031681565b3480156102a257600080fd5b5061026861271081565b3480156102b857600080fd5b5061019b610965565b3480156102cd57600080fd5b506102686102dc366004611e49565b610979565b3480156102ed57600080fd5b5061019b610a72565b34801561030257600080fd5b506033546001600160a01b0316610238565b34801561032057600080fd5b5061026860695481565b34801561033657600080fd5b50606b54610238906001600160a01b031681565b34801561035657600080fd5b50606a54610238906001600160a01b031681565b610268610378366004611e2c565b61045d565b34801561038957600080fd5b50606654610238906001600160a01b031681565b3480156103a957600080fd5b506102686103b8366004611e13565b610b97565b3480156103c957600080fd5b506102686103d8366004611e13565b610d07565b3480156103e957600080fd5b506102686103f8366004611e82565b610d23565b34801561040957600080fd5b5061019b610418366004611e2c565b610f60565b34801561042957600080fd5b50606554610238906001600160a01b031681565b34801561044957600080fd5b50610268610458366004611e13565b610fed565b60006001600160a01b03821661048657604051639fabe1c160e01b815260040160405180910390fd5b6000610493600234611ec8565b9050806104b35760405163090ac0d760e21b815260040160405180910390fd5b606760009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561050357600080fd5b505af1158015610517573d6000803e3d6000fd5b5050505050600080610527611009565b9150915060006105388484846110ed565b606a549091506001600160a01b031615610598576000610558858361121f565b9050606954811015610596576040517f334ee9a100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505b60675460665460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810187905291169063a9059cbb906044016020604051808303816000875af11580156105ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106119190611eea565b506067546065546000918291610633916001600160a01b0390811691166113e3565b6066546065549294509092506001600160a01b039081169163022c0d9f91808616911614610662576000610664565b845b6065546001600160a01b03858116911614610680576000610682565b855b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815260048101929092526024820152306044820152608060648201526000608482015260a401600060405180830381600087803b1580156106ec57600080fd5b505af1158015610700573d6000803e3d6000fd5b5050505061070f83878a6114f3565b98975050505050505050565b6107236116a8565b606754600160a01b900460ff1615610767576040517fd79c090e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606580546001600160a01b0395861673ffffffffffffffffffffffffffffffffffffffff19918216179091556067805460668054958816958416959095179094557fffffffffffffffffffffff00000000000000000000000000000000000000000090931693851693909317600160a01b1790915560688054919093169116179055565b6107f36116a8565b61271081111561082f576040517f648564d300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606955565b61083c6116a8565b6001600160a01b03811661086357604051639fabe1c160e01b815260040160405180910390fd5b606a805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038316908117909155604080517f88be91a000000000000000000000000000000000000000000000000000000000815290516388be91a0916004808201926020929091908290030181865afa1580156108e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109069190611f0c565b606b805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039290921691909117905550565b6000346109565760405163090ac0d760e21b815260040160405180910390fd5b61095f8261045d565b92915050565b61096d6116a8565b6109776000611702565b565b60006001600160a01b0382166109a257604051639fabe1c160e01b815260040160405180910390fd5b8315806109ad575082155b156109cb5760405163090ac0d760e21b815260040160405180910390fd5b6065546109e3906001600160a01b0316333087611761565b6067546040516323b872dd60e01b8152336004820152306024820152604481018590526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610a3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5e9190611eea565b50610a6a8484846114f3565b949350505050565b600054610100900460ff1615808015610a925750600054600160ff909116105b80610aac5750303b158015610aac575060005460ff166001145b610b235760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b6000805460ff191660011790558015610b46576000805461ff0019166101001790555b610b4e6117ff565b8015610b94576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b6000806000610ba4611009565b90925090506000610bc0610bb9600287611ec8565b84846110ed565b90506000606660009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3b9190611f29565b606754606554919250600091610c5d916001600160a01b0390811691166113e3565b5060655490915060009081906001600160a01b03808516911614610c8c57610c8660028a611ec8565b85610c98565b84610c9860028b611ec8565b606554919350915060009081906001600160a01b03868116911614610cbe578888610cc1565b87895b9092509050610cf882610cd48887611f42565b610cde9190611ec8565b82610ce98987611f42565b610cf39190611ec8565b611872565b9b9a5050505050505050505050565b6000806000610d14611009565b91509150610a6a84838361188a565b6068546000906001600160a01b03163314610d6a576040517fdeda903000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038216610d9157604051639fabe1c160e01b815260040160405180910390fd5b6000610d9e600285611ec8565b905080610dbe5760405163090ac0d760e21b815260040160405180910390fd5b600080610dc9611009565b915091506000610dda8484846110ed565b60675460665460405163a9059cbb60e01b81526001600160a01b03918216600482015260248101889052929350169063a9059cbb906044016020604051808303816000875af1158015610e31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e559190611eea565b506067546065546000918291610e77916001600160a01b0390811691166113e3565b6066546065549294509092506001600160a01b039081169163022c0d9f91808616911614610ea6576000610ea8565b845b6065546001600160a01b03858116911614610ec4576000610ec6565b855b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815260048101929092526024820152306044820152608060648201526000608482015260a401600060405180830381600087803b158015610f3057600080fd5b505af1158015610f44573d6000803e3d6000fd5b50505050610f5383878a6114f3565b9998505050505050505050565b610f686116a8565b6001600160a01b038116610fe45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610b1a565b610b9481611702565b6000806000610ffa611009565b91509150610a6a84828461188a565b6067546065546000918291829161102c916001600160a01b0391821691166113e3565b509050600080606660009054906101000a90046001600160a01b03166001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015611085573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a99190611f84565b506065546dffffffffffffffffffffffffffff9283169450911691506001600160a01b038481169116146110de5781816110e1565b80825b90969095509350505050565b60008084116111645760405162461bcd60e51b815260206004820152602b60248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4960448201527f4e5055545f414d4f554e540000000000000000000000000000000000000000006064820152608401610b1a565b6000831180156111745750600082115b6111d15760405162461bcd60e51b815260206004820152602860248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c604482015267495155494449545960c01b6064820152608401610b1a565b60006111df856103e5611f42565b905060006111ed8483611f42565b90506000826111fe876103e8611f42565b6112089190611fc9565b90506112148183611ec8565b979650505050505050565b606a54604080517fa2e6204500000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163a2e62045916004808301928692919082900301818387803b15801561127d57600080fd5b505af1158015611291573d6000803e3d6000fd5b505050506000606a60009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130e9190611f29565b61131990600a6120c5565b606a60009054906101000a90046001600160a01b03166001600160a01b0316634b94f50e6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561136c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113909190611f29565b61139a9085611f42565b6113ac90670de0b6b3a7640000611f42565b6113b69190611ec8565b9050836113c561271083611f42565b6113cf9190611ec8565b9150610a6a670de0b6b3a764000083611ec8565b600080826001600160a01b0316846001600160a01b0316141561146e5760405162461bcd60e51b815260206004820152602560248201527f556e697377617056324c6962726172793a204944454e544943414c5f4144445260448201527f45535345530000000000000000000000000000000000000000000000000000006064820152608401610b1a565b826001600160a01b0316846001600160a01b03161061148e578284611491565b83835b90925090506001600160a01b0382166114ec5760405162461bcd60e51b815260206004820152601e60248201527f556e697377617056324c6962726172793a205a45524f5f4144445245535300006044820152606401610b1a565b9250929050565b6000806114ff84610d07565b905060008582111561151e5761151486610fed565b9050859150611521565b50835b60675460665460405163a9059cbb60e01b81526001600160a01b03918216600482015260248101849052600092919091169063a9059cbb906044016020604051808303816000875af115801561157b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061159f9190611eea565b9050806115d8576040517f90b8ec1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6066546065546115f5916001600160a01b03918216911685611983565b6066546040517f6a6278420000000000000000000000000000000000000000000000000000000081526001600160a01b03878116600483015290911690636a627842906024016020604051808303816000875af115801561165a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061167e9190611f29565b60655460675491955061169e916001600160a01b039182169116876119b8565b5050509392505050565b6033546001600160a01b031633146109775760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b1a565b603380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6040516001600160a01b03808516602483015283166044820152606481018290526117f99085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611b36565b50505050565b600054610100900460ff1661186a5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610b1a565b610977611c1e565b60008183106118815781611883565b825b9392505050565b60008084116119015760405162461bcd60e51b815260206004820152602560248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4160448201527f4d4f554e540000000000000000000000000000000000000000000000000000006064820152608401610b1a565b6000831180156119115750600082115b61196e5760405162461bcd60e51b815260206004820152602860248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c604482015267495155494449545960c01b6064820152608401610b1a565b826119798386611f42565b610a6a9190611ec8565b6040516001600160a01b0383166024820152604481018290526119b390849063a9059cbb60e01b90606401611795565b505050565b6040516370a0823160e01b8152306004820152839083906000906001600160a01b038316906370a08231906024016020604051808303816000875af1158015611a05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a299190611f29565b90508015611aa65760405163a9059cbb60e01b81526001600160a01b0385811660048301526024820183905283169063a9059cbb906044016020604051808303816000875af1158015611a80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aa49190611eea565b505b6040516370a0823160e01b81523060048201526000906001600160a01b038516906370a0823190602401602060405180830381865afa158015611aed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b119190611f29565b90508015611b2d57611b2d6001600160a01b0385168683611983565b50505050505050565b6000611b8b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611c929092919063ffffffff16565b9050805160001480611bac575080806020019051810190611bac9190611eea565b6119b35760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610b1a565b600054610100900460ff16611c895760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610b1a565b61097733611702565b6060610a6a848460008585600080866001600160a01b03168587604051611cb991906120fd565b60006040518083038185875af1925050503d8060008114611cf6576040519150601f19603f3d011682016040523d82523d6000602084013e611cfb565b606091505b50915091506112148783838760608315611d73578251611d6c576001600160a01b0385163b611d6c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610b1a565b5081610a6a565b610a6a8383815115611d885781518083602001fd5b8060405162461bcd60e51b8152600401610b1a9190612119565b6001600160a01b0381168114610b9457600080fd5b60008060008060808587031215611dcd57600080fd5b8435611dd881611da2565b93506020850135611de881611da2565b92506040850135611df881611da2565b91506060850135611e0881611da2565b939692955090935050565b600060208284031215611e2557600080fd5b5035919050565b600060208284031215611e3e57600080fd5b813561188381611da2565b600080600060608486031215611e5e57600080fd5b83359250602084013591506040840135611e7781611da2565b809150509250925092565b60008060408385031215611e9557600080fd5b823591506020830135611ea781611da2565b809150509250929050565b634e487b7160e01b600052601160045260246000fd5b600082611ee557634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215611efc57600080fd5b8151801515811461188357600080fd5b600060208284031215611f1e57600080fd5b815161188381611da2565b600060208284031215611f3b57600080fd5b5051919050565b6000816000190483118215151615611f5c57611f5c611eb2565b500290565b80516dffffffffffffffffffffffffffff81168114611f7f57600080fd5b919050565b600080600060608486031215611f9957600080fd5b611fa284611f61565b9250611fb060208501611f61565b9150604084015163ffffffff81168114611e7757600080fd5b60008219821115611fdc57611fdc611eb2565b500190565b600181815b8085111561201c57816000190482111561200257612002611eb2565b8085161561200f57918102915b93841c9390800290611fe6565b509250929050565b6000826120335750600161095f565b816120405750600061095f565b816001811461205657600281146120605761207c565b600191505061095f565b60ff84111561207157612071611eb2565b50506001821b61095f565b5060208310610133831016604e8410600b841016171561209f575081810a61095f565b6120a98383611fe1565b80600019048211156120bd576120bd611eb2565b029392505050565b60006118838383612024565b60005b838110156120ec5781810151838201526020016120d4565b838111156117f95750506000910152565b6000825161210f8184602087016120d1565b9190910192915050565b60208152600082518060208401526121388160408501602087016120d1565b601f01601f1916919091016040019291505056fea2646970667358221220730a89fb9a887e506ab0e1665e07482d2c2ef3bf82358226064b2c23ca1ea9ea64736f6c634300080c0033",
  "devdoc": {
    "author": "Prime Devs",
    "kind": "dev",
    "methods": {
      "addLiquidityETHOnly(address)": {
        "params": {
          "to": "address of lp token"
        },
        "returns": {
          "_0": "liquidity lp amount"
        }
      },
      "addLiquidityWETHOnly(uint256,address)": {
        "params": {
          "_amount": "of WETH",
          "to": "address of lp token"
        },
        "returns": {
          "_0": "liquidity lp amount"
        }
      },
      "getLPTokenPerEthUnit(uint256)": {
        "params": {
          "ethAmt": "ETH amount"
        },
        "returns": {
          "liquidity": "LP amount"
        }
      },
      "initLiquidityZap(address,address,address,address)": {
        "params": {
          "helper_": "Pool helper contract",
          "tokenWethPair_": "LP pair",
          "token_": "PRNT address",
          "weth_": "WETH address"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "quote(uint256)": {
        "params": {
          "wethAmount": "PRNT amount"
        },
        "returns": {
          "optimalTokenAmount": "Output PRNT amount"
        }
      },
      "quoteFromToken(uint256)": {
        "params": {
          "tokenAmount": "PRNT amount"
        },
        "returns": {
          "optimalWETHAmount": "Output WETH amount"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setAcceptableRatio(uint256)": {
        "params": {
          "_acceptableRatio": "Acceptable slippage ratio."
        }
      },
      "setPriceProvider(address)": {
        "params": {
          "_provider": "Price provider contract address."
        }
      },
      "standardAdd(uint256,uint256,address)": {
        "details": "use with quote",
        "params": {
          "_wethAmt": "WETH amount",
          "to": "LP address to be transferred",
          "tokenAmount": "PRNT amount"
        },
        "returns": {
          "_0": "liquidity LP amount"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "zapETH(address)": {
        "params": {
          "_onBehalf": "of the user"
        },
        "returns": {
          "_0": "liquidity lp amount"
        }
      }
    },
    "title": "Prime token contract with OFT integration",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "RATIO_DIVISOR()": {
        "notice": "ratio Divisor"
      },
      "acceptableRatio()": {
        "notice": "Acceptable ratio"
      },
      "addLiquidityETHOnly(address)": {
        "notice": "Add liquidity with ETH"
      },
      "addLiquidityWETHOnly(uint256,address)": {
        "notice": "Add liquidity with WETH"
      },
      "ethOracle()": {
        "notice": "ETH oracle contract"
      },
      "getLPTokenPerEthUnit(uint256)": {
        "notice": "LP token amount entitled with ETH"
      },
      "initLiquidityZap(address,address,address,address)": {
        "notice": "Initialize liquidity zap param"
      },
      "initialize()": {
        "notice": "Initialize"
      },
      "priceProvider()": {
        "notice": "Price provider contract"
      },
      "quote(uint256)": {
        "notice": "Quote PRNT amount from WETH"
      },
      "quoteFromToken(uint256)": {
        "notice": "Quote WETH amount from PRNT"
      },
      "setAcceptableRatio(uint256)": {
        "notice": "Set Acceptable Ratio."
      },
      "setPriceProvider(address)": {
        "notice": "Set Price Provider."
      },
      "standardAdd(uint256,uint256,address)": {
        "notice": "Add liquidity with PRNT and WETH"
      },
      "zapETH(address)": {
        "notice": "Zap ethereum"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 139,
        "contract": "contracts/prime/zap/helpers/LiquidityZap.sol:LiquidityZap",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 142,
        "contract": "contracts/prime/zap/helpers/LiquidityZap.sol:LiquidityZap",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 809,
        "contract": "contracts/prime/zap/helpers/LiquidityZap.sol:LiquidityZap",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 11,
        "contract": "contracts/prime/zap/helpers/LiquidityZap.sol:LiquidityZap",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 131,
        "contract": "contracts/prime/zap/helpers/LiquidityZap.sol:LiquidityZap",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 10158,
        "contract": "contracts/prime/zap/helpers/LiquidityZap.sol:LiquidityZap",
        "label": "token",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 10160,
        "contract": "contracts/prime/zap/helpers/LiquidityZap.sol:LiquidityZap",
        "label": "tokenWETHPair",
        "offset": 0,
        "slot": "102",
        "type": "t_address"
      },
      {
        "astId": 10163,
        "contract": "contracts/prime/zap/helpers/LiquidityZap.sol:LiquidityZap",
        "label": "weth",
        "offset": 0,
        "slot": "103",
        "type": "t_contract(IWETH)5412"
      },
      {
        "astId": 10165,
        "contract": "contracts/prime/zap/helpers/LiquidityZap.sol:LiquidityZap",
        "label": "initializedLiquidityZap",
        "offset": 20,
        "slot": "103",
        "type": "t_bool"
      },
      {
        "astId": 10167,
        "contract": "contracts/prime/zap/helpers/LiquidityZap.sol:LiquidityZap",
        "label": "poolHelper",
        "offset": 0,
        "slot": "104",
        "type": "t_address"
      },
      {
        "astId": 10174,
        "contract": "contracts/prime/zap/helpers/LiquidityZap.sol:LiquidityZap",
        "label": "acceptableRatio",
        "offset": 0,
        "slot": "105",
        "type": "t_uint256"
      },
      {
        "astId": 10178,
        "contract": "contracts/prime/zap/helpers/LiquidityZap.sol:LiquidityZap",
        "label": "priceProvider",
        "offset": 0,
        "slot": "106",
        "type": "t_contract(IPriceProvider)5329"
      },
      {
        "astId": 10182,
        "contract": "contracts/prime/zap/helpers/LiquidityZap.sol:LiquidityZap",
        "label": "ethOracle",
        "offset": 0,
        "slot": "107",
        "type": "t_contract(IChainlinkAdapter)3959"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IChainlinkAdapter)3959": {
        "encoding": "inplace",
        "label": "contract IChainlinkAdapter",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceProvider)5329": {
        "encoding": "inplace",
        "label": "contract IPriceProvider",
        "numberOfBytes": "20"
      },
      "t_contract(IWETH)5412": {
        "encoding": "inplace",
        "label": "contract IWETH",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}