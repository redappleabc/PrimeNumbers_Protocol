{
  "address": "0xfc58e368d8eCccBB52919ce830fC41bD893164Ed",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AddressZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AlreadyStarted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ArrayLengthMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BountyOnly",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CadenceTooLong",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DuplicateSchedule",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExceedsMaxInt",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientPermission",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidRToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidStart",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAscending",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEligible",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotMFD",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotRTokenOrMfd",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NothingToVest",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OutOfRewards",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PoolExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnknownPool",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalSupply",
          "type": "uint256"
        }
      ],
      "name": "BalanceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "_allocPoints",
          "type": "uint256[]"
        }
      ],
      "name": "BatchAllocPointsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_bountyManager",
          "type": "address"
        }
      ],
      "name": "BountyManagerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_balance",
          "type": "uint256"
        }
      ],
      "name": "ChefReserveLow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "Disqualified",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bool",
          "name": "_newVal",
          "type": "bool"
        }
      ],
      "name": "EligibilityEnabledUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "startTimeOffsets",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "rewardsPerSeconds",
          "type": "uint256[]"
        }
      ],
      "name": "EmissionScheduleAppended",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_lapse",
          "type": "uint256"
        }
      ],
      "name": "EndingTimeUpdateCadence",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract ILeverager",
          "name": "_leverager",
          "type": "address"
        }
      ],
      "name": "LeveragerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IOnwardIncentivesController",
          "name": "_incentives",
          "type": "address"
        }
      ],
      "name": "OnwardIncentivesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "RewardDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "rewardsPerSecond",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "persist",
          "type": "bool"
        }
      ],
      "name": "RewardsPerSecondUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "accountedRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        }
      ],
      "name": "addPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "afterLockUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "allPendingRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pending",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_allocPoints",
          "type": "uint256[]"
        }
      ],
      "name": "batchUpdateAllocPoint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "beforeLockUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bountyManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "claimAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_execute",
          "type": "bool"
        }
      ],
      "name": "claimBounty",
      "outputs": [
        {
          "internalType": "bool",
          "name": "issueBaseBounty",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositedRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eligibilityEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "eligibilityExempt",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eligibleDataProvider",
      "outputs": [
        {
          "internalType": "contract IEligibilityDataProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "emissionSchedule",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "startTimeOffset",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "rewardsPerSecond",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emissionScheduleIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endRewardTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endingTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "estimatedTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastUpdatedTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updateCadence",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalSupply",
          "type": "uint256"
        }
      ],
      "name": "handleActionAfter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "handleActionBefore",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poolConfigurator",
          "type": "address"
        },
        {
          "internalType": "contract IEligibilityDataProvider",
          "name": "_eligibleDataProvider",
          "type": "address"
        },
        {
          "internalType": "contract IMiddleFeeDistribution",
          "name": "_rewardMinter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_rewardsPerSecond",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastAllPoolUpdate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastRPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "leverager",
      "outputs": [
        {
          "internalType": "contract ILeverager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        }
      ],
      "name": "pendingRewards",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "persistRewardsPerSecond",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolConfigurator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accRewardPerShare",
          "type": "uint256"
        },
        {
          "internalType": "contract IOnwardIncentivesController",
          "name": "onwardIncentives",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "registerRewardDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "registeredTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardMinter",
      "outputs": [
        {
          "internalType": "contract IMiddleFeeDistribution",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsPerSecond",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bountyManager",
          "type": "address"
        }
      ],
      "name": "setBountyManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_newVal",
          "type": "bool"
        }
      ],
      "name": "setEligibilityEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contract",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_value",
          "type": "bool"
        }
      ],
      "name": "setEligibilityExempt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_startTimeOffsets",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_rewardsPerSecond",
          "type": "uint256[]"
        }
      ],
      "name": "setEmissionSchedule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lapse",
          "type": "uint256"
        }
      ],
      "name": "setEndingTimeUpdateCadence",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ILeverager",
          "name": "_leverager",
          "type": "address"
        }
      ],
      "name": "setLeverager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "contract IOnwardIncentivesController",
          "name": "_incentives",
          "type": "address"
        }
      ],
      "name": "setOnwardIncentives",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rewardsPerSecond",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_persist",
          "type": "bool"
        }
      ],
      "name": "setRewardsPerSecond",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "start",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAllocPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userBaseClaimable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastClaimTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1b546e98d3d3fa8bd09537ea1fd012a007ac8dfdab80f636375fb6b22808a427",
  "receipt": {
    "to": null,
    "from": "0xdE8023f05d831Fb7381486D041237ddEB06c1BA2",
    "contractAddress": "0xfc58e368d8eCccBB52919ce830fC41bD893164Ed",
    "transactionIndex": 7,
    "gasUsed": "3255595",
    "logsBloom": "0x
    "blockHash": "0xf4b947d4cef205c2391d21b681db4ee712c08666f6530032277536b57669c97a",
    "transactionHash": "0x1b546e98d3d3fa8bd09537ea1fd012a007ac8dfdab80f636375fb6b22808a427",
    "logs": [
      {
        "transactionIndex": 7,
        "blockNumber": 43440084,
        "transactionHash": "0x1b546e98d3d3fa8bd09537ea1fd012a007ac8dfdab80f636375fb6b22808a427",
        "address": "0xfc58e368d8eCccBB52919ce830fC41bD893164Ed",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 5,
        "blockHash": "0xf4b947d4cef205c2391d21b681db4ee712c08666f6530032277536b57669c97a"
      }
    ],
    "blockNumber": 43440084,
    "cumulativeGasUsed": "4172577",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "03fb271fcd9a8bdbb208a1ee12eca1ca",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyStarted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ArrayLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BountyOnly\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CadenceTooLong\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DuplicateSchedule\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceedsMaxInt\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientPermission\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStart\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAscending\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEligible\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotMFD\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotRTokenOrMfd\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NothingToVest\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OutOfRewards\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnknownPool\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"BalanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_allocPoints\",\"type\":\"uint256[]\"}],\"name\":\"BatchAllocPointsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_bountyManager\",\"type\":\"address\"}],\"name\":\"BountyManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"ChefReserveLow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Disqualified\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"_newVal\",\"type\":\"bool\"}],\"name\":\"EligibilityEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"startTimeOffsets\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"rewardsPerSeconds\",\"type\":\"uint256[]\"}],\"name\":\"EmissionScheduleAppended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_lapse\",\"type\":\"uint256\"}],\"name\":\"EndingTimeUpdateCadence\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ILeverager\",\"name\":\"_leverager\",\"type\":\"address\"}],\"name\":\"LeveragerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IOnwardIncentivesController\",\"name\":\"_incentives\",\"type\":\"address\"}],\"name\":\"OnwardIncentivesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"RewardDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"rewardsPerSecond\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"persist\",\"type\":\"bool\"}],\"name\":\"RewardsPerSecondUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accountedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"afterLockUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"allPendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pending\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_allocPoints\",\"type\":\"uint256[]\"}],\"name\":\"batchUpdateAllocPoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"beforeLockUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bountyManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"claimAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_execute\",\"type\":\"bool\"}],\"name\":\"claimBounty\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"issueBaseBounty\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eligibilityEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"eligibilityExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eligibleDataProvider\",\"outputs\":[{\"internalType\":\"contract IEligibilityDataProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"emissionSchedule\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"startTimeOffset\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rewardsPerSecond\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emissionScheduleIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endRewardTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"estimatedTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdatedTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updateCadence\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"}],\"name\":\"handleActionAfter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"handleActionBefore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolConfigurator\",\"type\":\"address\"},{\"internalType\":\"contract IEligibilityDataProvider\",\"name\":\"_eligibleDataProvider\",\"type\":\"address\"},{\"internalType\":\"contract IMiddleFeeDistribution\",\"name\":\"_rewardMinter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardsPerSecond\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastAllPoolUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leverager\",\"outputs\":[{\"internalType\":\"contract ILeverager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"persistRewardsPerSecond\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolConfigurator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accRewardPerShare\",\"type\":\"uint256\"},{\"internalType\":\"contract IOnwardIncentivesController\",\"name\":\"onwardIncentives\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"registerRewardDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"registeredTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardMinter\",\"outputs\":[{\"internalType\":\"contract IMiddleFeeDistribution\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsPerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bountyManager\",\"type\":\"address\"}],\"name\":\"setBountyManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_newVal\",\"type\":\"bool\"}],\"name\":\"setEligibilityEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setEligibilityExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_startTimeOffsets\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_rewardsPerSecond\",\"type\":\"uint256[]\"}],\"name\":\"setEmissionSchedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lapse\",\"type\":\"uint256\"}],\"name\":\"setEndingTimeUpdateCadence\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILeverager\",\"name\":\"_leverager\",\"type\":\"address\"}],\"name\":\"setLeverager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"contract IOnwardIncentivesController\",\"name\":\"_incentives\",\"type\":\"address\"}],\"name\":\"setOnwardIncentives\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardsPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_persist\",\"type\":\"bool\"}],\"name\":\"setRewardsPerSecond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userBaseClaimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Prime based on the Sushi MasterChef\\thttps://github.com/sushiswap/sushiswap/blob/master/contracts/MasterChef.sol\",\"kind\":\"dev\",\"methods\":{\"addPool(address,uint256)\":{\"details\":\"Add a new lp to the pool. Can only be called by the poolConfigurator.\",\"params\":{\"_allocPoint\":\"allocation point of the pool\",\"_token\":\"for reward pool\"}},\"afterLockUpdate(address)\":{\"details\":\"Called by the locking contracts after locking or unlocking happens\",\"params\":{\"_user\":\"address\"}},\"allPendingRewards(address)\":{\"params\":{\"_user\":\"address of the user\"},\"returns\":{\"pending\":\"reward amount\"}},\"batchUpdateAllocPoint(address[],uint256[])\":{\"details\":\"Update the given pool's allocation point. Can only be called by the owner.\",\"params\":{\"_allocPoints\":\"allocation points of the pools\",\"_tokens\":\"for reward pools\"}},\"beforeLockUpdate(address)\":{\"details\":\"Called by the locking contracts before locking or unlocking happens\",\"params\":{\"_user\":\"address\"}},\"claim(address,address[])\":{\"params\":{\"_tokens\":\"array of reward-bearing tokens\",\"_user\":\"address for claim\"}},\"claimAll(address)\":{\"params\":{\"_user\":\"address of the user\"}},\"claimBounty(address,bool)\":{\"params\":{\"_execute\":\"true if it's actual execution\",\"_user\":\"address of recipient\"},\"returns\":{\"issueBaseBounty\":\"true for base bounty\"}},\"handleActionAfter(address,uint256,uint256)\":{\"details\":\"important! eligible status can be updated here\",\"params\":{\"_balance\":\"balance of token\",\"_totalSupply\":\"total supply of the token\",\"_user\":\"address\"}},\"handleActionBefore(address)\":{\"params\":{\"_user\":\"address\"}},\"initialize(address,address,address,uint256)\":{\"params\":{\"_eligibleDataProvider\":\"Eligibility Data provider address\",\"_poolConfigurator\":\"Pool configurator address\",\"_rewardMinter\":\"Middle fee distribution contract\",\"_rewardsPerSecond\":\"RPS\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"pendingRewards(address,address[])\":{\"params\":{\"_tokens\":\"array of reward-bearing tokens\",\"_user\":\"address for claim\"},\"returns\":{\"_0\":\"claimable rewards array\"}},\"poolLength()\":{\"details\":\"Returns length of reward pools.\"},\"recoverERC20(address,uint256)\":{\"params\":{\"tokenAddress\":\"Token address for recover\",\"tokenAmount\":\"Amount to recover\"}},\"registerRewardDeposit(uint256)\":{\"details\":\"Only callable by owner.\",\"params\":{\"_amount\":\"new deposit amount\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setBountyManager(address)\":{\"details\":\"Updates bounty manager contract.\",\"params\":{\"_bountyManager\":\"Bounty Manager contract.\"}},\"setEligibilityEnabled(bool)\":{\"details\":\"Enable/Disable eligibility\",\"params\":{\"_newVal\":\"New value.\"}},\"setEligibilityExempt(address,bool)\":{\"details\":\"Can be called by owner or leverager contract\",\"params\":{\"_contract\":\"address to exempt\",\"_value\":\"flag for exempt\"}},\"setEmissionSchedule(uint256[],uint256[])\":{\"details\":\"This appends the new offsets and RPS.\",\"params\":{\"_rewardsPerSecond\":\"RPS array.\",\"_startTimeOffsets\":\"Offsets array.\"}},\"setEndingTimeUpdateCadence(uint256)\":{\"details\":\"Only callable by owner.\",\"params\":{\"_lapse\":\"new cadence\"}},\"setLeverager(address)\":{\"params\":{\"_leverager\":\"contract\"}},\"setOnwardIncentives(address,address)\":{\"params\":{\"_incentives\":\"incentives contract address\",\"_token\":\"for reward pool\"}},\"setRewardsPerSecond(uint256,bool)\":{\"details\":\"Its decimals count is ACC_REWARD_PRECISION\",\"params\":{\"_persist\":\"true if RPS is fixed, otherwise RPS is by emission schedule.\",\"_rewardsPerSecond\":\"The amount of reward to be distributed per second.\"}},\"start()\":{\"details\":\"Starts PRNT emission.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"ChefIncentivesController Contract\",\"version\":1},\"userdoc\":{\"events\":{\"Recovered(address,uint256)\":{\"notice\":\"Emitted when ERC20 token is recovered\"}},\"kind\":\"user\",\"methods\":{\"afterLockUpdate(address)\":{\"notice\":\"Hook for lock update.\"},\"allPendingRewards(address)\":{\"notice\":\"Sum of all pending PRNT rewards.\"},\"beforeLockUpdate(address)\":{\"notice\":\"Hook for lock update.\"},\"claim(address,address[])\":{\"notice\":\"Claim rewards. They are vested into MFD.\"},\"claimAll(address)\":{\"notice\":\"Claim rewards entitled to all registered tokens.\"},\"claimBounty(address,bool)\":{\"notice\":\"Claim bounty\"},\"endRewardTime()\":{\"notice\":\"Ending reward distribution time.\"},\"handleActionAfter(address,uint256,uint256)\":{\"notice\":\"`after` Hook for deposit and borrow update.\"},\"handleActionBefore(address)\":{\"notice\":\"`before` Hook for deposit and borrow update.\"},\"initialize(address,address,address,uint256)\":{\"notice\":\"Initializer\"},\"pause()\":{\"notice\":\"Pause the claim operations.\"},\"pendingRewards(address,address[])\":{\"notice\":\"Pending rewards of a user.\"},\"recoverERC20(address,uint256)\":{\"notice\":\"Recover tokens in this contract. Callable by owner.\"},\"registerRewardDeposit(uint256)\":{\"notice\":\"Add new rewards.\"},\"setEligibilityExempt(address,bool)\":{\"notice\":\"Exempt a contract from eligibility check.\"},\"setEmissionSchedule(uint256[],uint256[])\":{\"notice\":\"Updates PRNT emission schedule.\"},\"setEndingTimeUpdateCadence(uint256)\":{\"notice\":\"Updates cadence duration of ending time.\"},\"setLeverager(address)\":{\"notice\":\"Updates leverager, only callable by owner.\"},\"setOnwardIncentives(address,address)\":{\"notice\":\"Sets incentive controllers for custom token.\"},\"setRewardsPerSecond(uint256,bool)\":{\"notice\":\"Sets the reward per second to be distributed. Can only be called by the owner.\"},\"unpause()\":{\"notice\":\"Unpause the claim operations.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/prime/staking/ChefIncentivesController.sol\":\"ChefIncentivesController\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x359a1ab89b46b9aba7bcad3fb651924baf4893d15153049b9976b0fc9be1358e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xad32f6821f860555f9530902a65b54203a4f5db2117f4384ae47a124958078db\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"contracts/interfaces/IEligibilityDataProvider.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface IEligibilityDataProvider {\\n\\tfunction refresh(address user) external returns (bool currentEligibility);\\n\\n\\tfunction updatePrice() external;\\n\\n\\tfunction requiredEthValue(address user) external view returns (uint256 required);\\n\\n\\tfunction isEligibleForRewards(address _user) external view returns (bool isEligible);\\n\\n\\tfunction lastEligibleTime(address user) external view returns (uint256 lastEligibleTimestamp);\\n\\n\\tfunction lockedUsdValue(address user) external view returns (uint256);\\n\\n\\tfunction requiredUsdValue(address user) external view returns (uint256 required);\\n\\n\\tfunction lastEligibleStatus(address user) external view returns (bool);\\n\\n\\tfunction rewardEligibleAmount(address token) external view returns (uint256);\\n\\n\\tfunction setDqTime(address _user, uint256 _time) external;\\n\\n\\tfunction getDqTime(address _user) external view returns (uint256);\\n\\n\\tfunction autoprune() external returns (uint256 processed);\\n\\n\\tfunction requiredDepositRatio() external view returns (uint256);\\n\\n\\tfunction RATIO_DIVISOR() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x8ce465d9ef3bf4dff1413fc63746903164aad8e1bb444d71e0e4c1e2b8fdd12a\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IFeeDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"./LockedBalance.sol\\\";\\n\\ninterface IFeeDistribution {\\n\\tstruct RewardData {\\n\\t\\taddress token;\\n\\t\\tuint256 amount;\\n\\t}\\n\\n\\tfunction addReward(address rewardsToken) external;\\n\\n\\tfunction removeReward(address _rewardToken) external;\\n}\\n\",\"keccak256\":\"0x421b5d02ce20947dda76d10f1398c5c075cae789bd453b61935d9b2609c5ac48\",\"license\":\"MIT\"},\"contracts/interfaces/ILeverager.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.8.12;\\npragma experimental ABIEncoderV2;\\n\\ninterface ILeverager {\\n\\tfunction wethToZap(address user) external view returns (uint256);\\n\\n\\tfunction zapWETHWithBorrow(uint256 amount, address borrower) external returns (uint256 liquidity);\\n}\\n\",\"keccak256\":\"0x6ae5b49768475ef9abbee55e099073ba413fe7fceef2d127f3101307862f7779\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IMiddleFeeDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"./LockedBalance.sol\\\";\\nimport {IFeeDistribution} from \\\"./IMultiFeeDistribution.sol\\\";\\n\\ninterface IMiddleFeeDistribution is IFeeDistribution {\\n\\tfunction forwardReward(address[] memory _rewardTokens) external;\\n\\n\\tfunction getPrntTokenAddress() external view returns (address);\\n\\n\\tfunction getMultiFeeDistributionAddress() external view returns (address);\\n\\n\\tfunction operationExpenseRatio() external view returns (uint256);\\n\\n\\tfunction operationExpenses() external view returns (address);\\n\\n\\tfunction isRewardToken(address) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xb688e0d696dc8cdd48ef421fa3f41e5c978dd538cf576eb751636f0f32d749e6\",\"license\":\"MIT\"},\"contracts/interfaces/IMintableToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IMintableToken is IERC20 {\\n\\tfunction mint(address _receiver, uint256 _amount) external returns (bool);\\n\\n\\tfunction burn(uint256 _amount) external returns (bool);\\n\\n\\tfunction setMinter(address _minter) external returns (bool);\\n\\n\\tfunction priceProvider() external view returns (address);\\n}\\n\",\"keccak256\":\"0x095eacfa4ddae47eb3053bc93643d78a683b6006009ce949ea8addf76c886aec\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/IMultiFeeDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"./LockedBalance.sol\\\";\\nimport \\\"./IFeeDistribution.sol\\\";\\nimport \\\"./IMintableToken.sol\\\";\\n\\ninterface IMultiFeeDistribution is IFeeDistribution {\\n\\tfunction exit(bool claimRewards) external;\\n\\n\\tfunction stake(uint256 amount, address onBehalfOf, uint256 typeIndex) external;\\n\\n\\tfunction prntToken() external view returns (IMintableToken);\\n\\n\\tfunction getPriceProvider() external view returns (address);\\n\\n\\tfunction lockInfo(address user) external view returns (LockedBalance[] memory);\\n\\n\\tfunction autocompoundEnabled(address user) external view returns (bool);\\n\\n\\tfunction defaultLockIndex(address _user) external view returns (uint256);\\n\\n\\tfunction autoRelockDisabled(address user) external view returns (bool);\\n\\n\\tfunction totalBalance(address user) external view returns (uint256);\\n\\n\\tfunction lockedBalance(address user) external view returns (uint256);\\n\\n\\tfunction lockedBalances(\\n\\t\\taddress user\\n\\t) external view returns (uint256, uint256, uint256, uint256, LockedBalance[] memory);\\n\\n\\tfunction getBalances(address _user) external view returns (Balances memory);\\n\\n\\tfunction zapVestingToLp(address _address) external returns (uint256);\\n\\n\\tfunction claimableRewards(address account) external view returns (IFeeDistribution.RewardData[] memory rewards);\\n\\n\\tfunction setDefaultRelockTypeIndex(uint256 _index) external;\\n\\n\\tfunction daoTreasury() external view returns (address);\\n\\n\\tfunction stakingToken() external view returns (address);\\n\\n\\tfunction userSlippage(address) external view returns (uint256);\\n\\n\\tfunction claimFromConverter(address) external;\\n\\n\\tfunction vestTokens(address user, uint256 amount, bool withPenalty) external;\\n}\\n\\ninterface IMFDPlus is IMultiFeeDistribution {\\n\\tfunction getLastClaimTime(address _user) external returns (uint256);\\n\\n\\tfunction claimBounty(address _user, bool _execute) external returns (bool issueBaseBounty);\\n\\n\\tfunction claimCompound(address _user, bool _execute, uint256 _slippage) external returns (uint256 bountyAmt);\\n\\n\\tfunction setAutocompound(bool _newVal) external;\\n\\n\\tfunction getAutocompoundEnabled(address _user) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x6eae75bc31ca20b94f425a2ba2aede758baf09fc2ae38f630a38abf4ff15a72c\",\"license\":\"MIT\"},\"contracts/interfaces/IOnwardIncentivesController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\ninterface IOnwardIncentivesController {\\n\\tfunction handleAction(address _token, address _user, uint256 _balance, uint256 _totalSupply) external;\\n}\\n\",\"keccak256\":\"0x53d333c3a28b09048673e830b3311e53e0b27fc6a15f4f7a28e410cdcd9227f4\",\"license\":\"MIT\"},\"contracts/interfaces/LockedBalance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\nstruct LockedBalance {\\n\\tuint256 amount;\\n\\tuint256 unlockTime;\\n\\tuint256 multiplier;\\n\\tuint256 duration;\\n}\\n\\nstruct EarnedBalance {\\n\\tuint256 amount;\\n\\tuint256 unlockTime;\\n\\tuint256 penalty;\\n}\\n\\nstruct Reward {\\n\\tuint256 periodFinish;\\n\\tuint256 rewardPerSecond;\\n\\tuint256 lastUpdateTime;\\n\\tuint256 rewardPerTokenStored;\\n\\t// tracks already-added balances to handle accrued interest in aToken rewards\\n\\t// for the stakingToken this value is unused and will always be 0\\n\\tuint256 balance;\\n}\\n\\nstruct Balances {\\n\\tuint256 total; // sum of earnings and lockings; no use when LP and PRNT is different\\n\\tuint256 unlocked; // PRNT token\\n\\tuint256 locked; // LP token or PRNT token\\n\\tuint256 lockedWithMultiplier; // Multiplied locked amount\\n\\tuint256 earned; // PRNT token\\n}\\n\",\"keccak256\":\"0x6dbc04232605f1510a1db1b9c9467bb99cda33ac2335775e5faae2cc7d4eef07\",\"license\":\"MIT\"},\"contracts/prime/libraries/RecoverERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/// @title RecoverERC20 contract\\n/// @author Prime Devs\\n/// @dev All function calls are currently implemented without side effects\\ncontract RecoverERC20 {\\n\\tusing SafeERC20 for IERC20;\\n\\n\\t/// @notice Emitted when ERC20 token is recovered\\n\\tevent Recovered(address indexed token, uint256 amount);\\n\\n\\t/**\\n\\t * @notice Added to support recovering LP Rewards from other systems such as BAL to be distributed to holders\\n\\t */\\n\\tfunction _recoverERC20(address tokenAddress, uint256 tokenAmount) internal {\\n\\t\\tIERC20(tokenAddress).safeTransfer(msg.sender, tokenAmount);\\n\\t\\temit Recovered(tokenAddress, tokenAmount);\\n\\t}\\n}\\n\",\"keccak256\":\"0x722c49abbca1b04a363084d729efbf41aa6ac01bff477c39b754e22a10e698df\",\"license\":\"MIT\"},\"contracts/prime/staking/ChefIncentivesController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {PausableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\n\\nimport {RecoverERC20} from \\\"../libraries/RecoverERC20.sol\\\";\\nimport {IMultiFeeDistribution} from \\\"../../interfaces/IMultiFeeDistribution.sol\\\";\\nimport {IEligibilityDataProvider} from \\\"../../interfaces/IEligibilityDataProvider.sol\\\";\\nimport {ILeverager} from \\\"../../interfaces/ILeverager.sol\\\";\\nimport {IOnwardIncentivesController} from \\\"../../interfaces/IOnwardIncentivesController.sol\\\";\\nimport {IMiddleFeeDistribution} from \\\"../../interfaces/IMiddleFeeDistribution.sol\\\";\\n\\n/// @title ChefIncentivesController Contract\\n/// @author Prime\\n/// based on the Sushi MasterChef\\n///\\thttps://github.com/sushiswap/sushiswap/blob/master/contracts/MasterChef.sol\\ncontract ChefIncentivesController is Initializable, PausableUpgradeable, OwnableUpgradeable, RecoverERC20 {\\n\\tusing SafeERC20 for IERC20;\\n\\n\\t// Info of each user.\\n\\t// reward = user.`amount` * pool.`accRewardPerShare` - `rewardDebt`\\n\\tstruct UserInfo {\\n\\t\\tuint256 amount;\\n\\t\\tuint256 rewardDebt;\\n\\t\\tuint256 lastClaimTime;\\n\\t}\\n\\n\\t// Info of each pool.\\n\\tstruct PoolInfo {\\n\\t\\tuint256 totalSupply;\\n\\t\\tuint256 allocPoint; // How many allocation points assigned to this pool.\\n\\t\\tuint256 lastRewardTime; // Last second that reward distribution occurs.\\n\\t\\tuint256 accRewardPerShare; // Accumulated rewards per share, times ACC_REWARD_PRECISION. See below.\\n\\t\\tIOnwardIncentivesController onwardIncentives;\\n\\t}\\n\\n\\t// Info about token emissions for a given time period.\\n\\tstruct EmissionPoint {\\n\\t\\tuint128 startTimeOffset;\\n\\t\\tuint128 rewardsPerSecond;\\n\\t}\\n\\n\\t// Info about ending time of reward emissions\\n\\tstruct EndingTime {\\n\\t\\tuint256 estimatedTime;\\n\\t\\tuint256 lastUpdatedTime;\\n\\t\\tuint256 updateCadence;\\n\\t}\\n\\n\\t/********************** Events ***********************/\\n\\t// Emitted when rewardPerSecond is updated\\n\\tevent RewardsPerSecondUpdated(uint256 indexed rewardsPerSecond, bool persist);\\n\\n\\tevent BalanceUpdated(address indexed token, address indexed user, uint256 balance, uint256 totalSupply);\\n\\n\\tevent EmissionScheduleAppended(uint256[] startTimeOffsets, uint256[] rewardsPerSeconds);\\n\\n\\tevent ChefReserveLow(uint256 indexed _balance);\\n\\n\\tevent Disqualified(address indexed user);\\n\\n\\tevent OnwardIncentivesUpdated(address indexed _token, IOnwardIncentivesController _incentives);\\n\\n\\tevent BountyManagerUpdated(address indexed _bountyManager);\\n\\n\\tevent EligibilityEnabledUpdated(bool indexed _newVal);\\n\\n\\tevent BatchAllocPointsUpdated(address[] _tokens, uint256[] _allocPoints);\\n\\n\\tevent LeveragerUpdated(ILeverager _leverager);\\n\\n\\tevent EndingTimeUpdateCadence(uint256 indexed _lapse);\\n\\n\\tevent RewardDeposit(uint256 indexed _amount);\\n\\n\\t/********************** Errors ***********************/\\n\\terror AddressZero();\\n\\n\\terror UnknownPool();\\n\\n\\terror PoolExists();\\n\\n\\terror AlreadyStarted();\\n\\n\\terror NotAllowed();\\n\\n\\terror ArrayLengthMismatch();\\n\\n\\terror NotAscending();\\n\\n\\terror ExceedsMaxInt();\\n\\n\\terror InvalidStart();\\n\\n\\terror InvalidRToken();\\n\\n\\terror InsufficientPermission();\\n\\n\\terror NotMFD();\\n\\n\\terror BountyOnly();\\n\\n\\terror NotEligible();\\n\\n\\terror CadenceTooLong();\\n\\n\\terror NotRTokenOrMfd();\\n\\n\\terror OutOfRewards();\\n\\n\\terror NothingToVest();\\n\\n\\terror DuplicateSchedule();\\n\\n\\t// multiplier for reward calc\\n\\tuint256 private constant ACC_REWARD_PRECISION = 1e12;\\n\\n\\t// Data about the future reward rates. emissionSchedule stored in chronological order,\\n\\t// whenever the duration since the start timestamp exceeds the next timestamp offset a new\\n\\t// reward rate is applied.\\n\\tEmissionPoint[] public emissionSchedule;\\n\\n\\t// If true, keep this new reward rate indefinitely\\n\\t// If false, keep this reward rate until the next scheduled block offset, then return to the schedule.\\n\\tbool public persistRewardsPerSecond;\\n\\n\\t/********************** Emission Info ***********************/\\n\\n\\t// Array of tokens for reward\\n\\taddress[] public registeredTokens;\\n\\n\\t// Current reward per second\\n\\tuint256 public rewardsPerSecond;\\n\\n\\t// last RPS, used during refill after reserve empty\\n\\tuint256 public lastRPS;\\n\\n\\t// Index in emission schedule which the last rewardsPerSeconds was used\\n\\t// only used for scheduled rewards\\n\\tuint256 public emissionScheduleIndex;\\n\\n\\t// Info of each pool.\\n\\tmapping(address => PoolInfo) public poolInfo;\\n\\tmapping(address => bool) private validRTokens;\\n\\n\\t// Total allocation points. Must be the sum of all allocation points in all pools.\\n\\tuint256 public totalAllocPoint;\\n\\n\\t// token => user => Info of each user that stakes LP tokens.\\n\\tmapping(address => mapping(address => UserInfo)) public userInfo;\\n\\n\\t// user => base claimable balance\\n\\tmapping(address => uint256) public userBaseClaimable;\\n\\n\\t// MFD, bounties, AC, middlefee\\n\\tmapping(address => bool) public eligibilityExempt;\\n\\n\\t// The block number when reward mining starts.\\n\\tuint256 public startTime;\\n\\n\\t// Option for eligibility\\n\\tbool public eligibilityEnabled;\\n\\n\\t// Address for PoolConfigurator\\n\\taddress public poolConfigurator;\\n\\n\\t// Amount of deposited rewards\\n\\tuint256 public depositedRewards;\\n\\n\\t// Amount of accumulated rewards\\n\\tuint256 public accountedRewards;\\n\\n\\t// Timestamp when all pools updated\\n\\tuint256 public lastAllPoolUpdate;\\n\\n\\t// Middle Fee Distribution contract\\n\\tIMiddleFeeDistribution public rewardMinter;\\n\\n\\t// Eligiblity Data Provider contract\\n\\tIEligibilityDataProvider public eligibleDataProvider;\\n\\n\\t// Bounty Manager contract\\n\\taddress public bountyManager;\\n\\n\\t// Leverager contract\\n\\tILeverager public leverager;\\n\\n\\t// Info of reward emission end time\\n\\tEndingTime public endingTime;\\n\\n\\tconstructor() {\\n\\t\\t_disableInitializers();\\n\\t}\\n\\n\\t/**\\n\\t * @notice Initializer\\n\\t * @param _poolConfigurator Pool configurator address\\n\\t * @param _eligibleDataProvider Eligibility Data provider address\\n\\t * @param _rewardMinter Middle fee distribution contract\\n\\t * @param _rewardsPerSecond RPS\\n\\t */\\n\\tfunction initialize(\\n\\t\\taddress _poolConfigurator,\\n\\t\\tIEligibilityDataProvider _eligibleDataProvider,\\n\\t\\tIMiddleFeeDistribution _rewardMinter,\\n\\t\\tuint256 _rewardsPerSecond\\n\\t) public initializer {\\n\\t\\tif (_poolConfigurator == address(0)) revert AddressZero();\\n\\t\\tif (address(_eligibleDataProvider) == address(0)) revert AddressZero();\\n\\t\\tif (address(_rewardMinter) == address(0)) revert AddressZero();\\n\\n\\t\\t__Ownable_init();\\n\\t\\t__Pausable_init();\\n\\n\\t\\tpoolConfigurator = _poolConfigurator;\\n\\t\\teligibleDataProvider = _eligibleDataProvider;\\n\\t\\trewardMinter = _rewardMinter;\\n\\t\\trewardsPerSecond = _rewardsPerSecond;\\n\\t\\tpersistRewardsPerSecond = true;\\n\\n\\t\\teligibilityEnabled = true;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns length of reward pools.\\n\\t */\\n\\tfunction poolLength() public view returns (uint256) {\\n\\t\\treturn registeredTokens.length;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns address of MFD.\\n\\t * @return mfd contract address\\n\\t */\\n\\tfunction _getMfd() internal view returns (IMultiFeeDistribution mfd) {\\n\\t\\taddress multiFeeDistribution = rewardMinter.getMultiFeeDistributionAddress();\\n\\t\\tmfd = IMultiFeeDistribution(multiFeeDistribution);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Sets incentive controllers for custom token.\\n\\t * @param _token for reward pool\\n\\t * @param _incentives incentives contract address\\n\\t */\\n\\tfunction setOnwardIncentives(address _token, IOnwardIncentivesController _incentives) external onlyOwner {\\n\\t\\tPoolInfo storage pool = poolInfo[_token];\\n\\t\\tif (pool.lastRewardTime == 0) revert UnknownPool();\\n\\t\\tpool.onwardIncentives = _incentives;\\n\\t\\temit OnwardIncentivesUpdated(_token, _incentives);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Updates bounty manager contract.\\n\\t * @param _bountyManager Bounty Manager contract.\\n\\t */\\n\\tfunction setBountyManager(address _bountyManager) external onlyOwner {\\n\\t\\tbountyManager = _bountyManager;\\n\\t\\temit BountyManagerUpdated(_bountyManager);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Enable/Disable eligibility\\n\\t * @param _newVal New value.\\n\\t */\\n\\tfunction setEligibilityEnabled(bool _newVal) external onlyOwner {\\n\\t\\teligibilityEnabled = _newVal;\\n\\t\\temit EligibilityEnabledUpdated(_newVal);\\n\\t}\\n\\n\\t/********************** Pool Setup + Admin ***********************/\\n\\n\\t/**\\n\\t * @dev Starts PRNT emission.\\n\\t */\\n\\tfunction start() public onlyOwner {\\n\\t\\tif (startTime != 0) revert AlreadyStarted();\\n\\t\\tstartTime = block.timestamp;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Add a new lp to the pool. Can only be called by the poolConfigurator.\\n\\t * @param _token for reward pool\\n\\t * @param _allocPoint allocation point of the pool\\n\\t */\\n\\tfunction addPool(address _token, uint256 _allocPoint) external {\\n\\t\\tif (msg.sender != poolConfigurator) revert NotAllowed();\\n\\t\\tif (poolInfo[_token].lastRewardTime != 0) revert PoolExists();\\n\\t\\t_updateEmissions();\\n\\t\\ttotalAllocPoint = totalAllocPoint + _allocPoint;\\n\\t\\tregisteredTokens.push(_token);\\n\\t\\tPoolInfo storage pool = poolInfo[_token];\\n\\t\\tpool.allocPoint = _allocPoint;\\n\\t\\tpool.lastRewardTime = block.timestamp;\\n\\t\\tpool.onwardIncentives = IOnwardIncentivesController(address(0));\\n\\t\\tvalidRTokens[_token] = true;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Update the given pool's allocation point. Can only be called by the owner.\\n\\t * @param _tokens for reward pools\\n\\t * @param _allocPoints allocation points of the pools\\n\\t */\\n\\tfunction batchUpdateAllocPoint(address[] calldata _tokens, uint256[] calldata _allocPoints) external onlyOwner {\\n\\t\\tif (_tokens.length != _allocPoints.length) revert ArrayLengthMismatch();\\n\\t\\t_massUpdatePools();\\n\\t\\tuint256 _totalAllocPoint = totalAllocPoint;\\n\\t\\tuint256 length = _tokens.length;\\n\\t\\tfor (uint256 i; i < length; ) {\\n\\t\\t\\tPoolInfo storage pool = poolInfo[_tokens[i]];\\n\\t\\t\\tif (pool.lastRewardTime == 0) revert UnknownPool();\\n\\t\\t\\t_totalAllocPoint = _totalAllocPoint - pool.allocPoint + _allocPoints[i];\\n\\t\\t\\tpool.allocPoint = _allocPoints[i];\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\ttotalAllocPoint = _totalAllocPoint;\\n\\t\\temit BatchAllocPointsUpdated(_tokens, _allocPoints);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Sets the reward per second to be distributed. Can only be called by the owner.\\n\\t * @dev Its decimals count is ACC_REWARD_PRECISION\\n\\t * @param _rewardsPerSecond The amount of reward to be distributed per second.\\n\\t * @param _persist true if RPS is fixed, otherwise RPS is by emission schedule.\\n\\t */\\n\\tfunction setRewardsPerSecond(uint256 _rewardsPerSecond, bool _persist) external onlyOwner {\\n\\t\\t_massUpdatePools();\\n\\t\\trewardsPerSecond = _rewardsPerSecond;\\n\\t\\tpersistRewardsPerSecond = _persist;\\n\\t\\temit RewardsPerSecondUpdated(_rewardsPerSecond, _persist);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Updates RPS.\\n\\t */\\n\\tfunction setScheduledRewardsPerSecond() internal {\\n\\t\\tif (!persistRewardsPerSecond) {\\n\\t\\t\\tuint256 length = emissionSchedule.length;\\n\\t\\t\\tuint256 i = emissionScheduleIndex;\\n\\t\\t\\tuint128 offset = uint128(block.timestamp - startTime);\\n\\t\\t\\tfor (; i < length && offset >= emissionSchedule[i].startTimeOffset; ) {\\n\\t\\t\\t\\tunchecked {\\n\\t\\t\\t\\t\\ti++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (i > emissionScheduleIndex) {\\n\\t\\t\\t\\temissionScheduleIndex = i;\\n\\t\\t\\t\\t_massUpdatePools();\\n\\t\\t\\t\\trewardsPerSecond = uint256(emissionSchedule[i - 1].rewardsPerSecond);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Ensure that the specified time offset hasn't been registered already.\\n\\t * @param _startTimeOffset time offset\\n\\t * @return true if the specified time offset is already registered\\n\\t */\\n\\tfunction _checkDuplicateSchedule(uint256 _startTimeOffset) internal view returns (bool) {\\n\\t\\tuint256 length = emissionSchedule.length;\\n\\t\\tfor (uint256 i = 0; i < length; ) {\\n\\t\\t\\tif (emissionSchedule[i].startTimeOffset == _startTimeOffset) {\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Updates PRNT emission schedule.\\n\\t * @dev This appends the new offsets and RPS.\\n\\t * @param _startTimeOffsets Offsets array.\\n\\t * @param _rewardsPerSecond RPS array.\\n\\t */\\n\\tfunction setEmissionSchedule(\\n\\t\\tuint256[] calldata _startTimeOffsets,\\n\\t\\tuint256[] calldata _rewardsPerSecond\\n\\t) external onlyOwner {\\n\\t\\tuint256 length = _startTimeOffsets.length;\\n\\t\\tif (length <= 0 || length != _rewardsPerSecond.length) revert ArrayLengthMismatch();\\n\\n\\t\\tfor (uint256 i = 0; i < length; ) {\\n\\t\\t\\tif (i > 0) {\\n\\t\\t\\t\\tif (_startTimeOffsets[i - 1] > _startTimeOffsets[i]) revert NotAscending();\\n\\t\\t\\t}\\n\\t\\t\\tif (_startTimeOffsets[i] > type(uint128).max) revert ExceedsMaxInt();\\n\\t\\t\\tif (_rewardsPerSecond[i] > type(uint128).max) revert ExceedsMaxInt();\\n\\t\\t\\tif (_checkDuplicateSchedule(_startTimeOffsets[i])) revert DuplicateSchedule();\\n\\n\\t\\t\\tif (startTime > 0) {\\n\\t\\t\\t\\tif (_startTimeOffsets[i] < block.timestamp - startTime) revert InvalidStart();\\n\\t\\t\\t}\\n\\t\\t\\temissionSchedule.push(\\n\\t\\t\\t\\tEmissionPoint({\\n\\t\\t\\t\\t\\tstartTimeOffset: uint128(_startTimeOffsets[i]),\\n\\t\\t\\t\\t\\trewardsPerSecond: uint128(_rewardsPerSecond[i])\\n\\t\\t\\t\\t})\\n\\t\\t\\t);\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\temit EmissionScheduleAppended(_startTimeOffsets, _rewardsPerSecond);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Recover tokens in this contract. Callable by owner.\\n\\t * @param tokenAddress Token address for recover\\n\\t * @param tokenAmount Amount to recover\\n\\t */\\n\\tfunction recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyOwner {\\n\\t\\t_recoverERC20(tokenAddress, tokenAmount);\\n\\t}\\n\\n\\t/********************** Pool State Changers ***********************/\\n\\n\\t/**\\n\\t * @dev Update emission params of CIC.\\n\\t */\\n\\tfunction _updateEmissions() internal {\\n\\t\\tif (block.timestamp > endRewardTime()) {\\n\\t\\t\\t_massUpdatePools();\\n\\t\\t\\tlastRPS = rewardsPerSecond;\\n\\t\\t\\trewardsPerSecond = 0;\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tsetScheduledRewardsPerSecond();\\n\\t}\\n\\n\\t/**\\n\\t * @dev Update reward variables for all pools.\\n\\t */\\n\\tfunction _massUpdatePools() internal {\\n\\t\\tuint256 totalAP = totalAllocPoint;\\n\\t\\tuint256 length = poolLength();\\n\\t\\tfor (uint256 i; i < length; ) {\\n\\t\\t\\t_updatePool(poolInfo[registeredTokens[i]], totalAP);\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tlastAllPoolUpdate = block.timestamp;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Update reward variables of the given pool to be up-to-date.\\n\\t * @param pool pool info\\n\\t * @param _totalAllocPoint allocation point of the pool\\n\\t */\\n\\tfunction _updatePool(PoolInfo storage pool, uint256 _totalAllocPoint) internal {\\n\\t\\tuint256 timestamp = block.timestamp;\\n\\t\\tuint256 endReward = endRewardTime();\\n\\t\\tif (endReward <= timestamp) {\\n\\t\\t\\ttimestamp = endReward;\\n\\t\\t}\\n\\t\\tif (timestamp <= pool.lastRewardTime) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\t(uint256 reward, uint256 newAccRewardPerShare) = _newRewards(pool, _totalAllocPoint);\\n\\t\\taccountedRewards = accountedRewards + reward;\\n\\t\\tpool.accRewardPerShare = pool.accRewardPerShare + newAccRewardPerShare;\\n\\t\\tpool.lastRewardTime = timestamp;\\n\\t}\\n\\n\\t/********************** Emission Calc + Transfer ***********************/\\n\\n\\t/**\\n\\t * @notice Pending rewards of a user.\\n\\t * @param _user address for claim\\n\\t * @param _tokens array of reward-bearing tokens\\n\\t * @return claimable rewards array\\n\\t */\\n\\tfunction pendingRewards(address _user, address[] memory _tokens) public view returns (uint256[] memory) {\\n\\t\\tuint256[] memory claimable = new uint256[](_tokens.length);\\n\\t\\tuint256 length = _tokens.length;\\n\\t\\tfor (uint256 i; i < length; ) {\\n\\t\\t\\taddress token = _tokens[i];\\n\\t\\t\\tPoolInfo storage pool = poolInfo[token];\\n\\t\\t\\tUserInfo storage user = userInfo[token][_user];\\n\\t\\t\\tuint256 accRewardPerShare = pool.accRewardPerShare;\\n\\t\\t\\tif (block.timestamp > pool.lastRewardTime) {\\n\\t\\t\\t\\t(, uint256 newAccRewardPerShare) = _newRewards(pool, totalAllocPoint);\\n\\t\\t\\t\\taccRewardPerShare = accRewardPerShare + newAccRewardPerShare;\\n\\t\\t\\t}\\n\\t\\t\\tclaimable[i] = (user.amount * accRewardPerShare) / ACC_REWARD_PRECISION - user.rewardDebt;\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn claimable;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Claim rewards. They are vested into MFD.\\n\\t * @param _user address for claim\\n\\t * @param _tokens array of reward-bearing tokens\\n\\t */\\n\\tfunction claim(address _user, address[] memory _tokens) public whenNotPaused {\\n\\t\\tif (eligibilityEnabled) {\\n\\t\\t\\tcheckAndProcessEligibility(_user, true, true);\\n\\t\\t}\\n\\n\\t\\t_updateEmissions();\\n\\n\\t\\tuint256 currentTimestamp = block.timestamp;\\n\\n\\t\\tuint256 pending = userBaseClaimable[_user];\\n\\t\\tuserBaseClaimable[_user] = 0;\\n\\t\\tuint256 _totalAllocPoint = totalAllocPoint;\\n\\t\\tuint256 length = _tokens.length;\\n\\t\\tfor (uint256 i; i < length; ) {\\n\\t\\t\\tif (!validRTokens[_tokens[i]]) revert InvalidRToken();\\n\\t\\t\\tPoolInfo storage pool = poolInfo[_tokens[i]];\\n\\t\\t\\tif (pool.lastRewardTime == 0) revert UnknownPool();\\n\\t\\t\\t_updatePool(pool, _totalAllocPoint);\\n\\t\\t\\tUserInfo storage user = userInfo[_tokens[i]][_user];\\n\\t\\t\\tuint256 rewardDebt = (user.amount * pool.accRewardPerShare) / ACC_REWARD_PRECISION;\\n\\t\\t\\tpending = pending + rewardDebt - user.rewardDebt;\\n\\t\\t\\tuser.rewardDebt = rewardDebt;\\n\\t\\t\\tuser.lastClaimTime = currentTimestamp;\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t_vestTokens(_user, pending);\\n\\n\\t\\teligibleDataProvider.updatePrice();\\n\\n\\t\\tif (endRewardTime() < currentTimestamp + 5 days) {\\n\\t\\t\\taddress prntToken = rewardMinter.getPrntTokenAddress();\\n\\t\\t\\temit ChefReserveLow(IERC20(prntToken).balanceOf(address(this)));\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Vest tokens to MFD.\\n\\t * @param _user address to receive\\n\\t * @param _amount to vest\\n\\t */\\n\\tfunction _vestTokens(address _user, uint256 _amount) internal {\\n\\t\\tif (_amount == 0) revert NothingToVest();\\n\\t\\tIMultiFeeDistribution mfd = _getMfd();\\n\\t\\t_sendPrime(address(mfd), _amount);\\n\\t\\tmfd.vestTokens(_user, _amount, true);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Exempt a contract from eligibility check.\\n\\t * @dev Can be called by owner or leverager contract\\n\\t * @param _contract address to exempt\\n\\t * @param _value flag for exempt\\n\\t */\\n\\tfunction setEligibilityExempt(address _contract, bool _value) public {\\n\\t\\tif (msg.sender != owner() && msg.sender != address(leverager)) revert InsufficientPermission();\\n\\t\\teligibilityExempt[_contract] = _value;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Updates leverager, only callable by owner.\\n\\t * @param _leverager contract\\n\\t */\\n\\tfunction setLeverager(ILeverager _leverager) external onlyOwner {\\n\\t\\tleverager = _leverager;\\n\\t\\temit LeveragerUpdated(_leverager);\\n\\t}\\n\\n\\t/********************** Eligibility + Disqualification ***********************/\\n\\n\\t/**\\n\\t * @notice `after` Hook for deposit and borrow update.\\n\\t * @dev important! eligible status can be updated here\\n\\t * @param _user address\\n\\t * @param _balance balance of token\\n\\t * @param _totalSupply total supply of the token\\n\\t */\\n\\tfunction handleActionAfter(address _user, uint256 _balance, uint256 _totalSupply) external {\\n\\t\\tif (!validRTokens[msg.sender] && msg.sender != address(_getMfd())) revert NotRTokenOrMfd();\\n\\n\\t\\tif (_user == address(rewardMinter) || _user == address(_getMfd()) || eligibilityExempt[_user]) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif (eligibilityEnabled) {\\n\\t\\t\\tbool lastEligibleStatus = eligibleDataProvider.lastEligibleStatus(_user);\\n\\t\\t\\tbool isCurrentlyEligible = eligibleDataProvider.refresh(_user);\\n\\t\\t\\tif (isCurrentlyEligible) {\\n\\t\\t\\t\\tif (lastEligibleStatus) {\\n\\t\\t\\t\\t\\t_handleActionAfterForToken(msg.sender, _user, _balance, _totalSupply);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\t_updateRegisteredBalance(_user);\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t_processEligibility(_user, isCurrentlyEligible, true);\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\t_handleActionAfterForToken(msg.sender, _user, _balance, _totalSupply);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice `after` Hook for deposit and borrow update.\\n\\t * @dev important! eligible status can be updated here\\n\\t * @param _token address\\n\\t * @param _user address\\n\\t * @param _balance new amount\\n\\t * @param _totalSupply total supply of the token\\n\\t */\\n\\tfunction _handleActionAfterForToken(\\n\\t\\taddress _token,\\n\\t\\taddress _user,\\n\\t\\tuint256 _balance,\\n\\t\\tuint256 _totalSupply\\n\\t) internal {\\n\\t\\tPoolInfo storage pool = poolInfo[_token];\\n\\t\\tif (pool.lastRewardTime == 0) revert UnknownPool();\\n\\t\\t// Although we would want the pools to be as up to date as possible when users\\n\\t\\t// transfer rTokens or dTokens, updating all pools on every r-/d-Token interaction would be too gas intensive.\\n\\t\\t// _updateEmissions();\\n\\t\\t_updatePool(pool, totalAllocPoint);\\n\\t\\tUserInfo storage user = userInfo[_token][_user];\\n\\t\\tuint256 amount = user.amount;\\n\\t\\tuint256 accRewardPerShare = pool.accRewardPerShare;\\n\\t\\tif (amount != 0) {\\n\\t\\t\\tuint256 pending = (amount * accRewardPerShare) / ACC_REWARD_PRECISION - user.rewardDebt;\\n\\t\\t\\tif (pending != 0) {\\n\\t\\t\\t\\tuserBaseClaimable[_user] = userBaseClaimable[_user] + pending;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tpool.totalSupply = pool.totalSupply - user.amount;\\n\\t\\tuser.amount = _balance;\\n\\t\\tuser.rewardDebt = (_balance * accRewardPerShare) / ACC_REWARD_PRECISION;\\n\\t\\tpool.totalSupply = pool.totalSupply + _balance;\\n\\t\\tif (pool.onwardIncentives != IOnwardIncentivesController(address(0))) {\\n\\t\\t\\tpool.onwardIncentives.handleAction(_token, _user, _balance, _totalSupply);\\n\\t\\t}\\n\\n\\t\\temit BalanceUpdated(_token, _user, _balance, _totalSupply);\\n\\t}\\n\\n\\t/**\\n\\t * @notice `before` Hook for deposit and borrow update.\\n\\t * @param _user address\\n\\t */\\n\\tfunction handleActionBefore(address _user) external {}\\n\\n\\t/**\\n\\t * @notice Hook for lock update.\\n\\t * @dev Called by the locking contracts before locking or unlocking happens\\n\\t * @param _user address\\n\\t */\\n\\tfunction beforeLockUpdate(address _user) external {}\\n\\n\\t/**\\n\\t * @notice Hook for lock update.\\n\\t * @dev Called by the locking contracts after locking or unlocking happens\\n\\t * @param _user address\\n\\t */\\n\\tfunction afterLockUpdate(address _user) external {\\n\\t\\tif (msg.sender != address(_getMfd())) revert NotMFD();\\n\\t\\tif (eligibilityEnabled) {\\n\\t\\t\\tbool isCurrentlyEligible = eligibleDataProvider.refresh(_user);\\n\\t\\t\\tif (isCurrentlyEligible) {\\n\\t\\t\\t\\t_updateRegisteredBalance(_user);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\t_processEligibility(_user, isCurrentlyEligible, true);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Update balance if there are any unregistered.\\n\\t * @param _user address of the user whose balances will be updated\\n\\t */\\n\\tfunction _updateRegisteredBalance(address _user) internal {\\n\\t\\tuint256 length = poolLength();\\n\\t\\tfor (uint256 i; i < length; ) {\\n\\t\\t\\tuint256 newBal = IERC20(registeredTokens[i]).balanceOf(_user);\\n\\t\\t\\tuint256 registeredBal = userInfo[registeredTokens[i]][_user].amount;\\n\\t\\t\\tif (newBal != 0 && newBal != registeredBal) {\\n\\t\\t\\t\\t_handleActionAfterForToken(\\n\\t\\t\\t\\t\\tregisteredTokens[i],\\n\\t\\t\\t\\t\\t_user,\\n\\t\\t\\t\\t\\tnewBal,\\n\\t\\t\\t\\t\\tpoolInfo[registeredTokens[i]].totalSupply + newBal - registeredBal\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/********************** Eligibility + Disqualification ***********************/\\n\\n\\t/**\\n\\t * @dev Returns true if `_user` has some reward eligible tokens.\\n\\t * @param _user address of recipient\\n\\t */\\n\\tfunction hasEligibleDeposits(address _user) internal view returns (bool hasDeposits) {\\n\\t\\tuint256 length = poolLength();\\n\\t\\tfor (uint256 i; i < length; ) {\\n\\t\\t\\tif (userInfo[registeredTokens[i]][_user].amount != 0) {\\n\\t\\t\\t\\thasDeposits = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Stop emissions if there's any new DQ.\\n\\t * @param _user address of recipient\\n\\t * @param _isEligible user's eligible status\\n\\t * @param _execute true if it's actual execution\\n\\t * @return issueBaseBounty true for base bounty\\n\\t */\\n\\tfunction _processEligibility(\\n\\t\\taddress _user,\\n\\t\\tbool _isEligible,\\n\\t\\tbool _execute\\n\\t) internal returns (bool issueBaseBounty) {\\n\\t\\tbool hasEligDeposits = hasEligibleDeposits(_user);\\n\\t\\tuint256 lastDqTime = eligibleDataProvider.getDqTime(_user);\\n\\t\\tbool alreadyDqd = lastDqTime != 0;\\n\\n\\t\\tif (!_isEligible && hasEligDeposits && !alreadyDqd) {\\n\\t\\t\\tissueBaseBounty = true;\\n\\t\\t}\\n\\t\\tif (_execute && issueBaseBounty) {\\n\\t\\t\\tstopEmissionsFor(_user);\\n\\t\\t\\temit Disqualified(_user);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Check eligibility of the user\\n\\t * @dev Stop emissions if there's any DQ.\\n\\t * @param _user address of recipient\\n\\t * @param _execute true if it's actual execution\\n\\t * @param _refresh true if needs to refresh user's eligible status\\n\\t * @return issueBaseBounty true for base bounty\\n\\t */\\n\\tfunction checkAndProcessEligibility(\\n\\t\\taddress _user,\\n\\t\\tbool _execute,\\n\\t\\tbool _refresh\\n\\t) internal returns (bool issueBaseBounty) {\\n\\t\\tbool isEligible;\\n\\t\\tif (_refresh && _execute) {\\n\\t\\t\\tisEligible = eligibleDataProvider.refresh(_user);\\n\\t\\t} else {\\n\\t\\t\\tisEligible = eligibleDataProvider.isEligibleForRewards(_user);\\n\\t\\t}\\n\\t\\tissueBaseBounty = _processEligibility(_user, isEligible, _execute);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Claim bounty\\n\\t * @param _user address of recipient\\n\\t * @param _execute true if it's actual execution\\n\\t * @return issueBaseBounty true for base bounty\\n\\t */\\n\\tfunction claimBounty(address _user, bool _execute) public returns (bool issueBaseBounty) {\\n\\t\\tif (msg.sender != address(bountyManager)) revert BountyOnly();\\n\\t\\tissueBaseBounty = checkAndProcessEligibility(_user, _execute, true);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Stop PRNT emissions for specific users\\n\\t * @param _user address of recipient\\n\\t */\\n\\tfunction stopEmissionsFor(address _user) internal {\\n\\t\\tif (!eligibilityEnabled) revert NotEligible();\\n\\t\\t// lastEligibleStatus will be fresh from refresh before this call\\n\\t\\tuint256 length = poolLength();\\n\\t\\tfor (uint256 i; i < length; ) {\\n\\t\\t\\taddress token = registeredTokens[i];\\n\\t\\t\\tPoolInfo storage pool = poolInfo[token];\\n\\t\\t\\tUserInfo storage user = userInfo[token][_user];\\n\\n\\t\\t\\tif (user.amount != 0) {\\n\\t\\t\\t\\t_handleActionAfterForToken(token, _user, 0, pool.totalSupply - user.amount);\\n\\t\\t\\t}\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\teligibleDataProvider.setDqTime(_user, block.timestamp);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Send PRNT rewards to user.\\n\\t * @param _user address of recipient\\n\\t * @param _amount of PRNT\\n\\t */\\n\\tfunction _sendPrime(address _user, uint256 _amount) internal {\\n\\t\\tif (_amount == 0) {\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\taddress prntToken = rewardMinter.getPrntTokenAddress();\\n\\t\\tuint256 chefReserve = IERC20(prntToken).balanceOf(address(this));\\n\\t\\tif (_amount > chefReserve) {\\n\\t\\t\\trevert OutOfRewards();\\n\\t\\t} else {\\n\\t\\t\\tIERC20(prntToken).safeTransfer(_user, _amount);\\n\\t\\t}\\n\\t}\\n\\n\\t/********************** PRNT Reserve Management ***********************/\\n\\n\\t/**\\n\\t * @notice Ending reward distribution time.\\n\\t */\\n\\tfunction endRewardTime() public returns (uint256) {\\n\\t\\tuint256 unclaimedRewards = availableRewards();\\n\\t\\tuint256 extra = 0;\\n\\t\\tuint256 length = poolLength();\\n\\t\\tfor (uint256 i; i < length; ) {\\n\\t\\t\\tPoolInfo storage pool = poolInfo[registeredTokens[i]];\\n\\n\\t\\t\\tif (pool.lastRewardTime > lastAllPoolUpdate) {\\n\\t\\t\\t\\textra +=\\n\\t\\t\\t\\t\\t((pool.lastRewardTime - lastAllPoolUpdate) * pool.allocPoint * rewardsPerSecond) /\\n\\t\\t\\t\\t\\ttotalAllocPoint;\\n\\t\\t\\t}\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tendingTime.lastUpdatedTime = block.timestamp;\\n\\n\\t\\tif (rewardsPerSecond == 0) {\\n\\t\\t\\tendingTime.estimatedTime = type(uint256).max;\\n\\t\\t} else {\\n\\t\\t\\tendingTime.estimatedTime = (unclaimedRewards + extra) / rewardsPerSecond + lastAllPoolUpdate;\\n\\t\\t}\\n\\t\\treturn endingTime.estimatedTime;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Updates cadence duration of ending time.\\n\\t * @dev Only callable by owner.\\n\\t * @param _lapse new cadence\\n\\t */\\n\\tfunction setEndingTimeUpdateCadence(uint256 _lapse) external onlyOwner {\\n\\t\\tif (_lapse > 1 weeks) revert CadenceTooLong();\\n\\t\\tendingTime.updateCadence = _lapse;\\n\\t\\temit EndingTimeUpdateCadence(_lapse);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Add new rewards.\\n\\t * @dev Only callable by owner.\\n\\t * @param _amount new deposit amount\\n\\t */\\n\\tfunction registerRewardDeposit(uint256 _amount) external onlyOwner {\\n\\t\\tdepositedRewards = depositedRewards + _amount;\\n\\t\\t_massUpdatePools();\\n\\t\\tif (rewardsPerSecond == 0 && lastRPS > 0) {\\n\\t\\t\\trewardsPerSecond = lastRPS;\\n\\t\\t}\\n\\t\\temit RewardDeposit(_amount);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Available reward amount for future distribution.\\n\\t * @dev This value is equal to `depositedRewards` - `accountedRewards`.\\n\\t * @return amount available\\n\\t */\\n\\tfunction availableRewards() internal view returns (uint256 amount) {\\n\\t\\treturn depositedRewards - accountedRewards;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Claim rewards entitled to all registered tokens.\\n\\t * @param _user address of the user\\n\\t */\\n\\tfunction claimAll(address _user) external {\\n\\t\\tclaim(_user, registeredTokens);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Sum of all pending PRNT rewards.\\n\\t * @param _user address of the user\\n\\t * @return pending reward amount\\n\\t */\\n\\tfunction allPendingRewards(address _user) public view returns (uint256 pending) {\\n\\t\\tpending = userBaseClaimable[_user];\\n\\t\\tuint256[] memory claimable = pendingRewards(_user, registeredTokens);\\n\\t\\tuint256 length = claimable.length;\\n\\t\\tfor (uint256 i; i < length; ) {\\n\\t\\t\\tpending += claimable[i];\\n\\t\\t\\tunchecked {\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Pause the claim operations.\\n\\t */\\n\\tfunction pause() external onlyOwner {\\n\\t\\t_pause();\\n\\t}\\n\\n\\t/**\\n\\t * @notice Unpause the claim operations.\\n\\t */\\n\\tfunction unpause() external onlyOwner {\\n\\t\\t_unpause();\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns new rewards since last reward time.\\n\\t * @param pool pool info\\n\\t * @param _totalAllocPoint allocation point of the pool\\n\\t */\\n\\tfunction _newRewards(\\n\\t\\tPoolInfo memory pool,\\n\\t\\tuint256 _totalAllocPoint\\n\\t) internal view returns (uint256 newReward, uint256 newAccRewardPerShare) {\\n\\t\\tuint256 lpSupply = pool.totalSupply;\\n\\t\\tif (lpSupply > 0) {\\n\\t\\t\\tuint256 duration = block.timestamp - pool.lastRewardTime;\\n\\t\\t\\tuint256 rawReward = duration * rewardsPerSecond;\\n\\n\\t\\t\\tuint256 rewards = availableRewards();\\n\\t\\t\\tif (rewards < rawReward) {\\n\\t\\t\\t\\trawReward = rewards;\\n\\t\\t\\t}\\n\\t\\t\\tnewReward = (rawReward * pool.allocPoint) / _totalAllocPoint;\\n\\t\\t\\tnewAccRewardPerShare = (newReward * ACC_REWARD_PRECISION) / lpSupply;\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0xde9cd7d717585e972d6bf48a880abf473528bcffadfea92e8024630c0fb68c09\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000022565b620000e3565b600054610100900460ff16156200008f5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811614620000e1576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b61399580620000f36000396000f3fe608060405234801561001057600080fd5b50600436106103575760003560e01c8063800ce1da116101c8578063be9a655511610104578063de7e410c116100a2578063f2fde38b1161007c578063f2fde38b14610773578063f5fe161014610786578063f6d69c2814610799578063ff66a305146107ac57600080fd5b8063de7e410c1461073f578063eacdaabc14610757578063f187186c1461076057600080fd5b8063cd1a4d86116100de578063cd1a4d86146106f3578063cf756fdf14610706578063d055709014610719578063db3e34611461072c57600080fd5b8063be9a6555146106cb578063bfccff45146106d3578063cccd82b01461066f57600080fd5b80639a7b5f1111610171578063b26770f71161014b578063b26770f714610693578063b36b9ffd146106a6578063ba04a111146106b9578063be05d3fb146106c257600080fd5b80639a7b5f11146105f85780639b5a734f1461066f5780639b8e55631461068057600080fd5b80638da5cb5b116101a25780638da5cb5b146105c15780638e2eba09146105d25780639a0ba2ea146105e557600080fd5b8063800ce1da146105995780638456cb59146105a65780638980f11f146105ae57600080fd5b80633df8161c116102975780636c47a6c31161024057806377329f351161021a57806377329f3514610561578063779f61691461057457806378e979251461057d5780637ab8955d1461058657600080fd5b80636c47a6c31461053e5780636d4f675c14610550578063715018a61461055957600080fd5b80635d8e5d49116102715780635d8e5d49146104ed5780635ea3f4fa146105005780635fe4f7411461051357600080fd5b80633df8161c146104ba5780633f4ba83a146104da5780635c975abb146104e257600080fd5b80631b2064f71161030457806332a9caba116102de57806332a9caba1461044e578063334d0bbd1461046157806334c54230146104945780633adcdfc8146104a757600080fd5b80631b2064f7146104195780631d94f24d1461042657806325dc43871461043b57600080fd5b80630c634248116103355780630c634248146103b25780630f208beb146103bb57806317caf6f11461041057600080fd5b806302a247701461035c5780630702a95d14610377578063081e3eda146103aa575b600080fd5b6103646107bf565b6040519081526020015b60405180910390f35b61039a610385366004613391565b60a26020526000908152604090205460ff1681565b604051901515815260200161036e565b609954610364565b610364609c5481565b6103f56103c93660046133ae565b60a060209081526000928352604080842090915290825290208054600182015460029092015490919083565b6040805193845260208401929092529082015260600161036e565b610364609f5481565b60985461039a9060ff1681565b6104396104343660046133e7565b6108ce565b005b61043961044936600461342a565b610af6565b61043961045c36600461344f565b610b56565b61047461046f36600461347b565b610c96565b604080516001600160801b0393841681529290911660208301520161036e565b6104396104a23660046134e0565b610ccb565b6104396104b5366004613391565b610e27565b6104cd6104c8366004613562565b610f16565b60405161036e919061363c565b610439611097565b60335460ff1661039a565b6104396104fb366004613680565b6110a9565b61036461050e366004613391565b611131565b60a954610526906001600160a01b031681565b6040516001600160a01b03909116815260200161036e565b60ac5460ad5460ae546103f592919083565b61036460a55481565b6104396111f6565b61043961056f366004613391565b611208565b61036460a75481565b61036460a35481565b61039a610594366004613680565b61126c565b60a45461039a9060ff1681565b6104396112c6565b6104396105bc36600461344f565b6112d6565b6065546001600160a01b0316610526565b6104396105e0366004613562565b6112e8565b6105266105f336600461347b565b611685565b61063e610606366004613391565b609d6020526000908152604090208054600182015460028301546003840154600490940154929391929091906001600160a01b031685565b6040805195865260208601949094529284019190915260608301526001600160a01b0316608082015260a00161036e565b61043961067d366004613391565b50565b60a854610526906001600160a01b031681565b6104396106a136600461347b565b6116af565b60aa54610526906001600160a01b031681565b610364609b5481565b61036460a65481565b610439611727565b6103646106e1366004613391565b60a16020526000908152604090205481565b6104396107013660046133ae565b61176f565b6104396107143660046136ae565b61180e565b61043961072736600461347b565b611a33565b60ab54610526906001600160a01b031681565b60a4546105269061010090046001600160a01b031681565b610364609a5481565b61043961076e366004613391565b611aa0565b610439610781366004613391565b611afc565b6104396107943660046136ff565b611b89565b6104396107a73660046134e0565b611bce565b6104396107ba366004613391565b611e8d565b6000806107ca611edf565b90506000806107d860995490565b905060005b81811015610884576000609d6000609984815481106107fe576107fe61371c565b60009182526020808320909101546001600160a01b03168352820192909252604001902060a7546002820154919250101561087b57609f54609a54826001015460a75484600201546108509190613748565b61085a919061375f565b610864919061375f565b61086e919061377e565b61087890856137a0565b93505b506001016107dd565b504260ad55609a5461089b5760001960ac556108c3565b60a754609a546108ab84866137a0565b6108b5919061377e565b6108bf91906137a0565b60ac555b505060ac5492915050565b336000908152609e602052604090205460ff1615801561090757506108f1611ef6565b6001600160a01b0316336001600160a01b031614155b1561093e576040517f2c36303b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60a8546001600160a01b0384811691161480610972575061095d611ef6565b6001600160a01b0316836001600160a01b0316145b8061099557506001600160a01b038316600090815260a2602052604090205460ff165b1561099f57505050565b60a45460ff1615610ae55760a9546040517f5de20b420000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301526000921690635de20b4290602401602060405180830381865afa158015610a0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3291906137b8565b60a954604051630afb040960e01b81526001600160a01b03878116600483015292935060009290911690630afb0409906024016020604051808303816000875af1158015610a84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa891906137b8565b90508015610ad0578115610ac757610ac233868686611f76565b610ade565b610ac2856121a9565b610adc8582600161234a565b505b5050505050565b610af133848484611f76565b505050565b610afe61245e565b610b066124b8565b609a8290556098805460ff191682151590811790915560405190815282907f91bb2acfac3265da2e9b45e815cdcb50f9b349454c54e812590ecb5d109ae8dc906020015b60405180910390a25050565b60a45461010090046001600160a01b03163314610b9f576040517f3d693ada00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0382166000908152609d602052604090206002015415610bf2576040517ff48e3c2600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610bfa612528565b80609f54610c0891906137a0565b609f556099805460018181019092557f72a152ddfb8e864297c917af52ea6c1c68aead0fee1a62673fcc7e0c94979d000180546001600160a01b039094166001600160a01b031994851681179091556000908152609d602090815260408083208085019590955542600286015560049094018054909516909455609e9093529120805460ff19169091179055565b60978181548110610ca657600080fd5b6000918252602090912001546001600160801b038082169250600160801b9091041682565b610cd361245e565b828114610cf35760405163512509d360e11b815260040160405180910390fd5b610cfb6124b8565b609f548360005b81811015610ddb576000609d6000898985818110610d2257610d2261371c565b9050602002016020810190610d379190613391565b6001600160a01b03166001600160a01b031681526020019081526020016000209050806002015460001415610d7f5760405163f7139e3360e01b815260040160405180910390fd5b858583818110610d9157610d9161371c565b90506020020135816001015485610da89190613748565b610db291906137a0565b9350858583818110610dc657610dc661371c565b60200291909101356001928301555001610d02565b50609f8290556040517fcc2b8d88fa5f3a2e0003dc990c66fa3018e89b9708ecd8c7c11ff056c9dece1c90610e17908890889088908890613824565b60405180910390a1505050505050565b610e2f611ef6565b6001600160a01b0316336001600160a01b031614610e79576040517ff3320bfe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60a45460ff161561067d5760a954604051630afb040960e01b81526001600160a01b0383811660048301526000921690630afb0409906024016020604051808303816000875af1158015610ed1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef591906137b8565b90508015610f0a57610f06826121a9565b5050565b610af18282600161234a565b60606000825167ffffffffffffffff811115610f3457610f3461354c565b604051908082528060200260200182016040528015610f5d578160200160208202803683370190505b50835190915060005b8181101561108d576000858281518110610f8257610f8261371c565b6020908102919091018101516001600160a01b038082166000908152609d8452604080822060a08652818320938d1683529290945292909220600383015460028401549294509091421115611033576040805160a08101825284548152600185015460208201526002850154918101919091526003840154606082015260048401546001600160a01b03166080820152609f5460009161102191612554565b915061102f905081836137a0565b9150505b6001820154825464e8d4a510009061104c90849061375f565b611056919061377e565b6110609190613748565b8786815181106110725761107261371c565b6020908102919091010152505060019092019150610f669050565b5090949350505050565b61109f61245e565b6110a76125e4565b565b6065546001600160a01b031633148015906110cf575060ab546001600160a01b03163314155b15611106576040517fdeda903000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0391909116600090815260a260205260409020805460ff1916911515919091179055565b6001600160a01b038116600090815260a16020908152604080832054609980548351818602810186019094528084529194936111af9387939092918301828280156111a557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611187575b5050505050610f16565b805190915060005b818110156111ee578281815181106111d1576111d161371c565b6020026020010151846111e491906137a0565b93506001016111b7565b505050919050565b6111fe61245e565b6110a76000612636565b61067d81609980548060200260200160405190810160405280929190818152602001828054801561126257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611244575b50505050506112e8565b60aa546000906001600160a01b031633146112b3576040517fa2c4874500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6112bf83836001612688565b9392505050565b6112ce61245e565b6110a76127af565b6112de61245e565b610f0682826127ec565b6112f061283b565b60a45460ff16156113095761130782600180612688565b505b611311612528565b6001600160a01b038216600090815260a160205260408120805490829055609f54835142935b818110156114ea57609e60008783815181106113555761135561371c565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff166113b2576040517fef7120cd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000609d60008884815181106113ca576113ca61371c565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020905080600201546000141561141a5760405163f7139e3360e01b815260040160405180910390fd5b611424818561288e565b600060a0600089858151811061143c5761143c61371c565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060008a6001600160a01b03166001600160a01b031681526020019081526020016000209050600064e8d4a51000836003015483600001546114a5919061375f565b6114af919061377e565b60018301549091506114c182896137a0565b6114cb9190613748565b6001808401929092556002909201889055909550919091019050611337565b506114f58684612940565b60a960009054906101000a90046001600160a01b03166001600160a01b031663673a7e286040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561154557600080fd5b505af1158015611559573d6000803e3d6000fd5b50505050836206978061156c91906137a0565b6115746107bf565b1015610adc5760a85460408051630bbc65b160e21b815290516000926001600160a01b031691632ef196c49160048083019260209291908290030181865afa1580156115c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e89190613887565b6040516370a0823160e01b81523060048201529091506001600160a01b038216906370a0823190602401602060405180830381865afa15801561162f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061165391906138a4565b6040517f1681e542d7f33ef0ad012aecd346fa867be856110f81d25dcbbd72f972a57a4590600090a250505050505050565b6099818154811061169557600080fd5b6000918252602090912001546001600160a01b0316905081565b6116b761245e565b62093a808111156116f4576040517f5113ff5000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60ae81905560405181907f4c6066dd5fe248a11e31c5a6a9b6dcbccd2383a0f85b87f3afb34f78cd0289d590600090a250565b61172f61245e565b60a35415611769576040517f1fbde44500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b4260a355565b61177761245e565b6001600160a01b0382166000908152609d6020526040902060028101546117b15760405163f7139e3360e01b815260040160405180910390fd5b6004810180546001600160a01b0319166001600160a01b03848116918217909255604051908152908416907f6001221d1bef9473618c7f4928e156fea20c42629d0b4444cc83abae66bd0ac49060200160405180910390a2505050565b600054610100900460ff161580801561182e5750600054600160ff909116105b806118485750303b158015611848575060005460ff166001145b6118bf5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b6000805460ff1916600117905580156118e2576000805461ff0019166101001790555b6001600160a01b03851661190957604051639fabe1c160e01b815260040160405180910390fd5b6001600160a01b03841661193057604051639fabe1c160e01b815260040160405180910390fd5b6001600160a01b03831661195757604051639fabe1c160e01b815260040160405180910390fd5b61195f612a12565b611967612a85565b60a4805460a980546001600160a01b038881166001600160a01b03199283161790925560a880548884169216919091179055609a8590556098805460ff19908116600190811790925591891661010002919091167fffffffffffffffffffffff000000000000000000000000000000000000000000909216919091171790558015610ade576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15050505050565b611a3b61245e565b8060a554611a4991906137a0565b60a555611a546124b8565b609a54158015611a6657506000609b54115b15611a7257609b54609a555b60405181907f413750d12f7d0aae43d7950b99c1034ded0220bbd00b4dd5582085c46461436490600090a250565b611aa861245e565b60ab80546001600160a01b0319166001600160a01b0383169081179091556040519081527f21887d3c26545972adeaf9e44bd9aa5b527cd2b60b24cce6171828a07c564ea99060200160405180910390a150565b611b0461245e565b6001600160a01b038116611b805760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016118b6565b61067d81612636565b611b9161245e565b60a4805460ff19168215159081179091556040517fe23460163e90b25578e7e469ea6c9c62807fb99d83cdab99cf8d9d823d2b4e3a90600090a250565b611bd661245e565b82801580611be45750808214155b15611c025760405163512509d360e11b815260040160405180910390fd5b60005b81811015611e57578015611c8957858582818110611c2557611c2561371c565b905060200201358686600184611c3b9190613748565b818110611c4a57611c4a61371c565b905060200201351115611c89576040517f4781fe9b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160801b03868683818110611ca357611ca361371c565b905060200201351115611cc95760405163d2fcf5b960e01b815260040160405180910390fd5b6001600160801b03848483818110611ce357611ce361371c565b905060200201351115611d095760405163d2fcf5b960e01b815260040160405180910390fd5b611d2a868683818110611d1e57611d1e61371c565b90506020020135612af8565b15611d61576040517fde9a71c800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60a35415611dc75760a354611d769042613748565b868683818110611d8857611d8861371c565b905060200201351015611dc7576040517f38356e4c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60976040518060400160405280888885818110611de657611de661371c565b905060200201356001600160801b03168152602001868685818110611e0d57611e0d61371c565b6001600160801b0360209182029390930135831690935250835460018181018655600095865294839020845194909301518216600160801b02939091169290921791015501611c05565b507f0a4b885eafe78f585b7c7667ea419f9b1b17d09dfdf23ffa7925b73db6986f1685858585604051611a2494939291906138bd565b611e9561245e565b60aa80546001600160a01b0319166001600160a01b0383169081179091556040517f399c0ee7188568b38d4bbb76666ae7a03da799c64e2a69ece47a0543021fa8d390600090a250565b600060a65460a554611ef19190613748565b905090565b60008060a860009054906101000a90046001600160a01b03166001600160a01b031663cd57ed6c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f709190613887565b92915050565b6001600160a01b0384166000908152609d602052604090206002810154611fb05760405163f7139e3360e01b815260040160405180910390fd5b611fbc81609f5461288e565b6001600160a01b03808616600090815260a06020908152604080832093881683529290522080546003830154811561206257600183015460009064e8d4a51000612006848661375f565b612010919061377e565b61201a9190613748565b90508015612060576001600160a01b038816600090815260a160205260409020546120469082906137a0565b6001600160a01b038916600090815260a160205260409020555b505b825484546120709190613748565b845585835564e8d4a51000612085828861375f565b61208f919061377e565b600184015583546120a19087906137a0565b845560048401546001600160a01b031615612149576004848101546040517fae0b53710000000000000000000000000000000000000000000000000000000081526001600160a01b038b8116938201939093528983166024820152604481018990526064810188905291169063ae0b537190608401600060405180830381600087803b15801561213057600080fd5b505af1158015612144573d6000803e3d6000fd5b505050505b866001600160a01b0316886001600160a01b03167f526824944047da5b81071fb6349412005c5da81380b336103fbe5dd34556c7768888604051612197929190918252602082015260400190565b60405180910390a35050505050505050565b60006121b460995490565b905060005b81811015610af1576000609982815481106121d6576121d661371c565b6000918252602090912001546040516370a0823160e01b81526001600160a01b038681166004830152909116906370a0823190602401602060405180830381865afa158015612229573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061224d91906138a4565b9050600060a06000609985815481106122685761226861371c565b60009182526020808320909101546001600160a01b0390811684528382019490945260409283018220938916825292909252902054905081158015906122ae5750808214155b1561234057612340609984815481106122c9576122c961371c565b9060005260206000200160009054906101000a90046001600160a01b031686848486609d600060998b815481106123025761230261371c565b60009182526020808320909101546001600160a01b0316835282019290925260400190205461233191906137a0565b61233b9190613748565b611f76565b50506001016121b9565b60008061235685612b53565b60a9546040517f6f21a1790000000000000000000000000000000000000000000000000000000081526001600160a01b03888116600483015292935060009290911690636f21a17990602401602060405180830381865afa1580156123bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123e391906138a4565b9050801515851580156123f35750825b80156123fd575080155b1561240757600193505b8480156124115750835b156124545761241f87612bd5565b6040516001600160a01b038816907fa77719a89d2325682411f1762214545e5d0fc4b374cc00cb48fcd390a670f2e190600090a25b5050509392505050565b6065546001600160a01b031633146110a75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016118b6565b609f5460006124c660995490565b905060005b8181101561251f57612517609d6000609984815481106124ed576124ed61371c565b60009182526020808320909101546001600160a01b0316835282019290925260400190208461288e565b6001016124cb565b50504260a75550565b6125306107bf565b42111561254c5761253f6124b8565b609a8054609b5560009055565b6110a7612d23565b8151600090819080156125dc5760008560400151426125739190613748565b90506000609a5482612585919061375f565b90506000612591611edf565b90508181101561259f578091505b868860200151836125b0919061375f565b6125ba919061377e565b9550836125cc64e8d4a510008861375f565b6125d6919061377e565b94505050505b509250929050565b6125ec612de8565b6033805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000808280156126955750835b156127115760a954604051630afb040960e01b81526001600160a01b03878116600483015290911690630afb0409906024016020604051808303816000875af11580156126e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061270a91906137b8565b905061279b565b60a9546040517f660186e60000000000000000000000000000000000000000000000000000000081526001600160a01b0387811660048301529091169063660186e690602401602060405180830381865afa158015612774573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061279891906137b8565b90505b6127a685828661234a565b95945050505050565b6127b761283b565b6033805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586126193390565b6128006001600160a01b0383163383612e3a565b816001600160a01b03167f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa2882604051610b4a91815260200190565b60335460ff16156110a75760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016118b6565b4260006128996107bf565b90508181116128a6578091505b836002015482116128b75750505050565b6040805160a08101825285548152600186015460208201526002860154918101919091526003850154606082015260048501546001600160a01b0316608082015260009081906129079086612554565b915091508160a65461291991906137a0565b60a655600386015461292c9082906137a0565b600387015550505060029092019190915550565b80612977576040517f1a15fbab00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000612981611ef6565b905061298d8183612eba565b6040517ea4173a0000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152602482018490526001604483015282169062a4173a90606401600060405180830381600087803b1580156129f557600080fd5b505af1158015612a09573d6000803e3d6000fd5b50505050505050565b600054610100900460ff16612a7d5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016118b6565b6110a7612ff5565b600054610100900460ff16612af05760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016118b6565b6110a7613069565b609754600090815b81811015612b49578360978281548110612b1c57612b1c61371c565b6000918252602090912001546001600160801b03161415612b41575060019392505050565b600101612b00565b5060009392505050565b600080612b5f60995490565b905060005b81811015612bce5760a0600060998381548110612b8357612b8361371c565b60009182526020808320909101546001600160a01b039081168452838201949094526040928301822093881682529290925290205415612bc65760019250612bce565b600101612b64565b5050919050565b60a45460ff16612c11576040517ff8eb54de00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000612c1c60995490565b905060005b81811015612ca857600060998281548110612c3e57612c3e61371c565b60009182526020808320909101546001600160a01b03908116808452609d8352604080852060a08552818620938a168652929093529190922080549193509015612c9d57612c9d838760008460000154866000015461233b9190613748565b505050600101612c21565b5060a9546040517fe2c75ca00000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301524260248301529091169063e2c75ca090604401600060405180830381600087803b158015612d0f57600080fd5b505af1158015610adc573d6000803e3d6000fd5b60985460ff166110a757609754609c5460a354600090612d439042613748565b90505b8282108015612d80575060978281548110612d6357612d6361371c565b6000918252602090912001546001600160801b0390811690821610155b15612d9057600190910190612d46565b609c54821115610af157609c829055612da76124b8565b6097612db4600184613748565b81548110612dc457612dc461371c565b600091825260209091200154600160801b90046001600160801b0316609a55505050565b60335460ff166110a75760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016118b6565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610af19084906130e0565b80612ec3575050565b60a85460408051630bbc65b160e21b815290516000926001600160a01b031691632ef196c49160048083019260209291908290030181865afa158015612f0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f319190613887565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa158015612f7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f9f91906138a4565b905080831115612fdb576040517faa31f1cd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612fef6001600160a01b0383168585612e3a565b50505050565b600054610100900460ff166130605760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016118b6565b6110a733612636565b600054610100900460ff166130d45760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016118b6565b6033805460ff19169055565b6000613135826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166131c89092919063ffffffff16565b905080516000148061315657508080602001905181019061315691906137b8565b610af15760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016118b6565b60606131d784846000856131df565b949350505050565b6060824710156132575760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016118b6565b600080866001600160a01b031685876040516132739190613910565b60006040518083038185875af1925050503d80600081146132b0576040519150601f19603f3d011682016040523d82523d6000602084013e6132b5565b606091505b50915091506132c6878383876132d1565b979650505050505050565b6060831561333d578251613336576001600160a01b0385163b6133365760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016118b6565b50816131d7565b6131d783838151156133525781518083602001fd5b8060405162461bcd60e51b81526004016118b6919061392c565b6001600160a01b038116811461067d57600080fd5b803561338c8161336c565b919050565b6000602082840312156133a357600080fd5b81356112bf8161336c565b600080604083850312156133c157600080fd5b82356133cc8161336c565b915060208301356133dc8161336c565b809150509250929050565b6000806000606084860312156133fc57600080fd5b83356134078161336c565b95602085013595506040909401359392505050565b801515811461067d57600080fd5b6000806040838503121561343d57600080fd5b8235915060208301356133dc8161341c565b6000806040838503121561346257600080fd5b823561346d8161336c565b946020939093013593505050565b60006020828403121561348d57600080fd5b5035919050565b60008083601f8401126134a657600080fd5b50813567ffffffffffffffff8111156134be57600080fd5b6020830191508360208260051b85010111156134d957600080fd5b9250929050565b600080600080604085870312156134f657600080fd5b843567ffffffffffffffff8082111561350e57600080fd5b61351a88838901613494565b9096509450602087013591508082111561353357600080fd5b5061354087828801613494565b95989497509550505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561357557600080fd5b82356135808161336c565b915060208381013567ffffffffffffffff8082111561359e57600080fd5b818601915086601f8301126135b257600080fd5b8135818111156135c4576135c461354c565b8060051b604051601f19603f830116810181811085821117156135e9576135e961354c565b60405291825284820192508381018501918983111561360757600080fd5b938501935b8285101561362c5761361d85613381565b8452938501939285019261360c565b8096505050505050509250929050565b6020808252825182820181905260009190848201906040850190845b8181101561367457835183529284019291840191600101613658565b50909695505050505050565b6000806040838503121561369357600080fd5b823561369e8161336c565b915060208301356133dc8161341c565b600080600080608085870312156136c457600080fd5b84356136cf8161336c565b935060208501356136df8161336c565b925060408501356136ef8161336c565b9396929550929360600135925050565b60006020828403121561371157600080fd5b81356112bf8161341c565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008282101561375a5761375a613732565b500390565b600081600019048311821515161561377957613779613732565b500290565b60008261379b57634e487b7160e01b600052601260045260246000fd5b500490565b600082198211156137b3576137b3613732565b500190565b6000602082840312156137ca57600080fd5b81516112bf8161341c565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561380757600080fd5b8260051b8083602087013760009401602001938452509192915050565b6040808252810184905260008560608301825b8781101561386757823561384a8161336c565b6001600160a01b0316825260209283019290910190600101613837565b50838103602085015261387b8186886137d5565b98975050505050505050565b60006020828403121561389957600080fd5b81516112bf8161336c565b6000602082840312156138b657600080fd5b5051919050565b6040815260006138d16040830186886137d5565b82810360208401526132c68185876137d5565b60005b838110156138ff5781810151838201526020016138e7565b83811115612fef5750506000910152565b600082516139228184602087016138e4565b9190910192915050565b602081526000825180602084015261394b8160408501602087016138e4565b601f01601f1916919091016040019291505056fea26469706673582212203e1cd748d95a0a658f875979f4d2d331270ec4f71db13348d1e0058ac624f68764736f6c634300080c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103575760003560e01c8063800ce1da116101c8578063be9a655511610104578063de7e410c116100a2578063f2fde38b1161007c578063f2fde38b14610773578063f5fe161014610786578063f6d69c2814610799578063ff66a305146107ac57600080fd5b8063de7e410c1461073f578063eacdaabc14610757578063f187186c1461076057600080fd5b8063cd1a4d86116100de578063cd1a4d86146106f3578063cf756fdf14610706578063d055709014610719578063db3e34611461072c57600080fd5b8063be9a6555146106cb578063bfccff45146106d3578063cccd82b01461066f57600080fd5b80639a7b5f1111610171578063b26770f71161014b578063b26770f714610693578063b36b9ffd146106a6578063ba04a111146106b9578063be05d3fb146106c257600080fd5b80639a7b5f11146105f85780639b5a734f1461066f5780639b8e55631461068057600080fd5b80638da5cb5b116101a25780638da5cb5b146105c15780638e2eba09146105d25780639a0ba2ea146105e557600080fd5b8063800ce1da146105995780638456cb59146105a65780638980f11f146105ae57600080fd5b80633df8161c116102975780636c47a6c31161024057806377329f351161021a57806377329f3514610561578063779f61691461057457806378e979251461057d5780637ab8955d1461058657600080fd5b80636c47a6c31461053e5780636d4f675c14610550578063715018a61461055957600080fd5b80635d8e5d49116102715780635d8e5d49146104ed5780635ea3f4fa146105005780635fe4f7411461051357600080fd5b80633df8161c146104ba5780633f4ba83a146104da5780635c975abb146104e257600080fd5b80631b2064f71161030457806332a9caba116102de57806332a9caba1461044e578063334d0bbd1461046157806334c54230146104945780633adcdfc8146104a757600080fd5b80631b2064f7146104195780631d94f24d1461042657806325dc43871461043b57600080fd5b80630c634248116103355780630c634248146103b25780630f208beb146103bb57806317caf6f11461041057600080fd5b806302a247701461035c5780630702a95d14610377578063081e3eda146103aa575b600080fd5b6103646107bf565b6040519081526020015b60405180910390f35b61039a610385366004613391565b60a26020526000908152604090205460ff1681565b604051901515815260200161036e565b609954610364565b610364609c5481565b6103f56103c93660046133ae565b60a060209081526000928352604080842090915290825290208054600182015460029092015490919083565b6040805193845260208401929092529082015260600161036e565b610364609f5481565b60985461039a9060ff1681565b6104396104343660046133e7565b6108ce565b005b61043961044936600461342a565b610af6565b61043961045c36600461344f565b610b56565b61047461046f36600461347b565b610c96565b604080516001600160801b0393841681529290911660208301520161036e565b6104396104a23660046134e0565b610ccb565b6104396104b5366004613391565b610e27565b6104cd6104c8366004613562565b610f16565b60405161036e919061363c565b610439611097565b60335460ff1661039a565b6104396104fb366004613680565b6110a9565b61036461050e366004613391565b611131565b60a954610526906001600160a01b031681565b6040516001600160a01b03909116815260200161036e565b60ac5460ad5460ae546103f592919083565b61036460a55481565b6104396111f6565b61043961056f366004613391565b611208565b61036460a75481565b61036460a35481565b61039a610594366004613680565b61126c565b60a45461039a9060ff1681565b6104396112c6565b6104396105bc36600461344f565b6112d6565b6065546001600160a01b0316610526565b6104396105e0366004613562565b6112e8565b6105266105f336600461347b565b611685565b61063e610606366004613391565b609d6020526000908152604090208054600182015460028301546003840154600490940154929391929091906001600160a01b031685565b6040805195865260208601949094529284019190915260608301526001600160a01b0316608082015260a00161036e565b61043961067d366004613391565b50565b60a854610526906001600160a01b031681565b6104396106a136600461347b565b6116af565b60aa54610526906001600160a01b031681565b610364609b5481565b61036460a65481565b610439611727565b6103646106e1366004613391565b60a16020526000908152604090205481565b6104396107013660046133ae565b61176f565b6104396107143660046136ae565b61180e565b61043961072736600461347b565b611a33565b60ab54610526906001600160a01b031681565b60a4546105269061010090046001600160a01b031681565b610364609a5481565b61043961076e366004613391565b611aa0565b610439610781366004613391565b611afc565b6104396107943660046136ff565b611b89565b6104396107a73660046134e0565b611bce565b6104396107ba366004613391565b611e8d565b6000806107ca611edf565b90506000806107d860995490565b905060005b81811015610884576000609d6000609984815481106107fe576107fe61371c565b60009182526020808320909101546001600160a01b03168352820192909252604001902060a7546002820154919250101561087b57609f54609a54826001015460a75484600201546108509190613748565b61085a919061375f565b610864919061375f565b61086e919061377e565b61087890856137a0565b93505b506001016107dd565b504260ad55609a5461089b5760001960ac556108c3565b60a754609a546108ab84866137a0565b6108b5919061377e565b6108bf91906137a0565b60ac555b505060ac5492915050565b336000908152609e602052604090205460ff1615801561090757506108f1611ef6565b6001600160a01b0316336001600160a01b031614155b1561093e576040517f2c36303b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60a8546001600160a01b0384811691161480610972575061095d611ef6565b6001600160a01b0316836001600160a01b0316145b8061099557506001600160a01b038316600090815260a2602052604090205460ff165b1561099f57505050565b60a45460ff1615610ae55760a9546040517f5de20b420000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301526000921690635de20b4290602401602060405180830381865afa158015610a0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3291906137b8565b60a954604051630afb040960e01b81526001600160a01b03878116600483015292935060009290911690630afb0409906024016020604051808303816000875af1158015610a84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa891906137b8565b90508015610ad0578115610ac757610ac233868686611f76565b610ade565b610ac2856121a9565b610adc8582600161234a565b505b5050505050565b610af133848484611f76565b505050565b610afe61245e565b610b066124b8565b609a8290556098805460ff191682151590811790915560405190815282907f91bb2acfac3265da2e9b45e815cdcb50f9b349454c54e812590ecb5d109ae8dc906020015b60405180910390a25050565b60a45461010090046001600160a01b03163314610b9f576040517f3d693ada00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0382166000908152609d602052604090206002015415610bf2576040517ff48e3c2600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610bfa612528565b80609f54610c0891906137a0565b609f556099805460018181019092557f72a152ddfb8e864297c917af52ea6c1c68aead0fee1a62673fcc7e0c94979d000180546001600160a01b039094166001600160a01b031994851681179091556000908152609d602090815260408083208085019590955542600286015560049094018054909516909455609e9093529120805460ff19169091179055565b60978181548110610ca657600080fd5b6000918252602090912001546001600160801b038082169250600160801b9091041682565b610cd361245e565b828114610cf35760405163512509d360e11b815260040160405180910390fd5b610cfb6124b8565b609f548360005b81811015610ddb576000609d6000898985818110610d2257610d2261371c565b9050602002016020810190610d379190613391565b6001600160a01b03166001600160a01b031681526020019081526020016000209050806002015460001415610d7f5760405163f7139e3360e01b815260040160405180910390fd5b858583818110610d9157610d9161371c565b90506020020135816001015485610da89190613748565b610db291906137a0565b9350858583818110610dc657610dc661371c565b60200291909101356001928301555001610d02565b50609f8290556040517fcc2b8d88fa5f3a2e0003dc990c66fa3018e89b9708ecd8c7c11ff056c9dece1c90610e17908890889088908890613824565b60405180910390a1505050505050565b610e2f611ef6565b6001600160a01b0316336001600160a01b031614610e79576040517ff3320bfe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60a45460ff161561067d5760a954604051630afb040960e01b81526001600160a01b0383811660048301526000921690630afb0409906024016020604051808303816000875af1158015610ed1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef591906137b8565b90508015610f0a57610f06826121a9565b5050565b610af18282600161234a565b60606000825167ffffffffffffffff811115610f3457610f3461354c565b604051908082528060200260200182016040528015610f5d578160200160208202803683370190505b50835190915060005b8181101561108d576000858281518110610f8257610f8261371c565b6020908102919091018101516001600160a01b038082166000908152609d8452604080822060a08652818320938d1683529290945292909220600383015460028401549294509091421115611033576040805160a08101825284548152600185015460208201526002850154918101919091526003840154606082015260048401546001600160a01b03166080820152609f5460009161102191612554565b915061102f905081836137a0565b9150505b6001820154825464e8d4a510009061104c90849061375f565b611056919061377e565b6110609190613748565b8786815181106110725761107261371c565b6020908102919091010152505060019092019150610f669050565b5090949350505050565b61109f61245e565b6110a76125e4565b565b6065546001600160a01b031633148015906110cf575060ab546001600160a01b03163314155b15611106576040517fdeda903000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0391909116600090815260a260205260409020805460ff1916911515919091179055565b6001600160a01b038116600090815260a16020908152604080832054609980548351818602810186019094528084529194936111af9387939092918301828280156111a557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611187575b5050505050610f16565b805190915060005b818110156111ee578281815181106111d1576111d161371c565b6020026020010151846111e491906137a0565b93506001016111b7565b505050919050565b6111fe61245e565b6110a76000612636565b61067d81609980548060200260200160405190810160405280929190818152602001828054801561126257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611244575b50505050506112e8565b60aa546000906001600160a01b031633146112b3576040517fa2c4874500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6112bf83836001612688565b9392505050565b6112ce61245e565b6110a76127af565b6112de61245e565b610f0682826127ec565b6112f061283b565b60a45460ff16156113095761130782600180612688565b505b611311612528565b6001600160a01b038216600090815260a160205260408120805490829055609f54835142935b818110156114ea57609e60008783815181106113555761135561371c565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff166113b2576040517fef7120cd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000609d60008884815181106113ca576113ca61371c565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020905080600201546000141561141a5760405163f7139e3360e01b815260040160405180910390fd5b611424818561288e565b600060a0600089858151811061143c5761143c61371c565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060008a6001600160a01b03166001600160a01b031681526020019081526020016000209050600064e8d4a51000836003015483600001546114a5919061375f565b6114af919061377e565b60018301549091506114c182896137a0565b6114cb9190613748565b6001808401929092556002909201889055909550919091019050611337565b506114f58684612940565b60a960009054906101000a90046001600160a01b03166001600160a01b031663673a7e286040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561154557600080fd5b505af1158015611559573d6000803e3d6000fd5b50505050836206978061156c91906137a0565b6115746107bf565b1015610adc5760a85460408051630bbc65b160e21b815290516000926001600160a01b031691632ef196c49160048083019260209291908290030181865afa1580156115c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e89190613887565b6040516370a0823160e01b81523060048201529091506001600160a01b038216906370a0823190602401602060405180830381865afa15801561162f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061165391906138a4565b6040517f1681e542d7f33ef0ad012aecd346fa867be856110f81d25dcbbd72f972a57a4590600090a250505050505050565b6099818154811061169557600080fd5b6000918252602090912001546001600160a01b0316905081565b6116b761245e565b62093a808111156116f4576040517f5113ff5000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60ae81905560405181907f4c6066dd5fe248a11e31c5a6a9b6dcbccd2383a0f85b87f3afb34f78cd0289d590600090a250565b61172f61245e565b60a35415611769576040517f1fbde44500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b4260a355565b61177761245e565b6001600160a01b0382166000908152609d6020526040902060028101546117b15760405163f7139e3360e01b815260040160405180910390fd5b6004810180546001600160a01b0319166001600160a01b03848116918217909255604051908152908416907f6001221d1bef9473618c7f4928e156fea20c42629d0b4444cc83abae66bd0ac49060200160405180910390a2505050565b600054610100900460ff161580801561182e5750600054600160ff909116105b806118485750303b158015611848575060005460ff166001145b6118bf5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b6000805460ff1916600117905580156118e2576000805461ff0019166101001790555b6001600160a01b03851661190957604051639fabe1c160e01b815260040160405180910390fd5b6001600160a01b03841661193057604051639fabe1c160e01b815260040160405180910390fd5b6001600160a01b03831661195757604051639fabe1c160e01b815260040160405180910390fd5b61195f612a12565b611967612a85565b60a4805460a980546001600160a01b038881166001600160a01b03199283161790925560a880548884169216919091179055609a8590556098805460ff19908116600190811790925591891661010002919091167fffffffffffffffffffffff000000000000000000000000000000000000000000909216919091171790558015610ade576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15050505050565b611a3b61245e565b8060a554611a4991906137a0565b60a555611a546124b8565b609a54158015611a6657506000609b54115b15611a7257609b54609a555b60405181907f413750d12f7d0aae43d7950b99c1034ded0220bbd00b4dd5582085c46461436490600090a250565b611aa861245e565b60ab80546001600160a01b0319166001600160a01b0383169081179091556040519081527f21887d3c26545972adeaf9e44bd9aa5b527cd2b60b24cce6171828a07c564ea99060200160405180910390a150565b611b0461245e565b6001600160a01b038116611b805760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016118b6565b61067d81612636565b611b9161245e565b60a4805460ff19168215159081179091556040517fe23460163e90b25578e7e469ea6c9c62807fb99d83cdab99cf8d9d823d2b4e3a90600090a250565b611bd661245e565b82801580611be45750808214155b15611c025760405163512509d360e11b815260040160405180910390fd5b60005b81811015611e57578015611c8957858582818110611c2557611c2561371c565b905060200201358686600184611c3b9190613748565b818110611c4a57611c4a61371c565b905060200201351115611c89576040517f4781fe9b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160801b03868683818110611ca357611ca361371c565b905060200201351115611cc95760405163d2fcf5b960e01b815260040160405180910390fd5b6001600160801b03848483818110611ce357611ce361371c565b905060200201351115611d095760405163d2fcf5b960e01b815260040160405180910390fd5b611d2a868683818110611d1e57611d1e61371c565b90506020020135612af8565b15611d61576040517fde9a71c800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60a35415611dc75760a354611d769042613748565b868683818110611d8857611d8861371c565b905060200201351015611dc7576040517f38356e4c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60976040518060400160405280888885818110611de657611de661371c565b905060200201356001600160801b03168152602001868685818110611e0d57611e0d61371c565b6001600160801b0360209182029390930135831690935250835460018181018655600095865294839020845194909301518216600160801b02939091169290921791015501611c05565b507f0a4b885eafe78f585b7c7667ea419f9b1b17d09dfdf23ffa7925b73db6986f1685858585604051611a2494939291906138bd565b611e9561245e565b60aa80546001600160a01b0319166001600160a01b0383169081179091556040517f399c0ee7188568b38d4bbb76666ae7a03da799c64e2a69ece47a0543021fa8d390600090a250565b600060a65460a554611ef19190613748565b905090565b60008060a860009054906101000a90046001600160a01b03166001600160a01b031663cd57ed6c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f709190613887565b92915050565b6001600160a01b0384166000908152609d602052604090206002810154611fb05760405163f7139e3360e01b815260040160405180910390fd5b611fbc81609f5461288e565b6001600160a01b03808616600090815260a06020908152604080832093881683529290522080546003830154811561206257600183015460009064e8d4a51000612006848661375f565b612010919061377e565b61201a9190613748565b90508015612060576001600160a01b038816600090815260a160205260409020546120469082906137a0565b6001600160a01b038916600090815260a160205260409020555b505b825484546120709190613748565b845585835564e8d4a51000612085828861375f565b61208f919061377e565b600184015583546120a19087906137a0565b845560048401546001600160a01b031615612149576004848101546040517fae0b53710000000000000000000000000000000000000000000000000000000081526001600160a01b038b8116938201939093528983166024820152604481018990526064810188905291169063ae0b537190608401600060405180830381600087803b15801561213057600080fd5b505af1158015612144573d6000803e3d6000fd5b505050505b866001600160a01b0316886001600160a01b03167f526824944047da5b81071fb6349412005c5da81380b336103fbe5dd34556c7768888604051612197929190918252602082015260400190565b60405180910390a35050505050505050565b60006121b460995490565b905060005b81811015610af1576000609982815481106121d6576121d661371c565b6000918252602090912001546040516370a0823160e01b81526001600160a01b038681166004830152909116906370a0823190602401602060405180830381865afa158015612229573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061224d91906138a4565b9050600060a06000609985815481106122685761226861371c565b60009182526020808320909101546001600160a01b0390811684528382019490945260409283018220938916825292909252902054905081158015906122ae5750808214155b1561234057612340609984815481106122c9576122c961371c565b9060005260206000200160009054906101000a90046001600160a01b031686848486609d600060998b815481106123025761230261371c565b60009182526020808320909101546001600160a01b0316835282019290925260400190205461233191906137a0565b61233b9190613748565b611f76565b50506001016121b9565b60008061235685612b53565b60a9546040517f6f21a1790000000000000000000000000000000000000000000000000000000081526001600160a01b03888116600483015292935060009290911690636f21a17990602401602060405180830381865afa1580156123bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123e391906138a4565b9050801515851580156123f35750825b80156123fd575080155b1561240757600193505b8480156124115750835b156124545761241f87612bd5565b6040516001600160a01b038816907fa77719a89d2325682411f1762214545e5d0fc4b374cc00cb48fcd390a670f2e190600090a25b5050509392505050565b6065546001600160a01b031633146110a75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016118b6565b609f5460006124c660995490565b905060005b8181101561251f57612517609d6000609984815481106124ed576124ed61371c565b60009182526020808320909101546001600160a01b0316835282019290925260400190208461288e565b6001016124cb565b50504260a75550565b6125306107bf565b42111561254c5761253f6124b8565b609a8054609b5560009055565b6110a7612d23565b8151600090819080156125dc5760008560400151426125739190613748565b90506000609a5482612585919061375f565b90506000612591611edf565b90508181101561259f578091505b868860200151836125b0919061375f565b6125ba919061377e565b9550836125cc64e8d4a510008861375f565b6125d6919061377e565b94505050505b509250929050565b6125ec612de8565b6033805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000808280156126955750835b156127115760a954604051630afb040960e01b81526001600160a01b03878116600483015290911690630afb0409906024016020604051808303816000875af11580156126e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061270a91906137b8565b905061279b565b60a9546040517f660186e60000000000000000000000000000000000000000000000000000000081526001600160a01b0387811660048301529091169063660186e690602401602060405180830381865afa158015612774573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061279891906137b8565b90505b6127a685828661234a565b95945050505050565b6127b761283b565b6033805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586126193390565b6128006001600160a01b0383163383612e3a565b816001600160a01b03167f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa2882604051610b4a91815260200190565b60335460ff16156110a75760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016118b6565b4260006128996107bf565b90508181116128a6578091505b836002015482116128b75750505050565b6040805160a08101825285548152600186015460208201526002860154918101919091526003850154606082015260048501546001600160a01b0316608082015260009081906129079086612554565b915091508160a65461291991906137a0565b60a655600386015461292c9082906137a0565b600387015550505060029092019190915550565b80612977576040517f1a15fbab00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000612981611ef6565b905061298d8183612eba565b6040517ea4173a0000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152602482018490526001604483015282169062a4173a90606401600060405180830381600087803b1580156129f557600080fd5b505af1158015612a09573d6000803e3d6000fd5b50505050505050565b600054610100900460ff16612a7d5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016118b6565b6110a7612ff5565b600054610100900460ff16612af05760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016118b6565b6110a7613069565b609754600090815b81811015612b49578360978281548110612b1c57612b1c61371c565b6000918252602090912001546001600160801b03161415612b41575060019392505050565b600101612b00565b5060009392505050565b600080612b5f60995490565b905060005b81811015612bce5760a0600060998381548110612b8357612b8361371c565b60009182526020808320909101546001600160a01b039081168452838201949094526040928301822093881682529290925290205415612bc65760019250612bce565b600101612b64565b5050919050565b60a45460ff16612c11576040517ff8eb54de00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000612c1c60995490565b905060005b81811015612ca857600060998281548110612c3e57612c3e61371c565b60009182526020808320909101546001600160a01b03908116808452609d8352604080852060a08552818620938a168652929093529190922080549193509015612c9d57612c9d838760008460000154866000015461233b9190613748565b505050600101612c21565b5060a9546040517fe2c75ca00000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301524260248301529091169063e2c75ca090604401600060405180830381600087803b158015612d0f57600080fd5b505af1158015610adc573d6000803e3d6000fd5b60985460ff166110a757609754609c5460a354600090612d439042613748565b90505b8282108015612d80575060978281548110612d6357612d6361371c565b6000918252602090912001546001600160801b0390811690821610155b15612d9057600190910190612d46565b609c54821115610af157609c829055612da76124b8565b6097612db4600184613748565b81548110612dc457612dc461371c565b600091825260209091200154600160801b90046001600160801b0316609a55505050565b60335460ff166110a75760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016118b6565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610af19084906130e0565b80612ec3575050565b60a85460408051630bbc65b160e21b815290516000926001600160a01b031691632ef196c49160048083019260209291908290030181865afa158015612f0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f319190613887565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038316906370a0823190602401602060405180830381865afa158015612f7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f9f91906138a4565b905080831115612fdb576040517faa31f1cd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612fef6001600160a01b0383168585612e3a565b50505050565b600054610100900460ff166130605760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016118b6565b6110a733612636565b600054610100900460ff166130d45760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016118b6565b6033805460ff19169055565b6000613135826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166131c89092919063ffffffff16565b905080516000148061315657508080602001905181019061315691906137b8565b610af15760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016118b6565b60606131d784846000856131df565b949350505050565b6060824710156132575760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016118b6565b600080866001600160a01b031685876040516132739190613910565b60006040518083038185875af1925050503d80600081146132b0576040519150601f19603f3d011682016040523d82523d6000602084013e6132b5565b606091505b50915091506132c6878383876132d1565b979650505050505050565b6060831561333d578251613336576001600160a01b0385163b6133365760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016118b6565b50816131d7565b6131d783838151156133525781518083602001fd5b8060405162461bcd60e51b81526004016118b6919061392c565b6001600160a01b038116811461067d57600080fd5b803561338c8161336c565b919050565b6000602082840312156133a357600080fd5b81356112bf8161336c565b600080604083850312156133c157600080fd5b82356133cc8161336c565b915060208301356133dc8161336c565b809150509250929050565b6000806000606084860312156133fc57600080fd5b83356134078161336c565b95602085013595506040909401359392505050565b801515811461067d57600080fd5b6000806040838503121561343d57600080fd5b8235915060208301356133dc8161341c565b6000806040838503121561346257600080fd5b823561346d8161336c565b946020939093013593505050565b60006020828403121561348d57600080fd5b5035919050565b60008083601f8401126134a657600080fd5b50813567ffffffffffffffff8111156134be57600080fd5b6020830191508360208260051b85010111156134d957600080fd5b9250929050565b600080600080604085870312156134f657600080fd5b843567ffffffffffffffff8082111561350e57600080fd5b61351a88838901613494565b9096509450602087013591508082111561353357600080fd5b5061354087828801613494565b95989497509550505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561357557600080fd5b82356135808161336c565b915060208381013567ffffffffffffffff8082111561359e57600080fd5b818601915086601f8301126135b257600080fd5b8135818111156135c4576135c461354c565b8060051b604051601f19603f830116810181811085821117156135e9576135e961354c565b60405291825284820192508381018501918983111561360757600080fd5b938501935b8285101561362c5761361d85613381565b8452938501939285019261360c565b8096505050505050509250929050565b6020808252825182820181905260009190848201906040850190845b8181101561367457835183529284019291840191600101613658565b50909695505050505050565b6000806040838503121561369357600080fd5b823561369e8161336c565b915060208301356133dc8161341c565b600080600080608085870312156136c457600080fd5b84356136cf8161336c565b935060208501356136df8161336c565b925060408501356136ef8161336c565b9396929550929360600135925050565b60006020828403121561371157600080fd5b81356112bf8161341c565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008282101561375a5761375a613732565b500390565b600081600019048311821515161561377957613779613732565b500290565b60008261379b57634e487b7160e01b600052601260045260246000fd5b500490565b600082198211156137b3576137b3613732565b500190565b6000602082840312156137ca57600080fd5b81516112bf8161341c565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561380757600080fd5b8260051b8083602087013760009401602001938452509192915050565b6040808252810184905260008560608301825b8781101561386757823561384a8161336c565b6001600160a01b0316825260209283019290910190600101613837565b50838103602085015261387b8186886137d5565b98975050505050505050565b60006020828403121561389957600080fd5b81516112bf8161336c565b6000602082840312156138b657600080fd5b5051919050565b6040815260006138d16040830186886137d5565b82810360208401526132c68185876137d5565b60005b838110156138ff5781810151838201526020016138e7565b83811115612fef5750506000910152565b600082516139228184602087016138e4565b9190910192915050565b602081526000825180602084015261394b8160408501602087016138e4565b601f01601f1916919091016040019291505056fea26469706673582212203e1cd748d95a0a658f875979f4d2d331270ec4f71db13348d1e0058ac624f68764736f6c634300080c0033",
  "devdoc": {
    "author": "Prime based on the Sushi MasterChef\thttps://github.com/sushiswap/sushiswap/blob/master/contracts/MasterChef.sol",
    "kind": "dev",
    "methods": {
      "addPool(address,uint256)": {
        "details": "Add a new lp to the pool. Can only be called by the poolConfigurator.",
        "params": {
          "_allocPoint": "allocation point of the pool",
          "_token": "for reward pool"
        }
      },
      "afterLockUpdate(address)": {
        "details": "Called by the locking contracts after locking or unlocking happens",
        "params": {
          "_user": "address"
        }
      },
      "allPendingRewards(address)": {
        "params": {
          "_user": "address of the user"
        },
        "returns": {
          "pending": "reward amount"
        }
      },
      "batchUpdateAllocPoint(address[],uint256[])": {
        "details": "Update the given pool's allocation point. Can only be called by the owner.",
        "params": {
          "_allocPoints": "allocation points of the pools",
          "_tokens": "for reward pools"
        }
      },
      "beforeLockUpdate(address)": {
        "details": "Called by the locking contracts before locking or unlocking happens",
        "params": {
          "_user": "address"
        }
      },
      "claim(address,address[])": {
        "params": {
          "_tokens": "array of reward-bearing tokens",
          "_user": "address for claim"
        }
      },
      "claimAll(address)": {
        "params": {
          "_user": "address of the user"
        }
      },
      "claimBounty(address,bool)": {
        "params": {
          "_execute": "true if it's actual execution",
          "_user": "address of recipient"
        },
        "returns": {
          "issueBaseBounty": "true for base bounty"
        }
      },
      "handleActionAfter(address,uint256,uint256)": {
        "details": "important! eligible status can be updated here",
        "params": {
          "_balance": "balance of token",
          "_totalSupply": "total supply of the token",
          "_user": "address"
        }
      },
      "handleActionBefore(address)": {
        "params": {
          "_user": "address"
        }
      },
      "initialize(address,address,address,uint256)": {
        "params": {
          "_eligibleDataProvider": "Eligibility Data provider address",
          "_poolConfigurator": "Pool configurator address",
          "_rewardMinter": "Middle fee distribution contract",
          "_rewardsPerSecond": "RPS"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "pendingRewards(address,address[])": {
        "params": {
          "_tokens": "array of reward-bearing tokens",
          "_user": "address for claim"
        },
        "returns": {
          "_0": "claimable rewards array"
        }
      },
      "poolLength()": {
        "details": "Returns length of reward pools."
      },
      "recoverERC20(address,uint256)": {
        "params": {
          "tokenAddress": "Token address for recover",
          "tokenAmount": "Amount to recover"
        }
      },
      "registerRewardDeposit(uint256)": {
        "details": "Only callable by owner.",
        "params": {
          "_amount": "new deposit amount"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setBountyManager(address)": {
        "details": "Updates bounty manager contract.",
        "params": {
          "_bountyManager": "Bounty Manager contract."
        }
      },
      "setEligibilityEnabled(bool)": {
        "details": "Enable/Disable eligibility",
        "params": {
          "_newVal": "New value."
        }
      },
      "setEligibilityExempt(address,bool)": {
        "details": "Can be called by owner or leverager contract",
        "params": {
          "_contract": "address to exempt",
          "_value": "flag for exempt"
        }
      },
      "setEmissionSchedule(uint256[],uint256[])": {
        "details": "This appends the new offsets and RPS.",
        "params": {
          "_rewardsPerSecond": "RPS array.",
          "_startTimeOffsets": "Offsets array."
        }
      },
      "setEndingTimeUpdateCadence(uint256)": {
        "details": "Only callable by owner.",
        "params": {
          "_lapse": "new cadence"
        }
      },
      "setLeverager(address)": {
        "params": {
          "_leverager": "contract"
        }
      },
      "setOnwardIncentives(address,address)": {
        "params": {
          "_incentives": "incentives contract address",
          "_token": "for reward pool"
        }
      },
      "setRewardsPerSecond(uint256,bool)": {
        "details": "Its decimals count is ACC_REWARD_PRECISION",
        "params": {
          "_persist": "true if RPS is fixed, otherwise RPS is by emission schedule.",
          "_rewardsPerSecond": "The amount of reward to be distributed per second."
        }
      },
      "start()": {
        "details": "Starts PRNT emission."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "ChefIncentivesController Contract",
    "version": 1
  },
  "userdoc": {
    "events": {
      "Recovered(address,uint256)": {
        "notice": "Emitted when ERC20 token is recovered"
      }
    },
    "kind": "user",
    "methods": {
      "afterLockUpdate(address)": {
        "notice": "Hook for lock update."
      },
      "allPendingRewards(address)": {
        "notice": "Sum of all pending PRNT rewards."
      },
      "beforeLockUpdate(address)": {
        "notice": "Hook for lock update."
      },
      "claim(address,address[])": {
        "notice": "Claim rewards. They are vested into MFD."
      },
      "claimAll(address)": {
        "notice": "Claim rewards entitled to all registered tokens."
      },
      "claimBounty(address,bool)": {
        "notice": "Claim bounty"
      },
      "endRewardTime()": {
        "notice": "Ending reward distribution time."
      },
      "handleActionAfter(address,uint256,uint256)": {
        "notice": "`after` Hook for deposit and borrow update."
      },
      "handleActionBefore(address)": {
        "notice": "`before` Hook for deposit and borrow update."
      },
      "initialize(address,address,address,uint256)": {
        "notice": "Initializer"
      },
      "pause()": {
        "notice": "Pause the claim operations."
      },
      "pendingRewards(address,address[])": {
        "notice": "Pending rewards of a user."
      },
      "recoverERC20(address,uint256)": {
        "notice": "Recover tokens in this contract. Callable by owner."
      },
      "registerRewardDeposit(uint256)": {
        "notice": "Add new rewards."
      },
      "setEligibilityExempt(address,bool)": {
        "notice": "Exempt a contract from eligibility check."
      },
      "setEmissionSchedule(uint256[],uint256[])": {
        "notice": "Updates PRNT emission schedule."
      },
      "setEndingTimeUpdateCadence(uint256)": {
        "notice": "Updates cadence duration of ending time."
      },
      "setLeverager(address)": {
        "notice": "Updates leverager, only callable by owner."
      },
      "setOnwardIncentives(address,address)": {
        "notice": "Sets incentive controllers for custom token."
      },
      "setRewardsPerSecond(uint256,bool)": {
        "notice": "Sets the reward per second to be distributed. Can only be called by the owner."
      },
      "unpause()": {
        "notice": "Unpause the claim operations."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 139,
        "contract": "contracts/prime/staking/ChefIncentivesController.sol:ChefIncentivesController",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 142,
        "contract": "contracts/prime/staking/ChefIncentivesController.sol:ChefIncentivesController",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 809,
        "contract": "contracts/prime/staking/ChefIncentivesController.sol:ChefIncentivesController",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 323,
        "contract": "contracts/prime/staking/ChefIncentivesController.sol:ChefIncentivesController",
        "label": "_paused",
        "offset": 0,
        "slot": "51",
        "type": "t_bool"
      },
      {
        "astId": 428,
        "contract": "contracts/prime/staking/ChefIncentivesController.sol:ChefIncentivesController",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 11,
        "contract": "contracts/prime/staking/ChefIncentivesController.sol:ChefIncentivesController",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 131,
        "contract": "contracts/prime/staking/ChefIncentivesController.sol:ChefIncentivesController",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2309,
        "contract": "contracts/prime/staking/ChefIncentivesController.sol:ChefIncentivesController",
        "label": "emissionSchedule",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_struct(EmissionPoint)2189_storage)dyn_storage"
      },
      {
        "astId": 2311,
        "contract": "contracts/prime/staking/ChefIncentivesController.sol:ChefIncentivesController",
        "label": "persistRewardsPerSecond",
        "offset": 0,
        "slot": "152",
        "type": "t_bool"
      },
      {
        "astId": 2314,
        "contract": "contracts/prime/staking/ChefIncentivesController.sol:ChefIncentivesController",
        "label": "registeredTokens",
        "offset": 0,
        "slot": "153",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2316,
        "contract": "contracts/prime/staking/ChefIncentivesController.sol:ChefIncentivesController",
        "label": "rewardsPerSecond",
        "offset": 0,
        "slot": "154",
        "type": "t_uint256"
      },
      {
        "astId": 2318,
        "contract": "contracts/prime/staking/ChefIncentivesController.sol:ChefIncentivesController",
        "label": "lastRPS",
        "offset": 0,
        "slot": "155",
        "type": "t_uint256"
      },
      {
        "astId": 2320,
        "contract": "contracts/prime/staking/ChefIncentivesController.sol:ChefIncentivesController",
        "label": "emissionScheduleIndex",
        "offset": 0,
        "slot": "156",
        "type": "t_uint256"
      },
      {
        "astId": 2325,
        "contract": "contracts/prime/staking/ChefIncentivesController.sol:ChefIncentivesController",
        "label": "poolInfo",
        "offset": 0,
        "slot": "157",
        "type": "t_mapping(t_address,t_struct(PoolInfo)2184_storage)"
      },
      {
        "astId": 2329,
        "contract": "contracts/prime/staking/ChefIncentivesController.sol:ChefIncentivesController",
        "label": "validRTokens",
        "offset": 0,
        "slot": "158",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2331,
        "contract": "contracts/prime/staking/ChefIncentivesController.sol:ChefIncentivesController",
        "label": "totalAllocPoint",
        "offset": 0,
        "slot": "159",
        "type": "t_uint256"
      },
      {
        "astId": 2338,
        "contract": "contracts/prime/staking/ChefIncentivesController.sol:ChefIncentivesController",
        "label": "userInfo",
        "offset": 0,
        "slot": "160",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(UserInfo)2172_storage))"
      },
      {
        "astId": 2342,
        "contract": "contracts/prime/staking/ChefIncentivesController.sol:ChefIncentivesController",
        "label": "userBaseClaimable",
        "offset": 0,
        "slot": "161",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2346,
        "contract": "contracts/prime/staking/ChefIncentivesController.sol:ChefIncentivesController",
        "label": "eligibilityExempt",
        "offset": 0,
        "slot": "162",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2348,
        "contract": "contracts/prime/staking/ChefIncentivesController.sol:ChefIncentivesController",
        "label": "startTime",
        "offset": 0,
        "slot": "163",
        "type": "t_uint256"
      },
      {
        "astId": 2350,
        "contract": "contracts/prime/staking/ChefIncentivesController.sol:ChefIncentivesController",
        "label": "eligibilityEnabled",
        "offset": 0,
        "slot": "164",
        "type": "t_bool"
      },
      {
        "astId": 2352,
        "contract": "contracts/prime/staking/ChefIncentivesController.sol:ChefIncentivesController",
        "label": "poolConfigurator",
        "offset": 1,
        "slot": "164",
        "type": "t_address"
      },
      {
        "astId": 2354,
        "contract": "contracts/prime/staking/ChefIncentivesController.sol:ChefIncentivesController",
        "label": "depositedRewards",
        "offset": 0,
        "slot": "165",
        "type": "t_uint256"
      },
      {
        "astId": 2356,
        "contract": "contracts/prime/staking/ChefIncentivesController.sol:ChefIncentivesController",
        "label": "accountedRewards",
        "offset": 0,
        "slot": "166",
        "type": "t_uint256"
      },
      {
        "astId": 2358,
        "contract": "contracts/prime/staking/ChefIncentivesController.sol:ChefIncentivesController",
        "label": "lastAllPoolUpdate",
        "offset": 0,
        "slot": "167",
        "type": "t_uint256"
      },
      {
        "astId": 2361,
        "contract": "contracts/prime/staking/ChefIncentivesController.sol:ChefIncentivesController",
        "label": "rewardMinter",
        "offset": 0,
        "slot": "168",
        "type": "t_contract(IMiddleFeeDistribution)1802"
      },
      {
        "astId": 2364,
        "contract": "contracts/prime/staking/ChefIncentivesController.sol:ChefIncentivesController",
        "label": "eligibleDataProvider",
        "offset": 0,
        "slot": "169",
        "type": "t_contract(IEligibilityDataProvider)1722"
      },
      {
        "astId": 2366,
        "contract": "contracts/prime/staking/ChefIncentivesController.sol:ChefIncentivesController",
        "label": "bountyManager",
        "offset": 0,
        "slot": "170",
        "type": "t_address"
      },
      {
        "astId": 2369,
        "contract": "contracts/prime/staking/ChefIncentivesController.sol:ChefIncentivesController",
        "label": "leverager",
        "offset": 0,
        "slot": "171",
        "type": "t_contract(ILeverager)1761"
      },
      {
        "astId": 2372,
        "contract": "contracts/prime/staking/ChefIncentivesController.sol:ChefIncentivesController",
        "label": "endingTime",
        "offset": 0,
        "slot": "172",
        "type": "t_struct(EndingTime)2196_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(EmissionPoint)2189_storage)dyn_storage": {
        "base": "t_struct(EmissionPoint)2189_storage",
        "encoding": "dynamic_array",
        "label": "struct ChefIncentivesController.EmissionPoint[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IEligibilityDataProvider)1722": {
        "encoding": "inplace",
        "label": "contract IEligibilityDataProvider",
        "numberOfBytes": "20"
      },
      "t_contract(ILeverager)1761": {
        "encoding": "inplace",
        "label": "contract ILeverager",
        "numberOfBytes": "20"
      },
      "t_contract(IMiddleFeeDistribution)1802": {
        "encoding": "inplace",
        "label": "contract IMiddleFeeDistribution",
        "numberOfBytes": "20"
      },
      "t_contract(IOnwardIncentivesController)2046": {
        "encoding": "inplace",
        "label": "contract IOnwardIncentivesController",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(UserInfo)2172_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct ChefIncentivesController.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)2172_storage)"
      },
      "t_mapping(t_address,t_struct(PoolInfo)2184_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ChefIncentivesController.PoolInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(PoolInfo)2184_storage"
      },
      "t_mapping(t_address,t_struct(UserInfo)2172_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ChefIncentivesController.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)2172_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(EmissionPoint)2189_storage": {
        "encoding": "inplace",
        "label": "struct ChefIncentivesController.EmissionPoint",
        "members": [
          {
            "astId": 2186,
            "contract": "contracts/prime/staking/ChefIncentivesController.sol:ChefIncentivesController",
            "label": "startTimeOffset",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 2188,
            "contract": "contracts/prime/staking/ChefIncentivesController.sol:ChefIncentivesController",
            "label": "rewardsPerSecond",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(EndingTime)2196_storage": {
        "encoding": "inplace",
        "label": "struct ChefIncentivesController.EndingTime",
        "members": [
          {
            "astId": 2191,
            "contract": "contracts/prime/staking/ChefIncentivesController.sol:ChefIncentivesController",
            "label": "estimatedTime",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2193,
            "contract": "contracts/prime/staking/ChefIncentivesController.sol:ChefIncentivesController",
            "label": "lastUpdatedTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2195,
            "contract": "contracts/prime/staking/ChefIncentivesController.sol:ChefIncentivesController",
            "label": "updateCadence",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(PoolInfo)2184_storage": {
        "encoding": "inplace",
        "label": "struct ChefIncentivesController.PoolInfo",
        "members": [
          {
            "astId": 2174,
            "contract": "contracts/prime/staking/ChefIncentivesController.sol:ChefIncentivesController",
            "label": "totalSupply",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2176,
            "contract": "contracts/prime/staking/ChefIncentivesController.sol:ChefIncentivesController",
            "label": "allocPoint",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2178,
            "contract": "contracts/prime/staking/ChefIncentivesController.sol:ChefIncentivesController",
            "label": "lastRewardTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2180,
            "contract": "contracts/prime/staking/ChefIncentivesController.sol:ChefIncentivesController",
            "label": "accRewardPerShare",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2183,
            "contract": "contracts/prime/staking/ChefIncentivesController.sol:ChefIncentivesController",
            "label": "onwardIncentives",
            "offset": 0,
            "slot": "4",
            "type": "t_contract(IOnwardIncentivesController)2046"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(UserInfo)2172_storage": {
        "encoding": "inplace",
        "label": "struct ChefIncentivesController.UserInfo",
        "members": [
          {
            "astId": 2167,
            "contract": "contracts/prime/staking/ChefIncentivesController.sol:ChefIncentivesController",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2169,
            "contract": "contracts/prime/staking/ChefIncentivesController.sol:ChefIncentivesController",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2171,
            "contract": "contracts/prime/staking/ChefIncentivesController.sol:ChefIncentivesController",
            "label": "lastClaimTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}