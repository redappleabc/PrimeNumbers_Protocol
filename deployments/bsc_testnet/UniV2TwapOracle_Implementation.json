{
  "address": "0x2fcD7249e209DC2cEF37D611F2a30BD611300961",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AddressZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FallbackNotSet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoReserves",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PeriodBelowMin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PeriodNotElapsed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PriceIsStale",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bool",
          "name": "_allowStaleConsults",
          "type": "bool"
        }
      ],
      "name": "AllowStaleConsultsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_consultLeniency",
          "type": "uint256"
        }
      ],
      "name": "ConsultLeniencyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bool",
          "name": "_enabled",
          "type": "bool"
        }
      ],
      "name": "FallbackOracleEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_fallback",
          "type": "address"
        }
      ],
      "name": "FallbackOracleUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        }
      ],
      "name": "PeriodUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PERIOD_MIN",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allowStaleConsults",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "blockTimestampLast",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "canUpdate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "consult",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "consultLeniency",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_enabled",
          "type": "bool"
        }
      ],
      "name": "enableFallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ethChainlinkFeed",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fallbackEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fallbackOracle",
      "outputs": [
        {
          "internalType": "contract IBaseOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_prnt",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ethChainlinkFeed",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_consultLeniency",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_allowStaleConsults",
          "type": "bool"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestAnswer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestAnswerInEth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pair",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Pair",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "period",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price0Average",
      "outputs": [
        {
          "internalType": "uint224",
          "name": "_x",
          "type": "uint224"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price0CumulativeLast",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price1Average",
      "outputs": [
        {
          "internalType": "uint224",
          "name": "_x",
          "type": "uint224"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price1CumulativeLast",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_allowStaleConsults",
          "type": "bool"
        }
      ],
      "name": "setAllowStaleConsults",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_consultLeniency",
          "type": "uint256"
        }
      ],
      "name": "setConsultLeniency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fallback",
          "type": "address"
        }
      ],
      "name": "setFallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        }
      ],
      "name": "setPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token0",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token1",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "update",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb9f2b2836196e17bd9864257e6a49e6f6976d4b50ff999fdad82932736deba6d",
  "receipt": {
    "to": null,
    "from": "0xdE8023f05d831Fb7381486D041237ddEB06c1BA2",
    "contractAddress": "0x2fcD7249e209DC2cEF37D611F2a30BD611300961",
    "transactionIndex": 0,
    "gasUsed": "1591465",
    "logsBloom": "0x
    "blockHash": "0xdb021c796ec82190ebf69d9809811eb8ef279be609b3feed53122e189b6f5396",
    "transactionHash": "0xb9f2b2836196e17bd9864257e6a49e6f6976d4b50ff999fdad82932736deba6d",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 43440319,
        "transactionHash": "0xb9f2b2836196e17bd9864257e6a49e6f6976d4b50ff999fdad82932736deba6d",
        "address": "0x2fcD7249e209DC2cEF37D611F2a30BD611300961",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 0,
        "blockHash": "0xdb021c796ec82190ebf69d9809811eb8ef279be609b3feed53122e189b6f5396"
      }
    ],
    "blockNumber": 43440319,
    "cumulativeGasUsed": "1591465",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "1d544f96a00f94e7a887913a2bd4bf37",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FallbackNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoReserves\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PeriodBelowMin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PeriodNotElapsed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriceIsStale\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"_allowStaleConsults\",\"type\":\"bool\"}],\"name\":\"AllowStaleConsultsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_consultLeniency\",\"type\":\"uint256\"}],\"name\":\"ConsultLeniencyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"FallbackOracleEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_fallback\",\"type\":\"address\"}],\"name\":\"FallbackOracleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"PeriodUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PERIOD_MIN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowStaleConsults\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blockTimestampLast\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canUpdate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"consult\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"consultLeniency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"enableFallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethChainlinkFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fallbackEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fallbackOracle\",\"outputs\":[{\"internalType\":\"contract IBaseOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_prnt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ethChainlinkFeed\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_consultLeniency\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_allowStaleConsults\",\"type\":\"bool\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestAnswer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestAnswerInEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"period\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price0Average\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"_x\",\"type\":\"uint224\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price0CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price1Average\",\"outputs\":[{\"internalType\":\"uint224\",\"name\":\"_x\",\"type\":\"uint224\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price1CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_allowStaleConsults\",\"type\":\"bool\"}],\"name\":\"setAllowStaleConsults\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_consultLeniency\",\"type\":\"uint256\"}],\"name\":\"setConsultLeniency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fallback\",\"type\":\"address\"}],\"name\":\"setFallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"setPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Prime team\",\"details\":\"Fixed window oracle that recomputes the average price for the entire period once every period Note that the price average is only guaranteed to be over at least 1 period, but may be over a longer period\",\"kind\":\"dev\",\"methods\":{\"canUpdate()\":{\"details\":\"Check if update() can be called instead of wasting gas calling it.\"},\"enableFallback(bool)\":{\"params\":{\"_enabled\":\"Boolean value.\"}},\"initialize(address,address,address,uint256,uint256,bool)\":{\"params\":{\"_allowStaleConsults\":\"Enable/Disable stale.\",\"_consultLeniency\":\"Used for being able to consult past the period end.\",\"_ethChainlinkFeed\":\"Chainlink price feed for ETH.\",\"_pair\":\"Uniswap pair contract\",\"_period\":\"TWAP period.\",\"_prnt\":\"PRNT token address.\"}},\"latestAnswer()\":{\"details\":\"supports 18 decimal token\",\"returns\":{\"price\":\"of token in decimal 8\"}},\"latestAnswerInEth()\":{\"details\":\"supports 18 decimal token\",\"returns\":{\"price\":\"of token in decimal 8.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setAllowStaleConsults(bool)\":{\"params\":{\"_allowStaleConsults\":\"new value.\"}},\"setConsultLeniency(uint256)\":{\"params\":{\"_consultLeniency\":\"new value.\"}},\"setFallback(address)\":{\"params\":{\"_fallback\":\"Oracle address for fallback.\"}},\"setPeriod(uint256)\":{\"params\":{\"_period\":\"TWAP period.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"UniV2TwapOracle Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"PERIOD_MIN()\":{\"notice\":\"Minimum TWAP time period\"},\"allowStaleConsults()\":{\"notice\":\"If false, consult() will fail if the TWAP is stale\"},\"blockTimestampLast()\":{\"notice\":\"Last updated timestamp\"},\"consult()\":{\"notice\":\"Returns current price.\"},\"consultLeniency()\":{\"notice\":\"Used for being able to consult past the period end\"},\"enableFallback(bool)\":{\"notice\":\"Enable/Disable use of fallback oracle\"},\"ethChainlinkFeed()\":{\"notice\":\"Chainlink price feed for ETH\"},\"fallbackEnabled()\":{\"notice\":\"Enable/Disable fallback\"},\"fallbackOracle()\":{\"notice\":\"Oracle to be used as a fallback\"},\"initialize(address,address,address,uint256,uint256,bool)\":{\"notice\":\"Initializer\"},\"latestAnswer()\":{\"notice\":\"Returns USD price in quote token.\"},\"latestAnswerInEth()\":{\"notice\":\"Returns price in ETH\"},\"pair()\":{\"notice\":\"Uniswap pair contract\"},\"period()\":{\"notice\":\"TWAP period\"},\"price0Average()\":{\"notice\":\"Average price of token0\"},\"price0CumulativeLast()\":{\"notice\":\"First token of the pair\"},\"price1Average()\":{\"notice\":\"Average price of token1\"},\"price1CumulativeLast()\":{\"notice\":\"First token of the pair\"},\"setAllowStaleConsults(bool)\":{\"notice\":\"Sets stale consult option.\"},\"setConsultLeniency(uint256)\":{\"notice\":\"Sets new consult leniency.\"},\"setFallback(address)\":{\"notice\":\"Sets fallback oracle\"},\"setPeriod(uint256)\":{\"notice\":\"Sets new period.\"},\"token()\":{\"notice\":\"Token for price\"},\"token0()\":{\"notice\":\"First token of the pair\"},\"token1()\":{\"notice\":\"Second token of the pair\"},\"update()\":{\"notice\":\"Updates price\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/prime/oracles/UniV2TwapOracle.sol\":\"UniV2TwapOracle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x359a1ab89b46b9aba7bcad3fb651924baf4893d15153049b9976b0fc9be1358e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\"},\"contracts/dependencies/uniswap/contracts/Babylonian.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.4.0;\\n\\n// computes square roots using the babylonian method\\n// https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method\\nlibrary Babylonian {\\n\\t// credit for this implementation goes to\\n\\t// https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMath64x64.sol#L687\\n\\tfunction sqrt(uint256 x) internal pure returns (uint256) {\\n\\t\\tif (x == 0) return 0;\\n\\t\\t// this block is equivalent to r = uint256(1) << (BitMath.mostSignificantBit(x) / 2);\\n\\t\\t// however that code costs significantly more gas\\n\\t\\tuint256 xx = x;\\n\\t\\tuint256 r = 1;\\n\\t\\tif (xx >= 0x100000000000000000000000000000000) {\\n\\t\\t\\txx >>= 128;\\n\\t\\t\\tr <<= 64;\\n\\t\\t}\\n\\t\\tif (xx >= 0x10000000000000000) {\\n\\t\\t\\txx >>= 64;\\n\\t\\t\\tr <<= 32;\\n\\t\\t}\\n\\t\\tif (xx >= 0x100000000) {\\n\\t\\t\\txx >>= 32;\\n\\t\\t\\tr <<= 16;\\n\\t\\t}\\n\\t\\tif (xx >= 0x10000) {\\n\\t\\t\\txx >>= 16;\\n\\t\\t\\tr <<= 8;\\n\\t\\t}\\n\\t\\tif (xx >= 0x100) {\\n\\t\\t\\txx >>= 8;\\n\\t\\t\\tr <<= 4;\\n\\t\\t}\\n\\t\\tif (xx >= 0x10) {\\n\\t\\t\\txx >>= 4;\\n\\t\\t\\tr <<= 2;\\n\\t\\t}\\n\\t\\tif (xx >= 0x8) {\\n\\t\\t\\tr <<= 1;\\n\\t\\t}\\n\\t\\tr = (r + x / r) >> 1;\\n\\t\\tr = (r + x / r) >> 1;\\n\\t\\tr = (r + x / r) >> 1;\\n\\t\\tr = (r + x / r) >> 1;\\n\\t\\tr = (r + x / r) >> 1;\\n\\t\\tr = (r + x / r) >> 1;\\n\\t\\tr = (r + x / r) >> 1; // Seven iterations should be enough\\n\\t\\tuint256 r1 = x / r;\\n\\t\\treturn (r < r1 ? r : r1);\\n\\t}\\n}\\n\",\"keccak256\":\"0x6308988d5a6af6f7eede036af5a145fde738202af24559111ca744abe6d4faf3\",\"license\":\"GPL-3.0-or-later\"},\"contracts/dependencies/uniswap/contracts/BitMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.5.0;\\n\\nlibrary BitMath {\\n\\t// returns the 0 indexed position of the most significant bit of the input x\\n\\t// s.t. x >= 2**msb and x < 2**(msb+1)\\n\\tfunction mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n\\t\\trequire(x > 0, \\\"BitMath::mostSignificantBit: zero\\\");\\n\\n\\t\\tif (x >= 0x100000000000000000000000000000000) {\\n\\t\\t\\tx >>= 128;\\n\\t\\t\\tr += 128;\\n\\t\\t}\\n\\t\\tif (x >= 0x10000000000000000) {\\n\\t\\t\\tx >>= 64;\\n\\t\\t\\tr += 64;\\n\\t\\t}\\n\\t\\tif (x >= 0x100000000) {\\n\\t\\t\\tx >>= 32;\\n\\t\\t\\tr += 32;\\n\\t\\t}\\n\\t\\tif (x >= 0x10000) {\\n\\t\\t\\tx >>= 16;\\n\\t\\t\\tr += 16;\\n\\t\\t}\\n\\t\\tif (x >= 0x100) {\\n\\t\\t\\tx >>= 8;\\n\\t\\t\\tr += 8;\\n\\t\\t}\\n\\t\\tif (x >= 0x10) {\\n\\t\\t\\tx >>= 4;\\n\\t\\t\\tr += 4;\\n\\t\\t}\\n\\t\\tif (x >= 0x4) {\\n\\t\\t\\tx >>= 2;\\n\\t\\t\\tr += 2;\\n\\t\\t}\\n\\t\\tif (x >= 0x2) r += 1;\\n\\t}\\n\\n\\t// returns the 0 indexed position of the least significant bit of the input x\\n\\t// s.t. (x & 2**lsb) != 0 and (x & (2**(lsb) - 1)) == 0)\\n\\t// i.e. the bit at the index is set and the mask of all lower bits is 0\\n\\tfunction leastSignificantBit(uint256 x) internal pure returns (uint8 r) {\\n\\t\\trequire(x > 0, \\\"BitMath::leastSignificantBit: zero\\\");\\n\\n\\t\\tr = 255;\\n\\t\\tif (x & type(uint128).max > 0) {\\n\\t\\t\\tr -= 128;\\n\\t\\t} else {\\n\\t\\t\\tx >>= 128;\\n\\t\\t}\\n\\t\\tif (x & type(uint64).max > 0) {\\n\\t\\t\\tr -= 64;\\n\\t\\t} else {\\n\\t\\t\\tx >>= 64;\\n\\t\\t}\\n\\t\\tif (x & type(uint32).max > 0) {\\n\\t\\t\\tr -= 32;\\n\\t\\t} else {\\n\\t\\t\\tx >>= 32;\\n\\t\\t}\\n\\t\\tif (x & type(uint16).max > 0) {\\n\\t\\t\\tr -= 16;\\n\\t\\t} else {\\n\\t\\t\\tx >>= 16;\\n\\t\\t}\\n\\t\\tif (x & type(uint8).max > 0) {\\n\\t\\t\\tr -= 8;\\n\\t\\t} else {\\n\\t\\t\\tx >>= 8;\\n\\t\\t}\\n\\t\\tif (x & 0xf > 0) {\\n\\t\\t\\tr -= 4;\\n\\t\\t} else {\\n\\t\\t\\tx >>= 4;\\n\\t\\t}\\n\\t\\tif (x & 0x3 > 0) {\\n\\t\\t\\tr -= 2;\\n\\t\\t} else {\\n\\t\\t\\tx >>= 2;\\n\\t\\t}\\n\\t\\tif (x & 0x1 > 0) r -= 1;\\n\\t}\\n}\\n\",\"keccak256\":\"0xd26b027ad31ed84c11ba483f716bda0de2d769725d4421cd26537a58cd9fe8d6\",\"license\":\"GPL-3.0-or-later\"},\"contracts/dependencies/uniswap/contracts/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.12;\\n\\nimport \\\"./FullMath.sol\\\";\\nimport \\\"./Babylonian.sol\\\";\\nimport \\\"./BitMath.sol\\\";\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\nlibrary FixedPoint {\\n\\t// range: [0, 2**112 - 1]\\n\\t// resolution: 1 / 2**112\\n\\tstruct uq112x112 {\\n\\t\\tuint224 _x;\\n\\t}\\n\\n\\t// range: [0, 2**144 - 1]\\n\\t// resolution: 1 / 2**112\\n\\tstruct uq144x112 {\\n\\t\\tuint256 _x;\\n\\t}\\n\\n\\tuint8 public constant RESOLUTION = 112;\\n\\tuint256 public constant Q112 = 0x10000000000000000000000000000; // 2**112\\n\\tuint256 private constant Q224 = 0x100000000000000000000000000000000000000000000000000000000; // 2**224\\n\\tuint256 private constant LOWER_MASK = 0xffffffffffffffffffffffffffff; // decimal of UQ*x112 (lower 112 bits)\\n\\n\\t// encode a uint112 as a UQ112x112\\n\\tfunction encode(uint112 x) internal pure returns (uq112x112 memory) {\\n\\t\\treturn uq112x112(uint224(x) << RESOLUTION);\\n\\t}\\n\\n\\t// encodes a uint144 as a UQ144x112\\n\\tfunction encode144(uint144 x) internal pure returns (uq144x112 memory) {\\n\\t\\treturn uq144x112(uint256(x) << RESOLUTION);\\n\\t}\\n\\n\\t// decode a UQ112x112 into a uint112 by truncating after the radix point\\n\\tfunction decode(uq112x112 memory self) internal pure returns (uint112) {\\n\\t\\treturn uint112(self._x >> RESOLUTION);\\n\\t}\\n\\n\\t// decode a UQ144x112 into a uint144 by truncating after the radix point\\n\\tfunction decode144(uq144x112 memory self) internal pure returns (uint144) {\\n\\t\\treturn uint144(self._x >> RESOLUTION);\\n\\t}\\n\\n\\t// multiply a UQ112x112 by a uint, returning a UQ144x112\\n\\t// reverts on overflow\\n\\tfunction mul(uq112x112 memory self, uint256 y) internal pure returns (uq144x112 memory) {\\n\\t\\tuint256 z = 0;\\n\\t\\trequire(y == 0 || (z = self._x * y) / y == self._x, \\\"FixedPoint::mul: overflow\\\");\\n\\t\\treturn uq144x112(z);\\n\\t}\\n\\n\\t// multiply a UQ112x112 by an int and decode, returning an int\\n\\t// reverts on overflow\\n\\tfunction muli(uq112x112 memory self, int256 y) internal pure returns (int256) {\\n\\t\\tuint256 z = FullMath.mulDiv(self._x, uint256(y < 0 ? -y : y), Q112);\\n\\t\\trequire(z < 2 ** 255, \\\"FixedPoint::muli: overflow\\\");\\n\\t\\treturn y < 0 ? -int256(z) : int256(z);\\n\\t}\\n\\n\\t// multiply a UQ112x112 by a UQ112x112, returning a UQ112x112\\n\\t// lossy\\n\\tfunction muluq(uq112x112 memory self, uq112x112 memory other) internal pure returns (uq112x112 memory) {\\n\\t\\tif (self._x == 0 || other._x == 0) {\\n\\t\\t\\treturn uq112x112(0);\\n\\t\\t}\\n\\t\\tuint112 upper_self = uint112(self._x >> RESOLUTION); // * 2^0\\n\\t\\tuint112 lower_self = uint112(self._x & LOWER_MASK); // * 2^-112\\n\\t\\tuint112 upper_other = uint112(other._x >> RESOLUTION); // * 2^0\\n\\t\\tuint112 lower_other = uint112(other._x & LOWER_MASK); // * 2^-112\\n\\n\\t\\t// partial products\\n\\t\\tuint224 upper = uint224(upper_self) * upper_other; // * 2^0\\n\\t\\tuint224 lower = uint224(lower_self) * lower_other; // * 2^-224\\n\\t\\tuint224 uppers_lowero = uint224(upper_self) * lower_other; // * 2^-112\\n\\t\\tuint224 uppero_lowers = uint224(upper_other) * lower_self; // * 2^-112\\n\\n\\t\\t// so the bit shift does not overflow\\n\\t\\trequire(upper <= type(uint112).max, \\\"FixedPoint::muluq: upper overflow\\\");\\n\\n\\t\\t// this cannot exceed 256 bits, all values are 224 bits\\n\\t\\tuint256 sum = uint256(upper << RESOLUTION) + uppers_lowero + uppero_lowers + (lower >> RESOLUTION);\\n\\n\\t\\t// so the cast does not overflow\\n\\t\\trequire(sum <= type(uint224).max, \\\"FixedPoint::muluq: sum overflow\\\");\\n\\n\\t\\treturn uq112x112(uint224(sum));\\n\\t}\\n\\n\\t// divide a UQ112x112 by a UQ112x112, returning a UQ112x112\\n\\tfunction divuq(uq112x112 memory self, uq112x112 memory other) internal pure returns (uq112x112 memory) {\\n\\t\\trequire(other._x > 0, \\\"FixedPoint::divuq: division by zero\\\");\\n\\t\\tif (self._x == other._x) {\\n\\t\\t\\treturn uq112x112(uint224(Q112));\\n\\t\\t}\\n\\t\\tif (self._x <= type(uint144).max) {\\n\\t\\t\\tuint256 value = (uint256(self._x) << RESOLUTION) / other._x;\\n\\t\\t\\trequire(value <= type(uint224).max, \\\"FixedPoint::divuq: overflow\\\");\\n\\t\\t\\treturn uq112x112(uint224(value));\\n\\t\\t}\\n\\n\\t\\tuint256 result = FullMath.mulDiv(Q112, self._x, other._x);\\n\\t\\trequire(result <= type(uint224).max, \\\"FixedPoint::divuq: overflow\\\");\\n\\t\\treturn uq112x112(uint224(result));\\n\\t}\\n\\n\\t// returns a UQ112x112 which represents the ratio of the numerator to the denominator\\n\\t// can be lossy\\n\\tfunction fraction(uint256 numerator, uint256 denominator) internal pure returns (uq112x112 memory) {\\n\\t\\trequire(denominator > 0, \\\"FixedPoint::fraction: division by zero\\\");\\n\\t\\tif (numerator == 0) return FixedPoint.uq112x112(0);\\n\\n\\t\\tif (numerator <= type(uint144).max) {\\n\\t\\t\\tuint256 result = (numerator << RESOLUTION) / denominator;\\n\\t\\t\\trequire(result <= type(uint224).max, \\\"FixedPoint::fraction: overflow\\\");\\n\\t\\t\\treturn uq112x112(uint224(result));\\n\\t\\t} else {\\n\\t\\t\\tuint256 result = FullMath.mulDiv(numerator, Q112, denominator);\\n\\t\\t\\trequire(result <= type(uint224).max, \\\"FixedPoint::fraction: overflow\\\");\\n\\t\\t\\treturn uq112x112(uint224(result));\\n\\t\\t}\\n\\t}\\n\\n\\t// take the reciprocal of a UQ112x112\\n\\t// reverts on overflow\\n\\t// lossy\\n\\tfunction reciprocal(uq112x112 memory self) internal pure returns (uq112x112 memory) {\\n\\t\\trequire(self._x != 0, \\\"FixedPoint::reciprocal: reciprocal of zero\\\");\\n\\t\\trequire(self._x != 1, \\\"FixedPoint::reciprocal: overflow\\\");\\n\\t\\treturn uq112x112(uint224(Q224 / self._x));\\n\\t}\\n\\n\\t// square root of a UQ112x112\\n\\t// lossy between 0/1 and 40 bits\\n\\tfunction sqrt(uq112x112 memory self) internal pure returns (uq112x112 memory) {\\n\\t\\tif (self._x <= type(uint144).max) {\\n\\t\\t\\treturn uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << 112)));\\n\\t\\t}\\n\\n\\t\\tuint8 safeShiftBits = 255 - BitMath.mostSignificantBit(self._x);\\n\\t\\tsafeShiftBits -= safeShiftBits % 2;\\n\\t\\treturn uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << safeShiftBits) << ((112 - safeShiftBits) / 2)));\\n\\t}\\n}\\n\",\"keccak256\":\"0x46164fe97f8bb97a788ddfc518dbdc5683bb1fbd36e01295965f90d75a443ada\",\"license\":\"GPL-3.0-or-later\"},\"contracts/dependencies/uniswap/contracts/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n\\t/// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n\\t/// @param a The multiplicand\\n\\t/// @param b The multiplier\\n\\t/// @param denominator The divisor\\n\\t/// @return result The 256-bit result\\n\\t/// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n\\tfunction mulDiv(uint256 a, uint256 b, uint256 denominator) internal pure returns (uint256 result) {\\n\\t\\tunchecked {\\n\\t\\t\\t// 512-bit multiply [prod1 prod0] = a * b\\n\\t\\t\\t// Compute the product mod 2**256 and mod 2**256 - 1\\n\\t\\t\\t// then use the Chinese Remainder Theorem to reconstruct\\n\\t\\t\\t// the 512 bit result. The result is stored in two 256\\n\\t\\t\\t// variables such that product = prod1 * 2**256 + prod0\\n\\t\\t\\tuint256 prod0; // Least significant 256 bits of the product\\n\\t\\t\\tuint256 prod1; // Most significant 256 bits of the product\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tlet mm := mulmod(a, b, not(0))\\n\\t\\t\\t\\tprod0 := mul(a, b)\\n\\t\\t\\t\\tprod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Handle non-overflow cases, 256 by 256 division\\n\\t\\t\\tif (prod1 == 0) {\\n\\t\\t\\t\\trequire(denominator > 0);\\n\\t\\t\\t\\tassembly {\\n\\t\\t\\t\\t\\tresult := div(prod0, denominator)\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn result;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Make sure the result is less than 2**256.\\n\\t\\t\\t// Also prevents denominator == 0\\n\\t\\t\\trequire(denominator > prod1);\\n\\n\\t\\t\\t///////////////////////////////////////////////\\n\\t\\t\\t// 512 by 256 division.\\n\\t\\t\\t///////////////////////////////////////////////\\n\\n\\t\\t\\t// Make division exact by subtracting the remainder from [prod1 prod0]\\n\\t\\t\\t// Compute remainder using mulmod\\n\\t\\t\\tuint256 remainder;\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tremainder := mulmod(a, b, denominator)\\n\\t\\t\\t}\\n\\t\\t\\t// Subtract 256 bit number from 512 bit number\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tprod1 := sub(prod1, gt(remainder, prod0))\\n\\t\\t\\t\\tprod0 := sub(prod0, remainder)\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Factor powers of two out of denominator\\n\\t\\t\\t// Compute largest power of two divisor of denominator.\\n\\t\\t\\t// Always >= 1.\\n\\t\\t\\tuint256 twos = (0 - denominator) & denominator;\\n\\t\\t\\t// Divide denominator by power of two\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tdenominator := div(denominator, twos)\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Divide [prod1 prod0] by the factors of two\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tprod0 := div(prod0, twos)\\n\\t\\t\\t}\\n\\t\\t\\t// Shift in bits from prod1 into prod0. For this we need\\n\\t\\t\\t// to flip `twos` such that it is 2**256 / twos.\\n\\t\\t\\t// If twos is zero, then it becomes one\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\ttwos := add(div(sub(0, twos), twos), 1)\\n\\t\\t\\t}\\n\\t\\t\\tprod0 |= prod1 * twos;\\n\\n\\t\\t\\t// Invert denominator mod 2**256\\n\\t\\t\\t// Now that denominator is an odd number, it has an inverse\\n\\t\\t\\t// modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n\\t\\t\\t// Compute the inverse by starting with a seed that is correct\\n\\t\\t\\t// correct for four bits. That is, denominator * inv = 1 mod 2**4\\n\\t\\t\\tuint256 inv = (3 * denominator) ^ 2;\\n\\t\\t\\t// Now use Newton-Raphson iteration to improve the precision.\\n\\t\\t\\t// Thanks to Hensel's lifting lemma, this also works in modular\\n\\t\\t\\t// arithmetic, doubling the correct bits in each step.\\n\\t\\t\\tinv *= 2 - denominator * inv; // inverse mod 2**8\\n\\t\\t\\tinv *= 2 - denominator * inv; // inverse mod 2**16\\n\\t\\t\\tinv *= 2 - denominator * inv; // inverse mod 2**32\\n\\t\\t\\tinv *= 2 - denominator * inv; // inverse mod 2**64\\n\\t\\t\\tinv *= 2 - denominator * inv; // inverse mod 2**128\\n\\t\\t\\tinv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n\\t\\t\\t// Because the division is now exact we can divide by multiplying\\n\\t\\t\\t// with the modular inverse of denominator. This will give us the\\n\\t\\t\\t// correct result modulo 2**256. Since the precoditions guarantee\\n\\t\\t\\t// that the outcome is less than 2**256, this is the final result.\\n\\t\\t\\t// We don't need to compute the high bits of the result and prod1\\n\\t\\t\\t// is no longer required.\\n\\t\\t\\tresult = prod0 * inv;\\n\\t\\t\\treturn result;\\n\\t\\t}\\n\\t}\\n\\n\\t/// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n\\t/// @param a The multiplicand\\n\\t/// @param b The multiplier\\n\\t/// @param denominator The divisor\\n\\t/// @return result The 256-bit result\\n\\tfunction mulDivRoundingUp(uint256 a, uint256 b, uint256 denominator) internal pure returns (uint256 result) {\\n\\t\\tunchecked {\\n\\t\\t\\tresult = mulDiv(a, b, denominator);\\n\\t\\t\\tif (mulmod(a, b, denominator) > 0) {\\n\\t\\t\\t\\trequire(result < type(uint256).max);\\n\\t\\t\\t\\tresult++;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x461ce032f6f780016e38f542b65dbbf06799f3c5162160d8867eb41b6fa9a8a4\",\"license\":\"MIT\"},\"contracts/dependencies/uniswap/contracts/UniswapV2OracleLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.5.0;\\n\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"./FixedPoint.sol\\\";\\n\\n// library with helper methods for oracles that are concerned with computing average prices\\nlibrary UniswapV2OracleLibrary {\\n\\tusing FixedPoint for *;\\n\\n\\t// helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\\n\\tfunction currentBlockTimestamp() internal view returns (uint32) {\\n\\t\\treturn uint32(block.timestamp % 2 ** 32);\\n\\t}\\n\\n\\t// produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\\n\\tfunction currentCumulativePrices(\\n\\t\\taddress pair\\n\\t) internal view returns (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) {\\n\\t\\tblockTimestamp = currentBlockTimestamp();\\n\\t\\tprice0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\\n\\t\\tprice1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\\n\\n\\t\\t// if time has elapsed since the last update on the pair, mock the accumulated price values\\n\\t\\t(uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\\n\\t\\tif (blockTimestampLast != blockTimestamp) {\\n\\t\\t\\t// subtraction overflow is desired\\n\\t\\t\\tuint32 timeElapsed = blockTimestamp - blockTimestampLast;\\n\\t\\t\\t// addition overflow is desired\\n\\t\\t\\t// counterfactual\\n\\t\\t\\tprice0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\\n\\t\\t\\t// counterfactual\\n\\t\\t\\tprice1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0xb41332b5f7542576a2433b628b6aaf744c3ed2fac702ebb08d5742acfbb9873b\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/AggregatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\ninterface AggregatorInterface {\\n\\tfunction latestAnswer() external view returns (int256);\\n\\n\\tfunction latestTimestamp() external view returns (uint256);\\n\\n\\tfunction latestRound() external view returns (uint256);\\n\\n\\tfunction getAnswer(uint256 roundId) external view returns (int256);\\n\\n\\tfunction getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n\\tevent AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n\\n\\tevent NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\",\"keccak256\":\"0xb2938f7114988ee6a3a1e86310e06d38ac8aace76d344b60cb1da30de49fff16\",\"license\":\"MIT\"},\"contracts/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\ninterface AggregatorV3Interface {\\n\\tfunction decimals() external view returns (uint8);\\n\\n\\tfunction description() external view returns (string memory);\\n\\n\\tfunction version() external view returns (uint256);\\n\\n\\t// getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n\\t// if they do not have data to report, instead of returning unset values\\n\\t// which could be misinterpreted as actual reported values.\\n\\tfunction getRoundData(\\n\\t\\tuint80 _roundId\\n\\t)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n\\tfunction latestRoundData()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0x0a6cadd5e05492e74282965db755bc834bb468ee493ae44429c7f2cf38fb8d5f\",\"license\":\"MIT\"},\"contracts/interfaces/IBaseOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\ninterface IBaseOracle {\\n\\tfunction latestAnswer() external view returns (uint256 price);\\n\\n\\tfunction latestAnswerInEth() external view returns (uint256 price);\\n\\n\\tfunction update() external;\\n\\n\\tfunction canUpdate() external view returns (bool);\\n\\n\\tfunction consult() external view returns (uint256 price);\\n}\\n\",\"keccak256\":\"0xaea33fc98413b52ae33c22aff071429893fbf61a67ba06e6ad0ae15e14b3c265\",\"license\":\"MIT\"},\"contracts/interfaces/IChainlinkAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Code from https://github.com/smartcontractkit/chainlink/blob/master/evm-contracts/src/v0.6/interfaces/AggregatorV3Interface.sol\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"./AggregatorInterface.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\ninterface IChainlinkAggregator is AggregatorInterface, AggregatorV3Interface {}\\n\",\"keccak256\":\"0xcfc3dbbd8052419569c2ba3cedde2193da530ca2e3e5b2e09ca79612f5860727\",\"license\":\"MIT\"},\"contracts/prime/oracles/BaseOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {IChainlinkAggregator} from \\\"../../interfaces/IChainlinkAggregator.sol\\\";\\nimport {IBaseOracle} from \\\"../../interfaces/IBaseOracle.sol\\\";\\n\\n/// @title BaseOracle Contract\\n/// @author Prime\\nabstract contract BaseOracle is Initializable, OwnableUpgradeable {\\n\\t/// @notice Token for price\\n\\taddress public token;\\n\\n\\t/// @notice Chainlink price feed for ETH\\n\\taddress public ethChainlinkFeed;\\n\\n\\t/// @notice Enable/Disable fallback\\n\\tbool public fallbackEnabled;\\n\\n\\t/// @notice Oracle to be used as a fallback\\n\\tIBaseOracle public fallbackOracle;\\n\\n\\terror AddressZero();\\n\\n\\terror FallbackNotSet();\\n\\n\\t/********************** Events ***********************/\\n\\tevent FallbackOracleUpdated(address indexed _fallback);\\n\\n\\tevent FallbackOracleEnabled(bool indexed _enabled);\\n\\n\\tconstructor() {\\n\\t\\t_disableInitializers();\\n\\t}\\n\\n\\t/**\\n\\t * @notice Initializer\\n\\t * @param _token Token address.\\n\\t * @param _ethChainlinkFeed chainlink price feed for ETH.\\n\\t */\\n\\tfunction __BaseOracle_init(address _token, address _ethChainlinkFeed) internal onlyInitializing {\\n\\t\\t__Ownable_init();\\n\\t\\ttoken = _token;\\n\\t\\tethChainlinkFeed = _ethChainlinkFeed;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Sets fallback oracle\\n\\t * @param _fallback Oracle address for fallback.\\n\\t */\\n\\tfunction setFallback(address _fallback) external onlyOwner {\\n\\t\\tif (_fallback == address(0)) revert AddressZero();\\n\\t\\tfallbackOracle = IBaseOracle(_fallback);\\n\\t\\temit FallbackOracleUpdated(_fallback);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Enable/Disable use of fallback oracle\\n\\t * @param _enabled Boolean value.\\n\\t */\\n\\tfunction enableFallback(bool _enabled) external onlyOwner {\\n\\t\\tif (address(fallbackOracle) == (address(0))) revert FallbackNotSet();\\n\\t\\tfallbackEnabled = _enabled;\\n\\t\\temit FallbackOracleEnabled(_enabled);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns USD price in quote token.\\n\\t * @dev supports 18 decimal token\\n\\t * @return price of token in decimal 8\\n\\t */\\n\\tfunction latestAnswer() public view returns (uint256 price) {\\n\\t\\t// returns decimals 8\\n\\t\\tuint256 priceInEth = latestAnswerInEth();\\n\\n\\t\\t// returns decimals 8\\n\\t\\tuint256 ethPrice = uint256(IChainlinkAggregator(ethChainlinkFeed).latestAnswer());\\n\\n\\t\\tprice = (priceInEth * ethPrice) / (10 ** 8);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns price in ETH\\n\\t * @dev supports 18 decimal token\\n\\t * @return price of token in decimal 8.\\n\\t */\\n\\tfunction latestAnswerInEth() public view returns (uint256 price) {\\n\\t\\tif (!fallbackEnabled) {\\n\\t\\t\\tprice = consult();\\n\\t\\t} else {\\n\\t\\t\\tprice = fallbackOracle.consult();\\n\\t\\t}\\n\\t\\tprice = price / (10 ** 10);\\n\\t}\\n\\n\\t/**\\n\\t * @dev returns possibility for update\\n\\t */\\n\\tfunction canUpdate() public view virtual returns (bool) {\\n\\t\\treturn false;\\n\\t}\\n\\n\\t/**\\n\\t * @dev implement in child contract\\n\\t */\\n\\tfunction consult() public view virtual returns (uint256) {}\\n\\n\\t// Allowing for storage vars to be added/shifted above without effecting any inheriting contracts/proxies\\n\\tuint256[50] private __gap;\\n}\",\"keccak256\":\"0x7dc937bc5f5e6799e858d8b1577acda593a82916e7248c95e7752ab38b14b036\",\"license\":\"MIT\"},\"contracts/prime/oracles/UniV2TwapOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.12;\\n\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {BaseOracle} from \\\"./BaseOracle.sol\\\";\\nimport {FixedPoint} from \\\"../../dependencies/uniswap/contracts/FixedPoint.sol\\\";\\nimport {UniswapV2OracleLibrary, IUniswapV2Pair} from \\\"../../dependencies/uniswap/contracts/UniswapV2OracleLibrary.sol\\\";\\n\\n/// @title UniV2TwapOracle Contract\\n/// @author Prime team\\n/// @dev Fixed window oracle that recomputes the average price for the entire period once every period\\n/// Note that the price average is only guaranteed to be over at least 1 period, but may be over a longer period\\ncontract UniV2TwapOracle is BaseOracle {\\n\\tusing FixedPoint for *;\\n\\n\\t/// @notice TWAP period\\n\\tuint256 public period;\\n\\n\\t/// @notice Used for being able to consult past the period end\\n\\tuint256 public consultLeniency;\\n\\n\\t/// @notice If false, consult() will fail if the TWAP is stale\\n\\tbool public allowStaleConsults;\\n\\n\\t/// @notice Uniswap pair contract\\n\\tIUniswapV2Pair public pair;\\n\\n\\t/// @notice First token of the pair\\n\\taddress public token0;\\n\\n\\t/// @notice Second token of the pair\\n\\taddress public token1;\\n\\n\\t/// @notice First token of the pair\\n\\tuint256 public price0CumulativeLast;\\n\\n\\t/// @notice First token of the pair\\n\\tuint256 public price1CumulativeLast;\\n\\n\\t/// @notice Last updated timestamp\\n\\tuint32 public blockTimestampLast;\\n\\n\\t/// @notice Average price of token0\\n\\tFixedPoint.uq112x112 public price0Average;\\n\\n\\t/// @notice Average price of token1\\n\\tFixedPoint.uq112x112 public price1Average;\\n\\n\\t/// @notice Minimum TWAP time period\\n\\tuint256 public constant PERIOD_MIN = 10;\\n\\n\\terror InvalidToken();\\n\\n\\terror NoReserves();\\n\\n\\terror PeriodBelowMin();\\n\\n\\terror PeriodNotElapsed();\\n\\n\\terror PriceIsStale();\\n\\n\\t/********************** Events ***********************/\\n\\n\\tevent PeriodUpdated(uint256 indexed _period);\\n\\n\\tevent ConsultLeniencyUpdated(uint256 indexed _consultLeniency);\\n\\n\\tevent AllowStaleConsultsUpdated(bool indexed _allowStaleConsults);\\n\\n\\tconstructor() {\\n\\t\\t_disableInitializers();\\n\\t}\\n\\n\\t/**\\n\\t * @notice Initializer\\n\\t * @param _pair Uniswap pair contract\\n\\t * @param _prnt PRNT token address.\\n\\t * @param _ethChainlinkFeed Chainlink price feed for ETH.\\n\\t * @param _period TWAP period.\\n\\t * @param _consultLeniency Used for being able to consult past the period end.\\n\\t * @param _allowStaleConsults Enable/Disable stale.\\n\\t */\\n\\tfunction initialize(\\n\\t\\taddress _pair,\\n\\t\\taddress _prnt,\\n\\t\\taddress _ethChainlinkFeed,\\n\\t\\tuint256 _period,\\n\\t\\tuint256 _consultLeniency,\\n\\t\\tbool _allowStaleConsults\\n\\t) external initializer {\\n\\t\\tif (_pair == address(0)) revert AddressZero();\\n\\t\\tif (_prnt == address(0)) revert AddressZero();\\n\\t\\tif (_ethChainlinkFeed == address(0)) revert AddressZero();\\n\\n\\t\\tpair = IUniswapV2Pair(_pair);\\n\\t\\ttoken0 = pair.token0();\\n\\t\\ttoken1 = pair.token1();\\n\\n\\t\\tprice0CumulativeLast = pair.price0CumulativeLast(); // Fetch the current accumulated price value (1 / 0)\\n\\t\\tprice1CumulativeLast = pair.price1CumulativeLast(); // Fetch the current accumulated price value (0 / 1)\\n\\t\\tuint112 reserve0;\\n\\t\\tuint112 reserve1;\\n\\t\\t(reserve0, reserve1, blockTimestampLast) = pair.getReserves();\\n\\n\\t\\tif (reserve0 == 0 || reserve1 == 0) revert NoReserves(); // Ensure that there's liquidity in the pair\\n\\t\\tif (_period < PERIOD_MIN) revert PeriodBelowMin(); // Ensure period has a min time\\n\\n\\t\\tperiod = _period;\\n\\t\\tconsultLeniency = _consultLeniency;\\n\\t\\tallowStaleConsults = _allowStaleConsults;\\n\\n\\t\\t__BaseOracle_init(_prnt, _ethChainlinkFeed);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Sets new period.\\n\\t * @param _period TWAP period.\\n\\t */\\n\\tfunction setPeriod(uint256 _period) external onlyOwner {\\n\\t\\tif (_period < PERIOD_MIN) revert PeriodBelowMin(); // Ensure period has a min time\\n\\t\\tperiod = _period;\\n\\t\\temit PeriodUpdated(_period);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Sets new consult leniency.\\n\\t * @param _consultLeniency new value.\\n\\t */\\n\\tfunction setConsultLeniency(uint256 _consultLeniency) external onlyOwner {\\n\\t\\tconsultLeniency = _consultLeniency;\\n\\t\\temit ConsultLeniencyUpdated(_consultLeniency);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Sets stale consult option.\\n\\t * @param _allowStaleConsults new value.\\n\\t */\\n\\tfunction setAllowStaleConsults(bool _allowStaleConsults) external onlyOwner {\\n\\t\\tallowStaleConsults = _allowStaleConsults;\\n\\t\\temit AllowStaleConsultsUpdated(_allowStaleConsults);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Check if update() can be called instead of wasting gas calling it.\\n\\t */\\n\\tfunction canUpdate() public view override returns (bool) {\\n\\t\\tuint32 blockTimestamp = UniswapV2OracleLibrary.currentBlockTimestamp();\\n\\t\\tuint32 timeElapsed;\\n\\t\\tunchecked {\\n\\t\\t\\ttimeElapsed = blockTimestamp - blockTimestampLast; // Overflow is desired\\n\\t\\t}\\n\\t\\treturn (timeElapsed >= period);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Updates price\\n\\t */\\n\\tfunction update() external {\\n\\t\\t(uint256 price0Cumulative, uint256 price1Cumulative, uint32 blockTimestamp) = UniswapV2OracleLibrary\\n\\t\\t\\t.currentCumulativePrices(address(pair));\\n\\t\\tuint32 timeElapsed;\\n\\t\\tunchecked {\\n\\t\\t\\ttimeElapsed = blockTimestamp - blockTimestampLast; // Overflow is desired\\n\\t\\t}\\n\\n\\t\\t// Ensure that at least one full period has passed since the last update\\n\\t\\tif (timeElapsed < period) revert PeriodNotElapsed();\\n\\n\\t\\t// Overflow is desired, casting never truncates\\n\\t\\t// Cumulative price is in (uq112x112 price * seconds) units so we simply wrap it after division by time elapsed\\n\\t\\tunchecked {\\n\\t\\t\\tprice0Average = FixedPoint.uq112x112(uint224((price0Cumulative - price0CumulativeLast) / timeElapsed));\\n\\t\\t\\tprice1Average = FixedPoint.uq112x112(uint224((price1Cumulative - price1CumulativeLast) / timeElapsed));\\n\\t\\t\\tprice0CumulativeLast = price0Cumulative;\\n\\t\\t\\tprice1CumulativeLast = price1Cumulative;\\n\\t\\t\\tblockTimestampLast = blockTimestamp;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev This will always return 0 before update has been called successfully for the first time.\\n\\t */\\n\\tfunction _consult(address _token, uint256 _amountIn) internal view returns (uint256 amountOut) {\\n\\t\\tuint32 blockTimestamp = UniswapV2OracleLibrary.currentBlockTimestamp();\\n\\t\\tuint32 timeElapsed;\\n\\t\\tunchecked {\\n\\t\\t\\ttimeElapsed = blockTimestamp - blockTimestampLast; // Overflow is desired\\n\\t\\t}\\n\\n\\t\\t// Ensure that the price is not stale\\n\\t\\tif ((timeElapsed >= (period + consultLeniency)) && !allowStaleConsults) revert PriceIsStale();\\n\\n\\t\\tif (_token == token0) {\\n\\t\\t\\tamountOut = price0Average.mul(_amountIn).decode144();\\n\\t\\t} else {\\n\\t\\t\\tif (_token != token1) revert InvalidToken();\\n\\t\\t\\tamountOut = price1Average.mul(_amountIn).decode144();\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns current price.\\n\\t */\\n\\tfunction consult() public view override returns (uint256) {\\n\\t\\tuint8 decimals = IERC20Metadata(token).decimals();\\n\\t\\treturn _consult(token, 10 ** decimals);\\n\\t}\\n}\",\"keccak256\":\"0xad007bb3c986ec9f9e33a1864be5de6de25f9713f70453d91cf3f4d91f95527b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610019610026565b610021610026565b6100e5565b600054610100900460ff16156100925760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff908116146100e3576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b611b6680620000f56000396000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c80637eeda70311610104578063a6bb4539116100a2578063ef78d4fd11610071578063ef78d4fd146103c7578063f1551aea146103d0578063f2fde38b146103e3578063fc0c546a146103f657600080fd5b8063a6bb453914610364578063a8aa1b3114610377578063c5700a021461038f578063d21220a7146103b457600080fd5b80639141442f116100de5780639141442f14610339578063a17a268514610341578063a2bc88dc14610349578063a2e620451461035c57600080fd5b80637eeda7031461031357806383f1cf5c1461031b5780638da5cb5b1461032857600080fd5b806335c1bead1161017c5780635cb9a7141161014b5780635cb9a714146102ba5780635e6aaf2c146102cd578063629838e5146102f8578063715018a61461030b57600080fd5b806335c1bead1461029757806350d25bcd146102a05780635909c0d5146102a85780635a3d5493146102b157600080fd5b8063251cdcd8116101b8578063251cdcd8146102375780632e70a14d1461024d578063316cefde1461027157806332b12eac1461028457600080fd5b80630dfe1681146101df5780630f3a9f651461020f57806310535afe14610224575b600080fd5b609d546101f2906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61022261021d3660046117df565b610409565b005b61022261023236600461180d565b610466565b61023f610514565b604051908152602001610206565b60665461026190600160a01b900460ff1681565b6040519015158152602001610206565b61022261027f36600461183d565b6105c5565b6102226102923660046118a9565b610aff565b61023f609b5481565b61023f610b78565b61023f609f5481565b61023f60a05481565b6102226102c83660046117df565b610c20565b60a3546102e0906001600160e01b031681565b6040516001600160e01b039091168152602001610206565b6067546101f2906001600160a01b031681565b610222610c5b565b61023f610c6f565b609c546102619060ff1681565b6033546001600160a01b03166101f2565b61023f600a81565b610261610d12565b6066546101f2906001600160a01b031681565b610222610d37565b60a2546102e0906001600160e01b031681565b609c546101f29061010090046001600160a01b031681565b60a15461039f9063ffffffff1681565b60405163ffffffff9091168152602001610206565b609e546101f2906001600160a01b031681565b61023f609a5481565b6102226103de36600461180d565b610e9a565b6102226103f13660046118a9565b610edf565b6065546101f2906001600160a01b031681565b610411610f6f565b600a8110156104335760405163025127a960e51b815260040160405180910390fd5b609a81905560405181907f989f99d0a575dfaf67701aef35b8654442a4705a4bce243d8f81e1bb2bc4a63f90600090a250565b61046e610f6f565b6067546001600160a01b03166104b0576040517f103e66e600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606680547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16600160a01b831515908102919091179091556040517fc24928e59005cadf27a1d44dd5a2da69bb7c079ddbb4414f3169ae1209f8839390600090a250565b606654600090600160a01b900460ff1661053757610530610c6f565b90506105b1565b606760009054906101000a90046001600160a01b03166001600160a01b0316637eeda7036040518163ffffffff1660e01b8152600401602060405180830381865afa15801561058a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ae91906118c6565b90505b6105c06402540be4008261190b565b905090565b600054610100900460ff16158080156105e55750600054600160ff909116105b806105ff5750303b1580156105ff575060005460ff166001145b6106765760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b6000805460ff191660011790558015610699576000805461ff0019166101001790555b6001600160a01b0387166106c057604051639fabe1c160e01b815260040160405180910390fd5b6001600160a01b0386166106e757604051639fabe1c160e01b815260040160405180910390fd5b6001600160a01b03851661070e57604051639fabe1c160e01b815260040160405180910390fd5b86609c60016101000a8154816001600160a01b0302191690836001600160a01b03160217905550609c60019054906101000a90046001600160a01b03166001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610788573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ac919061191f565b609d80546001600160a01b0319166001600160a01b03928316179055609c54604080517fd21220a700000000000000000000000000000000000000000000000000000000815290516101009092049092169163d21220a79160048083019260209291908290030181865afa158015610828573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084c919061191f565b609e80546001600160a01b0319166001600160a01b03928316179055609c54604080517f5909c0d5000000000000000000000000000000000000000000000000000000008152905161010090920490921691635909c0d59160048083019260209291908290030181865afa1580156108c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ec91906118c6565b609f81905550609c60019054906101000a90046001600160a01b03166001600160a01b0316635a3d54936040518163ffffffff1660e01b8152600401602060405180830381865afa158015610945573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096991906118c6565b60a081905550600080609c60019054906101000a90046001600160a01b03166001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156109c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e9919061195a565b60a1805463ffffffff191663ffffffff9290921691909117905590925090506dffffffffffffffffffffffffffff82161580610a3357506dffffffffffffffffffffffffffff8116155b15610a6a576040517fd8b9cde100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600a861015610a8c5760405163025127a960e51b815260040160405180910390fd5b609a869055609b859055609c805460ff1916851515179055610aae8888610fc9565b50508015610af6576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b610b07610f6f565b6001600160a01b038116610b2e57604051639fabe1c160e01b815260040160405180910390fd5b606780546001600160a01b0319166001600160a01b0383169081179091556040517fce7a780d33665b1ea097af5f155e3821b809ecbaa839d3b33aa83ba28168cefb90600090a250565b600080610b83610514565b90506000606660009054906101000a90046001600160a01b03166001600160a01b03166350d25bcd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bfe91906118c6565b90506305f5e100610c0f82846119aa565b610c19919061190b565b9250505090565b610c28610f6f565b609b81905560405181907f993b8b98616df830268242daa1c34013d7565eaeafb3f0ccaa3dbfe1742a5c1b90600090a250565b610c63610f6f565b610c6d600061106a565b565b600080606560009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cc5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce991906119c9565b606554909150610d0c906001600160a01b0316610d0783600a611ad0565b6110bc565b91505090565b600080610d1d611223565b60a154609a5463ffffffff91821690920316101592915050565b6000806000610d5a609c60019054906101000a90046001600160a01b0316611234565b60a154609a54939650919450925063ffffffff9081168303919082161015610dae576040517ff0aaee6500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405180602001604052808263ffffffff16609f54870381610dd257610dd26118df565b046001600160e01b03908116909152905160a280547fffffffff000000000000000000000000000000000000000000000000000000001691909216179055604080516020810190915260a054819063ffffffff841690860381610e3757610e376118df565b046001600160e01b03908116909152905160a380547fffffffff00000000000000000000000000000000000000000000000000000000169190921617905550609f9290925560a05560a1805463ffffffff191663ffffffff909216919091179055565b610ea2610f6f565b609c805460ff19168215159081179091556040517fe942a0816caaa8241b424ac8c9844952d2f2dbd4dd1e04caefaf9624fe71b15d90600090a250565b610ee7610f6f565b6001600160a01b038116610f635760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161066d565b610f6c8161106a565b50565b6033546001600160a01b03163314610c6d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161066d565b600054610100900460ff166110345760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161066d565b61103c611447565b606580546001600160a01b039384166001600160a01b03199182161790915560668054929093169116179055565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000806110c7611223565b60a154609b54609a5492935063ffffffff9091168303916110e89190611adf565b8163ffffffff16101580156111005750609c5460ff16155b15611137576040517f857860b600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b609d546001600160a01b038681169116141561119657604080516020810190915260a2546001600160e01b0316815261117b9061117490866114ba565b5160701c90565b71ffffffffffffffffffffffffffffffffffff16925061121b565b609e546001600160a01b038681169116146111dd576040517fc1ab6dc100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604080516020810190915260a3546001600160e01b031681526112049061117490866114ba565b71ffffffffffffffffffffffffffffffffffff1692505b505092915050565b60006105c064010000000042611af7565b6000806000611241611223565b9050836001600160a01b0316635909c0d56040518163ffffffff1660e01b8152600401602060405180830381865afa158015611281573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a591906118c6565b9250836001600160a01b0316635a3d54936040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112e5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130991906118c6565b91506000806000866001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa15801561134e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611372919061195a565b9250925092508363ffffffff168163ffffffff161461143d5760006113978286611b0b565b90508063ffffffff166113ca846dffffffffffffffffffffffffffff16866dffffffffffffffffffffffffffff1661155a565b516113de91906001600160e01b03166119aa565b6113e89088611adf565b96508063ffffffff1661141b856dffffffffffffffffffffffffffff16856dffffffffffffffffffffffffffff1661155a565b5161142f91906001600160e01b03166119aa565b6114399087611adf565b9550505b5050509193909250565b600054610100900460ff166114b25760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161066d565b610c6d6116b7565b60408051602081019091526000815260008215806114f7575083516001600160e01b0316836114e981836119aa565b92506114f5908361190b565b145b6115435760405162461bcd60e51b815260206004820152601960248201527f4669786564506f696e743a3a6d756c3a206f766572666c6f7700000000000000604482015260640161066d565b604080516020810190915290815290505b92915050565b604080516020810190915260008152600082116115df5760405162461bcd60e51b815260206004820152602660248201527f4669786564506f696e743a3a6672616374696f6e3a206469766973696f6e206260448201527f79207a65726f0000000000000000000000000000000000000000000000000000606482015260840161066d565b826115f95750604080516020810190915260008152611554565b71ffffffffffffffffffffffffffffffffffff831161169b57600061162283607086901b61190b565b90506001600160e01b0381111561167b5760405162461bcd60e51b815260206004820152601e60248201527f4669786564506f696e743a3a6672616374696f6e3a206f766572666c6f770000604482015260640161066d565b6040518060200160405280826001600160e01b0316815250915050611554565b6000611622846e0100000000000000000000000000008561172b565b600054610100900460ff166117225760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161066d565b610c6d3361106a565b600080806000198587098587029250828110838203039150508060001415611765576000841161175a57600080fd5b5082900490506117d8565b80841161177157600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150505b9392505050565b6000602082840312156117f157600080fd5b5035919050565b8035801515811461180857600080fd5b919050565b60006020828403121561181f57600080fd5b6117d8826117f8565b6001600160a01b0381168114610f6c57600080fd5b60008060008060008060c0878903121561185657600080fd5b863561186181611828565b9550602087013561187181611828565b9450604087013561188181611828565b9350606087013592506080870135915061189d60a088016117f8565b90509295509295509295565b6000602082840312156118bb57600080fd5b81356117d881611828565b6000602082840312156118d857600080fd5b5051919050565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008261191a5761191a6118df565b500490565b60006020828403121561193157600080fd5b81516117d881611828565b80516dffffffffffffffffffffffffffff8116811461180857600080fd5b60008060006060848603121561196f57600080fd5b6119788461193c565b92506119866020850161193c565b9150604084015163ffffffff8116811461199f57600080fd5b809150509250925092565b60008160001904831182151516156119c4576119c46118f5565b500290565b6000602082840312156119db57600080fd5b815160ff811681146117d857600080fd5b600181815b80851115611a27578160001904821115611a0d57611a0d6118f5565b80851615611a1a57918102915b93841c93908002906119f1565b509250929050565b600082611a3e57506001611554565b81611a4b57506000611554565b8160018114611a615760028114611a6b57611a87565b6001915050611554565b60ff841115611a7c57611a7c6118f5565b50506001821b611554565b5060208310610133831016604e8410600b8410161715611aaa575081810a611554565b611ab483836119ec565b8060001904821115611ac857611ac86118f5565b029392505050565b60006117d860ff841683611a2f565b60008219821115611af257611af26118f5565b500190565b600082611b0657611b066118df565b500690565b600063ffffffff83811690831681811015611b2857611b286118f5565b03939250505056fea264697066735822122095ae6e05acdca781b28a53549b1189e85c8badb84cafc03d4183719fb61ad6fd64736f6c634300080c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101da5760003560e01c80637eeda70311610104578063a6bb4539116100a2578063ef78d4fd11610071578063ef78d4fd146103c7578063f1551aea146103d0578063f2fde38b146103e3578063fc0c546a146103f657600080fd5b8063a6bb453914610364578063a8aa1b3114610377578063c5700a021461038f578063d21220a7146103b457600080fd5b80639141442f116100de5780639141442f14610339578063a17a268514610341578063a2bc88dc14610349578063a2e620451461035c57600080fd5b80637eeda7031461031357806383f1cf5c1461031b5780638da5cb5b1461032857600080fd5b806335c1bead1161017c5780635cb9a7141161014b5780635cb9a714146102ba5780635e6aaf2c146102cd578063629838e5146102f8578063715018a61461030b57600080fd5b806335c1bead1461029757806350d25bcd146102a05780635909c0d5146102a85780635a3d5493146102b157600080fd5b8063251cdcd8116101b8578063251cdcd8146102375780632e70a14d1461024d578063316cefde1461027157806332b12eac1461028457600080fd5b80630dfe1681146101df5780630f3a9f651461020f57806310535afe14610224575b600080fd5b609d546101f2906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61022261021d3660046117df565b610409565b005b61022261023236600461180d565b610466565b61023f610514565b604051908152602001610206565b60665461026190600160a01b900460ff1681565b6040519015158152602001610206565b61022261027f36600461183d565b6105c5565b6102226102923660046118a9565b610aff565b61023f609b5481565b61023f610b78565b61023f609f5481565b61023f60a05481565b6102226102c83660046117df565b610c20565b60a3546102e0906001600160e01b031681565b6040516001600160e01b039091168152602001610206565b6067546101f2906001600160a01b031681565b610222610c5b565b61023f610c6f565b609c546102619060ff1681565b6033546001600160a01b03166101f2565b61023f600a81565b610261610d12565b6066546101f2906001600160a01b031681565b610222610d37565b60a2546102e0906001600160e01b031681565b609c546101f29061010090046001600160a01b031681565b60a15461039f9063ffffffff1681565b60405163ffffffff9091168152602001610206565b609e546101f2906001600160a01b031681565b61023f609a5481565b6102226103de36600461180d565b610e9a565b6102226103f13660046118a9565b610edf565b6065546101f2906001600160a01b031681565b610411610f6f565b600a8110156104335760405163025127a960e51b815260040160405180910390fd5b609a81905560405181907f989f99d0a575dfaf67701aef35b8654442a4705a4bce243d8f81e1bb2bc4a63f90600090a250565b61046e610f6f565b6067546001600160a01b03166104b0576040517f103e66e600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606680547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16600160a01b831515908102919091179091556040517fc24928e59005cadf27a1d44dd5a2da69bb7c079ddbb4414f3169ae1209f8839390600090a250565b606654600090600160a01b900460ff1661053757610530610c6f565b90506105b1565b606760009054906101000a90046001600160a01b03166001600160a01b0316637eeda7036040518163ffffffff1660e01b8152600401602060405180830381865afa15801561058a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ae91906118c6565b90505b6105c06402540be4008261190b565b905090565b600054610100900460ff16158080156105e55750600054600160ff909116105b806105ff5750303b1580156105ff575060005460ff166001145b6106765760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b6000805460ff191660011790558015610699576000805461ff0019166101001790555b6001600160a01b0387166106c057604051639fabe1c160e01b815260040160405180910390fd5b6001600160a01b0386166106e757604051639fabe1c160e01b815260040160405180910390fd5b6001600160a01b03851661070e57604051639fabe1c160e01b815260040160405180910390fd5b86609c60016101000a8154816001600160a01b0302191690836001600160a01b03160217905550609c60019054906101000a90046001600160a01b03166001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610788573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ac919061191f565b609d80546001600160a01b0319166001600160a01b03928316179055609c54604080517fd21220a700000000000000000000000000000000000000000000000000000000815290516101009092049092169163d21220a79160048083019260209291908290030181865afa158015610828573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084c919061191f565b609e80546001600160a01b0319166001600160a01b03928316179055609c54604080517f5909c0d5000000000000000000000000000000000000000000000000000000008152905161010090920490921691635909c0d59160048083019260209291908290030181865afa1580156108c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ec91906118c6565b609f81905550609c60019054906101000a90046001600160a01b03166001600160a01b0316635a3d54936040518163ffffffff1660e01b8152600401602060405180830381865afa158015610945573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096991906118c6565b60a081905550600080609c60019054906101000a90046001600160a01b03166001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156109c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e9919061195a565b60a1805463ffffffff191663ffffffff9290921691909117905590925090506dffffffffffffffffffffffffffff82161580610a3357506dffffffffffffffffffffffffffff8116155b15610a6a576040517fd8b9cde100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600a861015610a8c5760405163025127a960e51b815260040160405180910390fd5b609a869055609b859055609c805460ff1916851515179055610aae8888610fc9565b50508015610af6576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b610b07610f6f565b6001600160a01b038116610b2e57604051639fabe1c160e01b815260040160405180910390fd5b606780546001600160a01b0319166001600160a01b0383169081179091556040517fce7a780d33665b1ea097af5f155e3821b809ecbaa839d3b33aa83ba28168cefb90600090a250565b600080610b83610514565b90506000606660009054906101000a90046001600160a01b03166001600160a01b03166350d25bcd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bfe91906118c6565b90506305f5e100610c0f82846119aa565b610c19919061190b565b9250505090565b610c28610f6f565b609b81905560405181907f993b8b98616df830268242daa1c34013d7565eaeafb3f0ccaa3dbfe1742a5c1b90600090a250565b610c63610f6f565b610c6d600061106a565b565b600080606560009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cc5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce991906119c9565b606554909150610d0c906001600160a01b0316610d0783600a611ad0565b6110bc565b91505090565b600080610d1d611223565b60a154609a5463ffffffff91821690920316101592915050565b6000806000610d5a609c60019054906101000a90046001600160a01b0316611234565b60a154609a54939650919450925063ffffffff9081168303919082161015610dae576040517ff0aaee6500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405180602001604052808263ffffffff16609f54870381610dd257610dd26118df565b046001600160e01b03908116909152905160a280547fffffffff000000000000000000000000000000000000000000000000000000001691909216179055604080516020810190915260a054819063ffffffff841690860381610e3757610e376118df565b046001600160e01b03908116909152905160a380547fffffffff00000000000000000000000000000000000000000000000000000000169190921617905550609f9290925560a05560a1805463ffffffff191663ffffffff909216919091179055565b610ea2610f6f565b609c805460ff19168215159081179091556040517fe942a0816caaa8241b424ac8c9844952d2f2dbd4dd1e04caefaf9624fe71b15d90600090a250565b610ee7610f6f565b6001600160a01b038116610f635760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161066d565b610f6c8161106a565b50565b6033546001600160a01b03163314610c6d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161066d565b600054610100900460ff166110345760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161066d565b61103c611447565b606580546001600160a01b039384166001600160a01b03199182161790915560668054929093169116179055565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000806110c7611223565b60a154609b54609a5492935063ffffffff9091168303916110e89190611adf565b8163ffffffff16101580156111005750609c5460ff16155b15611137576040517f857860b600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b609d546001600160a01b038681169116141561119657604080516020810190915260a2546001600160e01b0316815261117b9061117490866114ba565b5160701c90565b71ffffffffffffffffffffffffffffffffffff16925061121b565b609e546001600160a01b038681169116146111dd576040517fc1ab6dc100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604080516020810190915260a3546001600160e01b031681526112049061117490866114ba565b71ffffffffffffffffffffffffffffffffffff1692505b505092915050565b60006105c064010000000042611af7565b6000806000611241611223565b9050836001600160a01b0316635909c0d56040518163ffffffff1660e01b8152600401602060405180830381865afa158015611281573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a591906118c6565b9250836001600160a01b0316635a3d54936040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112e5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130991906118c6565b91506000806000866001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa15801561134e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611372919061195a565b9250925092508363ffffffff168163ffffffff161461143d5760006113978286611b0b565b90508063ffffffff166113ca846dffffffffffffffffffffffffffff16866dffffffffffffffffffffffffffff1661155a565b516113de91906001600160e01b03166119aa565b6113e89088611adf565b96508063ffffffff1661141b856dffffffffffffffffffffffffffff16856dffffffffffffffffffffffffffff1661155a565b5161142f91906001600160e01b03166119aa565b6114399087611adf565b9550505b5050509193909250565b600054610100900460ff166114b25760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161066d565b610c6d6116b7565b60408051602081019091526000815260008215806114f7575083516001600160e01b0316836114e981836119aa565b92506114f5908361190b565b145b6115435760405162461bcd60e51b815260206004820152601960248201527f4669786564506f696e743a3a6d756c3a206f766572666c6f7700000000000000604482015260640161066d565b604080516020810190915290815290505b92915050565b604080516020810190915260008152600082116115df5760405162461bcd60e51b815260206004820152602660248201527f4669786564506f696e743a3a6672616374696f6e3a206469766973696f6e206260448201527f79207a65726f0000000000000000000000000000000000000000000000000000606482015260840161066d565b826115f95750604080516020810190915260008152611554565b71ffffffffffffffffffffffffffffffffffff831161169b57600061162283607086901b61190b565b90506001600160e01b0381111561167b5760405162461bcd60e51b815260206004820152601e60248201527f4669786564506f696e743a3a6672616374696f6e3a206f766572666c6f770000604482015260640161066d565b6040518060200160405280826001600160e01b0316815250915050611554565b6000611622846e0100000000000000000000000000008561172b565b600054610100900460ff166117225760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161066d565b610c6d3361106a565b600080806000198587098587029250828110838203039150508060001415611765576000841161175a57600080fd5b5082900490506117d8565b80841161177157600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150505b9392505050565b6000602082840312156117f157600080fd5b5035919050565b8035801515811461180857600080fd5b919050565b60006020828403121561181f57600080fd5b6117d8826117f8565b6001600160a01b0381168114610f6c57600080fd5b60008060008060008060c0878903121561185657600080fd5b863561186181611828565b9550602087013561187181611828565b9450604087013561188181611828565b9350606087013592506080870135915061189d60a088016117f8565b90509295509295509295565b6000602082840312156118bb57600080fd5b81356117d881611828565b6000602082840312156118d857600080fd5b5051919050565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008261191a5761191a6118df565b500490565b60006020828403121561193157600080fd5b81516117d881611828565b80516dffffffffffffffffffffffffffff8116811461180857600080fd5b60008060006060848603121561196f57600080fd5b6119788461193c565b92506119866020850161193c565b9150604084015163ffffffff8116811461199f57600080fd5b809150509250925092565b60008160001904831182151516156119c4576119c46118f5565b500290565b6000602082840312156119db57600080fd5b815160ff811681146117d857600080fd5b600181815b80851115611a27578160001904821115611a0d57611a0d6118f5565b80851615611a1a57918102915b93841c93908002906119f1565b509250929050565b600082611a3e57506001611554565b81611a4b57506000611554565b8160018114611a615760028114611a6b57611a87565b6001915050611554565b60ff841115611a7c57611a7c6118f5565b50506001821b611554565b5060208310610133831016604e8410600b8410161715611aaa575081810a611554565b611ab483836119ec565b8060001904821115611ac857611ac86118f5565b029392505050565b60006117d860ff841683611a2f565b60008219821115611af257611af26118f5565b500190565b600082611b0657611b066118df565b500690565b600063ffffffff83811690831681811015611b2857611b286118f5565b03939250505056fea264697066735822122095ae6e05acdca781b28a53549b1189e85c8badb84cafc03d4183719fb61ad6fd64736f6c634300080c0033",
  "devdoc": {
    "author": "Prime team",
    "details": "Fixed window oracle that recomputes the average price for the entire period once every period Note that the price average is only guaranteed to be over at least 1 period, but may be over a longer period",
    "kind": "dev",
    "methods": {
      "canUpdate()": {
        "details": "Check if update() can be called instead of wasting gas calling it."
      },
      "enableFallback(bool)": {
        "params": {
          "_enabled": "Boolean value."
        }
      },
      "initialize(address,address,address,uint256,uint256,bool)": {
        "params": {
          "_allowStaleConsults": "Enable/Disable stale.",
          "_consultLeniency": "Used for being able to consult past the period end.",
          "_ethChainlinkFeed": "Chainlink price feed for ETH.",
          "_pair": "Uniswap pair contract",
          "_period": "TWAP period.",
          "_prnt": "PRNT token address."
        }
      },
      "latestAnswer()": {
        "details": "supports 18 decimal token",
        "returns": {
          "price": "of token in decimal 8"
        }
      },
      "latestAnswerInEth()": {
        "details": "supports 18 decimal token",
        "returns": {
          "price": "of token in decimal 8."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setAllowStaleConsults(bool)": {
        "params": {
          "_allowStaleConsults": "new value."
        }
      },
      "setConsultLeniency(uint256)": {
        "params": {
          "_consultLeniency": "new value."
        }
      },
      "setFallback(address)": {
        "params": {
          "_fallback": "Oracle address for fallback."
        }
      },
      "setPeriod(uint256)": {
        "params": {
          "_period": "TWAP period."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "UniV2TwapOracle Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "PERIOD_MIN()": {
        "notice": "Minimum TWAP time period"
      },
      "allowStaleConsults()": {
        "notice": "If false, consult() will fail if the TWAP is stale"
      },
      "blockTimestampLast()": {
        "notice": "Last updated timestamp"
      },
      "consult()": {
        "notice": "Returns current price."
      },
      "consultLeniency()": {
        "notice": "Used for being able to consult past the period end"
      },
      "enableFallback(bool)": {
        "notice": "Enable/Disable use of fallback oracle"
      },
      "ethChainlinkFeed()": {
        "notice": "Chainlink price feed for ETH"
      },
      "fallbackEnabled()": {
        "notice": "Enable/Disable fallback"
      },
      "fallbackOracle()": {
        "notice": "Oracle to be used as a fallback"
      },
      "initialize(address,address,address,uint256,uint256,bool)": {
        "notice": "Initializer"
      },
      "latestAnswer()": {
        "notice": "Returns USD price in quote token."
      },
      "latestAnswerInEth()": {
        "notice": "Returns price in ETH"
      },
      "pair()": {
        "notice": "Uniswap pair contract"
      },
      "period()": {
        "notice": "TWAP period"
      },
      "price0Average()": {
        "notice": "Average price of token0"
      },
      "price0CumulativeLast()": {
        "notice": "First token of the pair"
      },
      "price1Average()": {
        "notice": "Average price of token1"
      },
      "price1CumulativeLast()": {
        "notice": "First token of the pair"
      },
      "setAllowStaleConsults(bool)": {
        "notice": "Sets stale consult option."
      },
      "setConsultLeniency(uint256)": {
        "notice": "Sets new consult leniency."
      },
      "setFallback(address)": {
        "notice": "Sets fallback oracle"
      },
      "setPeriod(uint256)": {
        "notice": "Sets new period."
      },
      "token()": {
        "notice": "Token for price"
      },
      "token0()": {
        "notice": "First token of the pair"
      },
      "token1()": {
        "notice": "Second token of the pair"
      },
      "update()": {
        "notice": "Updates price"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3621,
        "contract": "contracts/prime/oracles/UniV2TwapOracle.sol:UniV2TwapOracle",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 3624,
        "contract": "contracts/prime/oracles/UniV2TwapOracle.sol:UniV2TwapOracle",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4291,
        "contract": "contracts/prime/oracles/UniV2TwapOracle.sol:UniV2TwapOracle",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3493,
        "contract": "contracts/prime/oracles/UniV2TwapOracle.sol:UniV2TwapOracle",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 3613,
        "contract": "contracts/prime/oracles/UniV2TwapOracle.sol:UniV2TwapOracle",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 43498,
        "contract": "contracts/prime/oracles/UniV2TwapOracle.sol:UniV2TwapOracle",
        "label": "token",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 43501,
        "contract": "contracts/prime/oracles/UniV2TwapOracle.sol:UniV2TwapOracle",
        "label": "ethChainlinkFeed",
        "offset": 0,
        "slot": "102",
        "type": "t_address"
      },
      {
        "astId": 43504,
        "contract": "contracts/prime/oracles/UniV2TwapOracle.sol:UniV2TwapOracle",
        "label": "fallbackEnabled",
        "offset": 20,
        "slot": "102",
        "type": "t_bool"
      },
      {
        "astId": 43508,
        "contract": "contracts/prime/oracles/UniV2TwapOracle.sol:UniV2TwapOracle",
        "label": "fallbackOracle",
        "offset": 0,
        "slot": "103",
        "type": "t_contract(IBaseOracle)16204"
      },
      {
        "astId": 43696,
        "contract": "contracts/prime/oracles/UniV2TwapOracle.sol:UniV2TwapOracle",
        "label": "__gap",
        "offset": 0,
        "slot": "104",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 44235,
        "contract": "contracts/prime/oracles/UniV2TwapOracle.sol:UniV2TwapOracle",
        "label": "period",
        "offset": 0,
        "slot": "154",
        "type": "t_uint256"
      },
      {
        "astId": 44238,
        "contract": "contracts/prime/oracles/UniV2TwapOracle.sol:UniV2TwapOracle",
        "label": "consultLeniency",
        "offset": 0,
        "slot": "155",
        "type": "t_uint256"
      },
      {
        "astId": 44241,
        "contract": "contracts/prime/oracles/UniV2TwapOracle.sol:UniV2TwapOracle",
        "label": "allowStaleConsults",
        "offset": 0,
        "slot": "156",
        "type": "t_bool"
      },
      {
        "astId": 44245,
        "contract": "contracts/prime/oracles/UniV2TwapOracle.sol:UniV2TwapOracle",
        "label": "pair",
        "offset": 1,
        "slot": "156",
        "type": "t_contract(IUniswapV2Pair)8668"
      },
      {
        "astId": 44248,
        "contract": "contracts/prime/oracles/UniV2TwapOracle.sol:UniV2TwapOracle",
        "label": "token0",
        "offset": 0,
        "slot": "157",
        "type": "t_address"
      },
      {
        "astId": 44251,
        "contract": "contracts/prime/oracles/UniV2TwapOracle.sol:UniV2TwapOracle",
        "label": "token1",
        "offset": 0,
        "slot": "158",
        "type": "t_address"
      },
      {
        "astId": 44254,
        "contract": "contracts/prime/oracles/UniV2TwapOracle.sol:UniV2TwapOracle",
        "label": "price0CumulativeLast",
        "offset": 0,
        "slot": "159",
        "type": "t_uint256"
      },
      {
        "astId": 44257,
        "contract": "contracts/prime/oracles/UniV2TwapOracle.sol:UniV2TwapOracle",
        "label": "price1CumulativeLast",
        "offset": 0,
        "slot": "160",
        "type": "t_uint256"
      },
      {
        "astId": 44260,
        "contract": "contracts/prime/oracles/UniV2TwapOracle.sol:UniV2TwapOracle",
        "label": "blockTimestampLast",
        "offset": 0,
        "slot": "161",
        "type": "t_uint32"
      },
      {
        "astId": 44264,
        "contract": "contracts/prime/oracles/UniV2TwapOracle.sol:UniV2TwapOracle",
        "label": "price0Average",
        "offset": 0,
        "slot": "162",
        "type": "t_struct(uq112x112)12716_storage"
      },
      {
        "astId": 44268,
        "contract": "contracts/prime/oracles/UniV2TwapOracle.sol:UniV2TwapOracle",
        "label": "price1Average",
        "offset": 0,
        "slot": "163",
        "type": "t_struct(uq112x112)12716_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IBaseOracle)16204": {
        "encoding": "inplace",
        "label": "contract IBaseOracle",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Pair)8668": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Pair",
        "numberOfBytes": "20"
      },
      "t_struct(uq112x112)12716_storage": {
        "encoding": "inplace",
        "label": "struct FixedPoint.uq112x112",
        "members": [
          {
            "astId": 12715,
            "contract": "contracts/prime/oracles/UniV2TwapOracle.sol:UniV2TwapOracle",
            "label": "_x",
            "offset": 0,
            "slot": "0",
            "type": "t_uint224"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint224": {
        "encoding": "inplace",
        "label": "uint224",
        "numberOfBytes": "28"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}