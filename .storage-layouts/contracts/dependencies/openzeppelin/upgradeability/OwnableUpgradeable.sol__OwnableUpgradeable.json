{
  "storage": [
    {
      "astId": 11663,
      "contract": "contracts/dependencies/openzeppelin/upgradeability/OwnableUpgradeable.sol:OwnableUpgradeable",
      "label": "initialized",
      "offset": 0,
      "slot": "0",
      "type": "t_bool"
    },
    {
      "astId": 11666,
      "contract": "contracts/dependencies/openzeppelin/upgradeability/OwnableUpgradeable.sol:OwnableUpgradeable",
      "label": "initializing",
      "offset": 1,
      "slot": "0",
      "type": "t_bool"
    },
    {
      "astId": 11733,
      "contract": "contracts/dependencies/openzeppelin/upgradeability/OwnableUpgradeable.sol:OwnableUpgradeable",
      "label": "______gap",
      "offset": 0,
      "slot": "1",
      "type": "t_array(t_uint256)50_storage"
    },
    {
      "astId": 11656,
      "contract": "contracts/dependencies/openzeppelin/upgradeability/OwnableUpgradeable.sol:OwnableUpgradeable",
      "label": "__gap",
      "offset": 0,
      "slot": "51",
      "type": "t_array(t_uint256)50_storage"
    },
    {
      "astId": 11878,
      "contract": "contracts/dependencies/openzeppelin/upgradeability/OwnableUpgradeable.sol:OwnableUpgradeable",
      "label": "_owner",
      "offset": 0,
      "slot": "101",
      "type": "t_address"
    },
    {
      "astId": 11983,
      "contract": "contracts/dependencies/openzeppelin/upgradeability/OwnableUpgradeable.sol:OwnableUpgradeable",
      "label": "__gap",
      "offset": 0,
      "slot": "102",
      "type": "t_array(t_uint256)49_storage"
    }
  ],
  "types": {
    "t_address": {
      "encoding": "inplace",
      "label": "address",
      "numberOfBytes": "20"
    },
    "t_array(t_uint256)49_storage": {
      "base": "t_uint256",
      "encoding": "inplace",
      "label": "uint256[49]",
      "numberOfBytes": "1568"
    },
    "t_array(t_uint256)50_storage": {
      "base": "t_uint256",
      "encoding": "inplace",
      "label": "uint256[50]",
      "numberOfBytes": "1600"
    },
    "t_bool": {
      "encoding": "inplace",
      "label": "bool",
      "numberOfBytes": "1"
    },
    "t_uint256": {
      "encoding": "inplace",
      "label": "uint256",
      "numberOfBytes": "32"
    }
  }
}
